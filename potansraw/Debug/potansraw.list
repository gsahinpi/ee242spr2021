
potansraw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ef4  08007ef4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007ef4  08007ef4  00017ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007efc  08007efc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007efc  08007efc  00017efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003be4  200001e4  080080e8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003dc8  080080e8  00023dc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b3c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000348c  00000000  00000000  00035d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  000391e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  00039eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246ee  00000000  00000000  0003aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113cf  00000000  00000000  0005f106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0afc  00000000  00000000  000704d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00140fd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036d8  00000000  00000000  00141024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e40 	.word	0x08007e40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08007e40 	.word	0x08007e40

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 faad 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f835 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f911 	bl	80007ac <MX_GPIO_Init>
  MX_DMA_Init();
 800058a:	f000 f8ef 	bl	800076c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 800058e:	f006 fadd 	bl	8006b4c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000592:	f000 f899 	bl	80006c8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1,adc_buf,ADC_BUF_LEN);
 8000596:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800059a:	4911      	ldr	r1, [pc, #68]	; (80005e0 <main+0x68>)
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <main+0x6c>)
 800059e:	f000 fb77 	bl	8000c90 <HAL_ADC_Start_DMA>
		//  raw = HAL_ADC_GetValue(&hadc1);//0 and 4096-> 2^12



	  // Convert to string and print
		sprintf(msg, "%hu\r\n", adc_buf[4094]);
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <main+0x68>)
 80005a4:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 80005a8:	331c      	adds	r3, #28
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	490d      	ldr	r1, [pc, #52]	; (80005e8 <main+0x70>)
 80005b2:	4618      	mov	r0, r3
 80005b4:	f007 f816 	bl	80075e4 <siprintf>
	//  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	  /*send data over usb, we have 1000 16bit samples which is 2000bytes*/
		if (adccomplete==1)
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <main+0x74>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d1f0      	bne.n	80005a2 <main+0x2a>
		{
	  CDC_Transmit_FS((uint8_t*)msg,strlen(msg));
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe04 	bl	80001d0 <strlen>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4611      	mov	r1, r2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f006 fb79 	bl	8006cc8 <CDC_Transmit_FS>
	  adccomplete=0;
 80005d6:	4b05      	ldr	r3, [pc, #20]	; (80005ec <main+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
		sprintf(msg, "%hu\r\n", adc_buf[4094]);
 80005dc:	e7e1      	b.n	80005a2 <main+0x2a>
 80005de:	bf00      	nop
 80005e0:	200004dc 	.word	0x200004dc
 80005e4:	20000434 	.word	0x20000434
 80005e8:	08007e58 	.word	0x08007e58
 80005ec:	20000200 	.word	0x20000200

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f006 ffe8 	bl	80075d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <SystemClock_Config+0xd0>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a28      	ldr	r2, [pc, #160]	; (80006c0 <SystemClock_Config+0xd0>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <SystemClock_Config+0xd0>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <SystemClock_Config+0xd4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a22      	ldr	r2, [pc, #136]	; (80006c4 <SystemClock_Config+0xd4>)
 800063a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <SystemClock_Config+0xd4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800064c:	2303      	movs	r3, #3
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000656:	2301      	movs	r3, #1
 8000658:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065a:	2310      	movs	r3, #16
 800065c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800066c:	2348      	movs	r3, #72	; 0x48
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000674:	2303      	movs	r3, #3
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fe63 	bl	8003348 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000688:	f000 f8d2 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f003 f8c6 	bl	8003838 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006b2:	f000 f8bd 	bl	8000830 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_ADC1_Init+0x98>)
 80006dc:	4a21      	ldr	r2, [pc, #132]	; (8000764 <MX_ADC1_Init+0x9c>)
 80006de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006f2:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_ADC1_Init+0x98>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_ADC1_Init+0x98>)
 8000708:	4a17      	ldr	r2, [pc, #92]	; (8000768 <MX_ADC1_Init+0xa0>)
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_ADC1_Init+0x98>)
 8000714:	2201      	movs	r2, #1
 8000716:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_ADC1_Init+0x98>)
 800071a:	2201      	movs	r2, #1
 800071c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_ADC1_Init+0x98>)
 8000722:	2201      	movs	r2, #1
 8000724:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000726:	480e      	ldr	r0, [pc, #56]	; (8000760 <MX_ADC1_Init+0x98>)
 8000728:	f000 fa6e 	bl	8000c08 <HAL_ADC_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000732:	f000 f87d 	bl	8000830 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800073a:	2301      	movs	r3, #1
 800073c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_ADC1_Init+0x98>)
 8000748:	f000 fbbc 	bl	8000ec4 <HAL_ADC_ConfigChannel>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000752:	f000 f86d 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000434 	.word	0x20000434
 8000764:	40012000 	.word	0x40012000
 8000768:	0f000001 	.word	0x0f000001

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_DMA_Init+0x3c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <MX_DMA_Init+0x3c>)
 800077c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_DMA_Init+0x3c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	2038      	movs	r0, #56	; 0x38
 8000794:	f000 ff11 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000798:	2038      	movs	r0, #56	; 0x38
 800079a:	f000 ff2a 	bl	80015f2 <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_GPIO_Init+0x4c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <MX_GPIO_Init+0x4c>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_GPIO_Init+0x4c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_GPIO_Init+0x4c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <MX_GPIO_Init+0x4c>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_GPIO_Init+0x4c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	 adccomplete=1;
 8000804:	4b04      	ldr	r3, [pc, #16]	; (8000818 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000806:	2201      	movs	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000200 	.word	0x20000200

0800081c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]

}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <HAL_MspInit+0x4c>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <HAL_MspInit+0x4c>)
 800084c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000850:	6453      	str	r3, [r2, #68]	; 0x44
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_MspInit+0x4c>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <HAL_MspInit+0x4c>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a08      	ldr	r2, [pc, #32]	; (8000888 <HAL_MspInit+0x4c>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_MspInit+0x4c>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <HAL_ADC_MspInit+0xdc>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d157      	bne.n	800095e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b2e      	ldr	r3, [pc, #184]	; (800096c <HAL_ADC_MspInit+0xe0>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a2d      	ldr	r2, [pc, #180]	; (800096c <HAL_ADC_MspInit+0xe0>)
 80008b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <HAL_ADC_MspInit+0xe0>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b27      	ldr	r3, [pc, #156]	; (800096c <HAL_ADC_MspInit+0xe0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a26      	ldr	r2, [pc, #152]	; (800096c <HAL_ADC_MspInit+0xe0>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b24      	ldr	r3, [pc, #144]	; (800096c <HAL_ADC_MspInit+0xe0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e6:	2301      	movs	r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ea:	2303      	movs	r3, #3
 80008ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	481d      	ldr	r0, [pc, #116]	; (8000970 <HAL_ADC_MspInit+0xe4>)
 80008fa:	f001 fa05 	bl	8001d08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <HAL_ADC_MspInit+0xe8>)
 8000900:	4a1d      	ldr	r2, [pc, #116]	; (8000978 <HAL_ADC_MspInit+0xec>)
 8000902:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <HAL_ADC_MspInit+0xe8>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <HAL_ADC_MspInit+0xe8>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <HAL_ADC_MspInit+0xe8>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_ADC_MspInit+0xe8>)
 8000918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800091c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_ADC_MspInit+0xe8>)
 8000920:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000924:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_ADC_MspInit+0xe8>)
 8000928:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800092c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_ADC_MspInit+0xe8>)
 8000930:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000934:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_ADC_MspInit+0xe8>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_ADC_MspInit+0xe8>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000942:	480c      	ldr	r0, [pc, #48]	; (8000974 <HAL_ADC_MspInit+0xe8>)
 8000944:	f000 fe70 	bl	8001628 <HAL_DMA_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800094e:	f7ff ff6f 	bl	8000830 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_ADC_MspInit+0xe8>)
 8000956:	639a      	str	r2, [r3, #56]	; 0x38
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_ADC_MspInit+0xe8>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40012000 	.word	0x40012000
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000
 8000974:	2000047c 	.word	0x2000047c
 8000978:	40026410 	.word	0x40026410

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f8da 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <DMA2_Stream0_IRQHandler+0x10>)
 80009d6:	f000 ff2d 	bl	8001834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000047c 	.word	0x2000047c

080009e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <OTG_FS_IRQHandler+0x10>)
 80009ea:	f001 fc79 	bl	80022e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200039b0 	.word	0x200039b0

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f006 fdaa 	bl	8007580 <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20020000 	.word	0x20020000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	20000204 	.word	0x20000204
 8000a60:	20003dc8 	.word	0x20003dc8

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a8e:	490e      	ldr	r1, [pc, #56]	; (8000ac8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a90:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa4:	4c0b      	ldr	r4, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ab2:	f7ff ffd7 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab6:	f006 fd69 	bl	800758c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aba:	f7ff fd5d 	bl	8000578 <main>
  bx  lr    
 8000abe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000acc:	08007f04 	.word	0x08007f04
  ldr r2, =_sbss
 8000ad0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000ad4:	20003dc8 	.word	0x20003dc8

08000ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC_IRQHandler>
	...

08000adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <HAL_Init+0x40>)
 8000ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_Init+0x40>)
 8000af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x40>)
 8000afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 fd4d 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f000 f808 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff fe94 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023c00 	.word	0x40023c00

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x54>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x58>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fd65 	bl	800160e <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00e      	b.n	8000b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80a      	bhi.n	8000b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 fd2d 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_InitTick+0x5c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000004 	.word	0x20000004

08000b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	200024dc 	.word	0x200024dc

08000ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <HAL_GetTick+0x14>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	200024dc 	.word	0x200024dc

08000bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc8:	f7ff ffee 	bl	8000ba8 <HAL_GetTick>
 8000bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd8:	d005      	beq.n	8000be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_Delay+0x44>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4413      	add	r3, r2
 8000be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000be6:	bf00      	nop
 8000be8:	f7ff ffde 	bl	8000ba8 <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d8f7      	bhi.n	8000be8 <HAL_Delay+0x28>
  {
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008

08000c08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e033      	b.n	8000c86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d109      	bne.n	8000c3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fe30 	bl	800088c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	f003 0310 	and.w	r3, r3, #16
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d118      	bne.n	8000c78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c4e:	f023 0302 	bic.w	r3, r3, #2
 8000c52:	f043 0202 	orr.w	r2, r3, #2
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 fa54 	bl	8001108 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f023 0303 	bic.w	r3, r3, #3
 8000c6e:	f043 0201 	orr.w	r2, r3, #1
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	641a      	str	r2, [r3, #64]	; 0x40
 8000c76:	e001      	b.n	8000c7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d101      	bne.n	8000cae <HAL_ADC_Start_DMA+0x1e>
 8000caa:	2302      	movs	r3, #2
 8000cac:	e0e9      	b.n	8000e82 <HAL_ADC_Start_DMA+0x1f2>
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d018      	beq.n	8000cf6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f042 0201 	orr.w	r2, r2, #1
 8000cd2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cd4:	4b6d      	ldr	r3, [pc, #436]	; (8000e8c <HAL_ADC_Start_DMA+0x1fc>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a6d      	ldr	r2, [pc, #436]	; (8000e90 <HAL_ADC_Start_DMA+0x200>)
 8000cda:	fba2 2303 	umull	r2, r3, r2, r3
 8000cde:	0c9a      	lsrs	r2, r3, #18
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	4413      	add	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000ce8:	e002      	b.n	8000cf0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1f9      	bne.n	8000cea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d04:	d107      	bne.n	8000d16 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	689a      	ldr	r2, [r3, #8]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d14:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	f040 80a1 	bne.w	8000e68 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d2e:	f023 0301 	bic.w	r3, r3, #1
 8000d32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d007      	beq.n	8000d58 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d64:	d106      	bne.n	8000d74 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f023 0206 	bic.w	r2, r3, #6
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	645a      	str	r2, [r3, #68]	; 0x44
 8000d72:	e002      	b.n	8000d7a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2200      	movs	r2, #0
 8000d78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d82:	4b44      	ldr	r3, [pc, #272]	; (8000e94 <HAL_ADC_Start_DMA+0x204>)
 8000d84:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d8a:	4a43      	ldr	r2, [pc, #268]	; (8000e98 <HAL_ADC_Start_DMA+0x208>)
 8000d8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d92:	4a42      	ldr	r2, [pc, #264]	; (8000e9c <HAL_ADC_Start_DMA+0x20c>)
 8000d94:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d9a:	4a41      	ldr	r2, [pc, #260]	; (8000ea0 <HAL_ADC_Start_DMA+0x210>)
 8000d9c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000da6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000db6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dc6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	334c      	adds	r3, #76	; 0x4c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f000 fcd4 	bl	8001784 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 031f 	and.w	r3, r3, #31
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d12a      	bne.n	8000e3e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a2d      	ldr	r2, [pc, #180]	; (8000ea4 <HAL_ADC_Start_DMA+0x214>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d015      	beq.n	8000e1e <HAL_ADC_Start_DMA+0x18e>
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a2c      	ldr	r2, [pc, #176]	; (8000ea8 <HAL_ADC_Start_DMA+0x218>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d105      	bne.n	8000e08 <HAL_ADC_Start_DMA+0x178>
 8000dfc:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <HAL_ADC_Start_DMA+0x204>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 031f 	and.w	r3, r3, #31
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00a      	beq.n	8000e1e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a27      	ldr	r2, [pc, #156]	; (8000eac <HAL_ADC_Start_DMA+0x21c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d136      	bne.n	8000e80 <HAL_ADC_Start_DMA+0x1f0>
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <HAL_ADC_Start_DMA+0x204>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d130      	bne.n	8000e80 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d129      	bne.n	8000e80 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	e020      	b.n	8000e80 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <HAL_ADC_Start_DMA+0x214>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d11b      	bne.n	8000e80 <HAL_ADC_Start_DMA+0x1f0>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d114      	bne.n	8000e80 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	e00b      	b.n	8000e80 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f043 0210 	orr.w	r2, r3, #16
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e78:	f043 0201 	orr.w	r2, r3, #1
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	431bde83 	.word	0x431bde83
 8000e94:	40012300 	.word	0x40012300
 8000e98:	08001301 	.word	0x08001301
 8000e9c:	080013bb 	.word	0x080013bb
 8000ea0:	080013d7 	.word	0x080013d7
 8000ea4:	40012000 	.word	0x40012000
 8000ea8:	40012100 	.word	0x40012100
 8000eac:	40012200 	.word	0x40012200

08000eb0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d101      	bne.n	8000ee0 <HAL_ADC_ConfigChannel+0x1c>
 8000edc:	2302      	movs	r3, #2
 8000ede:	e105      	b.n	80010ec <HAL_ADC_ConfigChannel+0x228>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b09      	cmp	r3, #9
 8000eee:	d925      	bls.n	8000f3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68d9      	ldr	r1, [r3, #12]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	461a      	mov	r2, r3
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	3b1e      	subs	r3, #30
 8000f06:	2207      	movs	r2, #7
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43da      	mvns	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	400a      	ands	r2, r1
 8000f14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68d9      	ldr	r1, [r3, #12]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	4603      	mov	r3, r0
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4403      	add	r3, r0
 8000f2e:	3b1e      	subs	r3, #30
 8000f30:	409a      	lsls	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	e022      	b.n	8000f82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6919      	ldr	r1, [r3, #16]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	2207      	movs	r2, #7
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6919      	ldr	r1, [r3, #16]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	4603      	mov	r3, r0
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4403      	add	r3, r0
 8000f78:	409a      	lsls	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d824      	bhi.n	8000fd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	3b05      	subs	r3, #5
 8000f9c:	221f      	movs	r2, #31
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	400a      	ands	r2, r1
 8000faa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	3b05      	subs	r3, #5
 8000fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	635a      	str	r2, [r3, #52]	; 0x34
 8000fd2:	e04c      	b.n	800106e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b0c      	cmp	r3, #12
 8000fda:	d824      	bhi.n	8001026 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	3b23      	subs	r3, #35	; 0x23
 8000fee:	221f      	movs	r2, #31
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43da      	mvns	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	400a      	ands	r2, r1
 8000ffc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	b29b      	uxth	r3, r3
 800100a:	4618      	mov	r0, r3
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	3b23      	subs	r3, #35	; 0x23
 8001018:	fa00 f203 	lsl.w	r2, r0, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	430a      	orrs	r2, r1
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
 8001024:	e023      	b.n	800106e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	3b41      	subs	r3, #65	; 0x41
 8001038:	221f      	movs	r2, #31
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	400a      	ands	r2, r1
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	b29b      	uxth	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	3b41      	subs	r3, #65	; 0x41
 8001062:	fa00 f203 	lsl.w	r2, r0, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <HAL_ADC_ConfigChannel+0x234>)
 8001070:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a21      	ldr	r2, [pc, #132]	; (80010fc <HAL_ADC_ConfigChannel+0x238>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d109      	bne.n	8001090 <HAL_ADC_ConfigChannel+0x1cc>
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b12      	cmp	r3, #18
 8001082:	d105      	bne.n	8001090 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a19      	ldr	r2, [pc, #100]	; (80010fc <HAL_ADC_ConfigChannel+0x238>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d123      	bne.n	80010e2 <HAL_ADC_ConfigChannel+0x21e>
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b10      	cmp	r3, #16
 80010a0:	d003      	beq.n	80010aa <HAL_ADC_ConfigChannel+0x1e6>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b11      	cmp	r3, #17
 80010a8:	d11b      	bne.n	80010e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b10      	cmp	r3, #16
 80010bc:	d111      	bne.n	80010e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_ADC_ConfigChannel+0x23c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <HAL_ADC_ConfigChannel+0x240>)
 80010c4:	fba2 2303 	umull	r2, r3, r2, r3
 80010c8:	0c9a      	lsrs	r2, r3, #18
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010d4:	e002      	b.n	80010dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	3b01      	subs	r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f9      	bne.n	80010d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40012300 	.word	0x40012300
 80010fc:	40012000 	.word	0x40012000
 8001100:	20000000 	.word	0x20000000
 8001104:	431bde83 	.word	0x431bde83

08001108 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001110:	4b79      	ldr	r3, [pc, #484]	; (80012f8 <ADC_Init+0x1f0>)
 8001112:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	685a      	ldr	r2, [r3, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	431a      	orrs	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800113c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6859      	ldr	r1, [r3, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	021a      	lsls	r2, r3, #8
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6859      	ldr	r1, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001182:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6899      	ldr	r1, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119a:	4a58      	ldr	r2, [pc, #352]	; (80012fc <ADC_Init+0x1f4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d022      	beq.n	80011e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6899      	ldr	r1, [r3, #8]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	430a      	orrs	r2, r1
 80011c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6899      	ldr	r1, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	e00f      	b.n	8001206 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001204:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0202 	bic.w	r2, r2, #2
 8001214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	6899      	ldr	r1, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7e1b      	ldrb	r3, [r3, #24]
 8001220:	005a      	lsls	r2, r3, #1
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	430a      	orrs	r2, r1
 8001228:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01b      	beq.n	800126c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001242:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001252:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6859      	ldr	r1, [r3, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125e:	3b01      	subs	r3, #1
 8001260:	035a      	lsls	r2, r3, #13
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	430a      	orrs	r2, r1
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	e007      	b.n	800127c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800127a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800128a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	3b01      	subs	r3, #1
 8001298:	051a      	lsls	r2, r3, #20
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6899      	ldr	r1, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012be:	025a      	lsls	r2, r3, #9
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6899      	ldr	r1, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	029a      	lsls	r2, r3, #10
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	609a      	str	r2, [r3, #8]
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40012300 	.word	0x40012300
 80012fc:	0f000001 	.word	0x0f000001

08001300 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001316:	2b00      	cmp	r3, #0
 8001318:	d13c      	bne.n	8001394 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d12b      	bne.n	800138c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001338:	2b00      	cmp	r3, #0
 800133a:	d127      	bne.n	800138c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001354:	2b00      	cmp	r3, #0
 8001356:	d119      	bne.n	800138c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0220 	bic.w	r2, r2, #32
 8001366:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d105      	bne.n	800138c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff fa35 	bl	80007fc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001392:	e00e      	b.n	80013b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f7ff fd85 	bl	8000eb0 <HAL_ADC_ErrorCallback>
}
 80013a6:	e004      	b.n	80013b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	4798      	blx	r3
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f7ff fa27 	bl	800081c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2240      	movs	r2, #64	; 0x40
 80013e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f043 0204 	orr.w	r2, r3, #4
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f7ff fd5a 	bl	8000eb0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	; (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff29 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff3e 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff8e 	bl	80014f8 <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff31 	bl	8001468 <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffa2 	bl	8001560 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff fab8 	bl	8000ba8 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e099      	b.n	8001778 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2202      	movs	r2, #2
 8001650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001664:	e00f      	b.n	8001686 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001666:	f7ff fa9f 	bl	8000ba8 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b05      	cmp	r3, #5
 8001672:	d908      	bls.n	8001686 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2220      	movs	r2, #32
 8001678:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2203      	movs	r2, #3
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e078      	b.n	8001778 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1e8      	bne.n	8001666 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	4b38      	ldr	r3, [pc, #224]	; (8001780 <HAL_DMA_Init+0x158>)
 80016a0:	4013      	ands	r3, r2
 80016a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d107      	bne.n	80016f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e8:	4313      	orrs	r3, r2
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f023 0307 	bic.w	r3, r3, #7
 8001706:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	4313      	orrs	r3, r2
 8001710:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	2b04      	cmp	r3, #4
 8001718:	d117      	bne.n	800174a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4313      	orrs	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00e      	beq.n	800174a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 fa6f 	bl	8001c10 <DMA_CheckFifoParam>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2240      	movs	r2, #64	; 0x40
 800173c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001746:	2301      	movs	r3, #1
 8001748:	e016      	b.n	8001778 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 fa26 	bl	8001ba4 <DMA_CalcBaseAndBitshift>
 8001758:	4603      	mov	r3, r0
 800175a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001760:	223f      	movs	r2, #63	; 0x3f
 8001762:	409a      	lsls	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	f010803f 	.word	0xf010803f

08001784 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_DMA_Start_IT+0x26>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e040      	b.n	800182c <HAL_DMA_Start_IT+0xa8>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d12f      	bne.n	800181e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2202      	movs	r2, #2
 80017c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f9b8 	bl	8001b48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	223f      	movs	r2, #63	; 0x3f
 80017de:	409a      	lsls	r2, r3
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0216 	orr.w	r2, r2, #22
 80017f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0208 	orr.w	r2, r2, #8
 800180a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	e005      	b.n	800182a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001826:	2302      	movs	r3, #2
 8001828:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800182a:	7dfb      	ldrb	r3, [r7, #23]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001840:	4b92      	ldr	r3, [pc, #584]	; (8001a8c <HAL_DMA_IRQHandler+0x258>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a92      	ldr	r2, [pc, #584]	; (8001a90 <HAL_DMA_IRQHandler+0x25c>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0a9b      	lsrs	r3, r3, #10
 800184c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185e:	2208      	movs	r2, #8
 8001860:	409a      	lsls	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d01a      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0204 	bic.w	r2, r2, #4
 8001886:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188c:	2208      	movs	r2, #8
 800188e:	409a      	lsls	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001898:	f043 0201 	orr.w	r2, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a4:	2201      	movs	r2, #1
 80018a6:	409a      	lsls	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d012      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00b      	beq.n	80018d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c2:	2201      	movs	r2, #1
 80018c4:	409a      	lsls	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ce:	f043 0202 	orr.w	r2, r3, #2
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018da:	2204      	movs	r2, #4
 80018dc:	409a      	lsls	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d012      	beq.n	800190c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00b      	beq.n	800190c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f8:	2204      	movs	r2, #4
 80018fa:	409a      	lsls	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001904:	f043 0204 	orr.w	r2, r3, #4
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001910:	2210      	movs	r2, #16
 8001912:	409a      	lsls	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4013      	ands	r3, r2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d043      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d03c      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192e:	2210      	movs	r2, #16
 8001930:	409a      	lsls	r2, r3
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d018      	beq.n	8001976 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d108      	bne.n	8001964 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	2b00      	cmp	r3, #0
 8001958:	d024      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4798      	blx	r3
 8001962:	e01f      	b.n	80019a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01b      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	4798      	blx	r3
 8001974:	e016      	b.n	80019a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d107      	bne.n	8001994 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0208 	bic.w	r2, r2, #8
 8001992:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	2220      	movs	r2, #32
 80019aa:	409a      	lsls	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 808e 	beq.w	8001ad2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8086 	beq.w	8001ad2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	2220      	movs	r2, #32
 80019cc:	409a      	lsls	r2, r3
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b05      	cmp	r3, #5
 80019dc:	d136      	bne.n	8001a4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 0216 	bic.w	r2, r2, #22
 80019ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d103      	bne.n	8001a0e <HAL_DMA_IRQHandler+0x1da>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d007      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0208 	bic.w	r2, r2, #8
 8001a1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a22:	223f      	movs	r2, #63	; 0x3f
 8001a24:	409a      	lsls	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d07d      	beq.n	8001b3e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	4798      	blx	r3
        }
        return;
 8001a4a:	e078      	b.n	8001b3e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01c      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d108      	bne.n	8001a7a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d030      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
 8001a78:	e02b      	b.n	8001ad2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d027      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
 8001a8a:	e022      	b.n	8001ad2 <HAL_DMA_IRQHandler+0x29e>
 8001a8c:	20000000 	.word	0x20000000
 8001a90:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d10f      	bne.n	8001ac2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0210 	bic.w	r2, r2, #16
 8001ab0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d032      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d022      	beq.n	8001b2c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2205      	movs	r2, #5
 8001aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	3301      	adds	r3, #1
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d307      	bcc.n	8001b1a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f2      	bne.n	8001afe <HAL_DMA_IRQHandler+0x2ca>
 8001b18:	e000      	b.n	8001b1c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001b1a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
 8001b3c:	e000      	b.n	8001b40 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b3e:	bf00      	nop
    }
  }
}
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop

08001b48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
 8001b54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b40      	cmp	r3, #64	; 0x40
 8001b74:	d108      	bne.n	8001b88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b86:	e007      	b.n	8001b98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	60da      	str	r2, [r3, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	3b10      	subs	r3, #16
 8001bb4:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <DMA_CalcBaseAndBitshift+0x64>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001bbe:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <DMA_CalcBaseAndBitshift+0x68>)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d909      	bls.n	8001be6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bda:	f023 0303 	bic.w	r3, r3, #3
 8001bde:	1d1a      	adds	r2, r3, #4
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	659a      	str	r2, [r3, #88]	; 0x58
 8001be4:	e007      	b.n	8001bf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bee:	f023 0303 	bic.w	r3, r3, #3
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	aaaaaaab 	.word	0xaaaaaaab
 8001c0c:	08007eb8 	.word	0x08007eb8

08001c10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d11f      	bne.n	8001c6a <DMA_CheckFifoParam+0x5a>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d856      	bhi.n	8001cde <DMA_CheckFifoParam+0xce>
 8001c30:	a201      	add	r2, pc, #4	; (adr r2, 8001c38 <DMA_CheckFifoParam+0x28>)
 8001c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c36:	bf00      	nop
 8001c38:	08001c49 	.word	0x08001c49
 8001c3c:	08001c5b 	.word	0x08001c5b
 8001c40:	08001c49 	.word	0x08001c49
 8001c44:	08001cdf 	.word	0x08001cdf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d046      	beq.n	8001ce2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c58:	e043      	b.n	8001ce2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c62:	d140      	bne.n	8001ce6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c68:	e03d      	b.n	8001ce6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c72:	d121      	bne.n	8001cb8 <DMA_CheckFifoParam+0xa8>
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d837      	bhi.n	8001cea <DMA_CheckFifoParam+0xda>
 8001c7a:	a201      	add	r2, pc, #4	; (adr r2, 8001c80 <DMA_CheckFifoParam+0x70>)
 8001c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c80:	08001c91 	.word	0x08001c91
 8001c84:	08001c97 	.word	0x08001c97
 8001c88:	08001c91 	.word	0x08001c91
 8001c8c:	08001ca9 	.word	0x08001ca9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
      break;
 8001c94:	e030      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d025      	beq.n	8001cee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ca6:	e022      	b.n	8001cee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cb0:	d11f      	bne.n	8001cf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cb6:	e01c      	b.n	8001cf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d903      	bls.n	8001cc6 <DMA_CheckFifoParam+0xb6>
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d003      	beq.n	8001ccc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001cc4:	e018      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8001cca:	e015      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00e      	beq.n	8001cf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
      break;
 8001cdc:	e00b      	b.n	8001cf6 <DMA_CheckFifoParam+0xe6>
      break;
 8001cde:	bf00      	nop
 8001ce0:	e00a      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ce2:	bf00      	nop
 8001ce4:	e008      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ce6:	bf00      	nop
 8001ce8:	e006      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cea:	bf00      	nop
 8001cec:	e004      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cee:	bf00      	nop
 8001cf0:	e002      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001cf2:	bf00      	nop
 8001cf4:	e000      	b.n	8001cf8 <DMA_CheckFifoParam+0xe8>
      break;
 8001cf6:	bf00      	nop
    }
  } 
  
  return status; 
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	e16b      	b.n	8001ffc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d24:	2201      	movs	r2, #1
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f040 815a 	bne.w	8001ff6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d005      	beq.n	8001d5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d130      	bne.n	8001dbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	2203      	movs	r2, #3
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	091b      	lsrs	r3, r3, #4
 8001da6:	f003 0201 	and.w	r2, r3, #1
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d017      	beq.n	8001df8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d123      	bne.n	8001e4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	08da      	lsrs	r2, r3, #3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3208      	adds	r2, #8
 8001e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	08da      	lsrs	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3208      	adds	r2, #8
 8001e46:	69b9      	ldr	r1, [r7, #24]
 8001e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	2203      	movs	r2, #3
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0203 	and.w	r2, r3, #3
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80b4 	beq.w	8001ff6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b60      	ldr	r3, [pc, #384]	; (8002014 <HAL_GPIO_Init+0x30c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a5f      	ldr	r2, [pc, #380]	; (8002014 <HAL_GPIO_Init+0x30c>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b5d      	ldr	r3, [pc, #372]	; (8002014 <HAL_GPIO_Init+0x30c>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eaa:	4a5b      	ldr	r2, [pc, #364]	; (8002018 <HAL_GPIO_Init+0x310>)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_GPIO_Init+0x314>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d02b      	beq.n	8001f2e <HAL_GPIO_Init+0x226>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a51      	ldr	r2, [pc, #324]	; (8002020 <HAL_GPIO_Init+0x318>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d025      	beq.n	8001f2a <HAL_GPIO_Init+0x222>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a50      	ldr	r2, [pc, #320]	; (8002024 <HAL_GPIO_Init+0x31c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01f      	beq.n	8001f26 <HAL_GPIO_Init+0x21e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4f      	ldr	r2, [pc, #316]	; (8002028 <HAL_GPIO_Init+0x320>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d019      	beq.n	8001f22 <HAL_GPIO_Init+0x21a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a4e      	ldr	r2, [pc, #312]	; (800202c <HAL_GPIO_Init+0x324>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <HAL_GPIO_Init+0x216>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4d      	ldr	r2, [pc, #308]	; (8002030 <HAL_GPIO_Init+0x328>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00d      	beq.n	8001f1a <HAL_GPIO_Init+0x212>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4c      	ldr	r2, [pc, #304]	; (8002034 <HAL_GPIO_Init+0x32c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d007      	beq.n	8001f16 <HAL_GPIO_Init+0x20e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4b      	ldr	r2, [pc, #300]	; (8002038 <HAL_GPIO_Init+0x330>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d101      	bne.n	8001f12 <HAL_GPIO_Init+0x20a>
 8001f0e:	2307      	movs	r3, #7
 8001f10:	e00e      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f12:	2308      	movs	r3, #8
 8001f14:	e00c      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f16:	2306      	movs	r3, #6
 8001f18:	e00a      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f1a:	2305      	movs	r3, #5
 8001f1c:	e008      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f1e:	2304      	movs	r3, #4
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f22:	2303      	movs	r3, #3
 8001f24:	e004      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e002      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_GPIO_Init+0x228>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	f002 0203 	and.w	r2, r2, #3
 8001f36:	0092      	lsls	r2, r2, #2
 8001f38:	4093      	lsls	r3, r2
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f40:	4935      	ldr	r1, [pc, #212]	; (8002018 <HAL_GPIO_Init+0x310>)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	089b      	lsrs	r3, r3, #2
 8001f46:	3302      	adds	r3, #2
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f4e:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_GPIO_Init+0x334>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f72:	4a32      	ldr	r2, [pc, #200]	; (800203c <HAL_GPIO_Init+0x334>)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f78:	4b30      	ldr	r3, [pc, #192]	; (800203c <HAL_GPIO_Init+0x334>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f9c:	4a27      	ldr	r2, [pc, #156]	; (800203c <HAL_GPIO_Init+0x334>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa2:	4b26      	ldr	r3, [pc, #152]	; (800203c <HAL_GPIO_Init+0x334>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fc6:	4a1d      	ldr	r2, [pc, #116]	; (800203c <HAL_GPIO_Init+0x334>)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <HAL_GPIO_Init+0x334>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff0:	4a12      	ldr	r2, [pc, #72]	; (800203c <HAL_GPIO_Init+0x334>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	2b0f      	cmp	r3, #15
 8002000:	f67f ae90 	bls.w	8001d24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3724      	adds	r7, #36	; 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	40013800 	.word	0x40013800
 800201c:	40020000 	.word	0x40020000
 8002020:	40020400 	.word	0x40020400
 8002024:	40020800 	.word	0x40020800
 8002028:	40020c00 	.word	0x40020c00
 800202c:	40021000 	.word	0x40021000
 8002030:	40021400 	.word	0x40021400
 8002034:	40021800 	.word	0x40021800
 8002038:	40021c00 	.word	0x40021c00
 800203c:	40013c00 	.word	0x40013c00

08002040 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002042:	b08f      	sub	sp, #60	; 0x3c
 8002044:	af0a      	add	r7, sp, #40	; 0x28
 8002046:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e10f      	b.n	8002272 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d106      	bne.n	8002072 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f004 ff73 	bl	8006f58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2203      	movs	r2, #3
 8002076:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d102      	bne.n	800208c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f001 feba 	bl	8003e0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	687e      	ldr	r6, [r7, #4]
 800209e:	466d      	mov	r5, sp
 80020a0:	f106 0410 	add.w	r4, r6, #16
 80020a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80020b4:	1d33      	adds	r3, r6, #4
 80020b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b8:	6838      	ldr	r0, [r7, #0]
 80020ba:	f001 fd91 	bl	8003be0 <USB_CoreInit>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0d0      	b.n	8002272 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f001 fea8 	bl	8003e2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	e04a      	b.n	8002178 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	333d      	adds	r3, #61	; 0x3d
 80020f2:	2201      	movs	r2, #1
 80020f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	333c      	adds	r3, #60	; 0x3c
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800210a:	7bfa      	ldrb	r2, [r7, #15]
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	b298      	uxth	r0, r3
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3342      	adds	r3, #66	; 0x42
 800211e:	4602      	mov	r2, r0
 8002120:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	333f      	adds	r3, #63	; 0x3f
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	1a9b      	subs	r3, r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	3344      	adds	r3, #68	; 0x44
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3348      	adds	r3, #72	; 0x48
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	3350      	adds	r3, #80	; 0x50
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	3301      	adds	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	d3af      	bcc.n	80020e2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]
 8002186:	e044      	b.n	8002212 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800219e:	7bfa      	ldrb	r2, [r7, #15]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	440b      	add	r3, r1
 80021ac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021b4:	7bfa      	ldrb	r2, [r7, #15]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021ca:	7bfa      	ldrb	r2, [r7, #15]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	3301      	adds	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	d3b5      	bcc.n	8002188 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	687e      	ldr	r6, [r7, #4]
 8002224:	466d      	mov	r5, sp
 8002226:	f106 0410 	add.w	r4, r6, #16
 800222a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002232:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002236:	e885 0003 	stmia.w	r5, {r0, r1}
 800223a:	1d33      	adds	r3, r6, #4
 800223c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223e:	6838      	ldr	r0, [r7, #0]
 8002240:	f001 fe1e 	bl	8003e80 <USB_DevInit>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e00d      	b.n	8002272 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f002 fe66 	bl	8004f3c <USB_DevDisconnect>

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800227a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_PCD_Start+0x1c>
 8002292:	2302      	movs	r3, #2
 8002294:	e020      	b.n	80022d8 <HAL_PCD_Start+0x5e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d109      	bne.n	80022ba <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d005      	beq.n	80022ba <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 fd92 	bl	8003de8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f002 fe16 	bl	8004efa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022e0:	b590      	push	{r4, r7, lr}
 80022e2:	b08d      	sub	sp, #52	; 0x34
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 fed4 	bl	80050a4 <USB_GetMode>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 839d 	bne.w	8002a3e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f002 fe38 	bl	8004f7e <USB_ReadInterrupts>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 8393 	beq.w	8002a3c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f002 fe2f 	bl	8004f7e <USB_ReadInterrupts>
 8002320:	4603      	mov	r3, r0
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b02      	cmp	r3, #2
 8002328:	d107      	bne.n	800233a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f002 0202 	and.w	r2, r2, #2
 8002338:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f002 fe1d 	bl	8004f7e <USB_ReadInterrupts>
 8002344:	4603      	mov	r3, r0
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b10      	cmp	r3, #16
 800234c:	d161      	bne.n	8002412 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 0210 	bic.w	r2, r2, #16
 800235c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f003 020f 	and.w	r2, r3, #15
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	3304      	adds	r3, #4
 800237c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	0c5b      	lsrs	r3, r3, #17
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	2b02      	cmp	r3, #2
 8002388:	d124      	bne.n	80023d4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002390:	4013      	ands	r3, r2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d035      	beq.n	8002402 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	6a38      	ldr	r0, [r7, #32]
 80023aa:	f002 fc83 	bl	8004cb4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ba:	441a      	add	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	699a      	ldr	r2, [r3, #24]
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023cc:	441a      	add	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	619a      	str	r2, [r3, #24]
 80023d2:	e016      	b.n	8002402 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	0c5b      	lsrs	r3, r3, #17
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	2b06      	cmp	r3, #6
 80023de:	d110      	bne.n	8002402 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023e6:	2208      	movs	r2, #8
 80023e8:	4619      	mov	r1, r3
 80023ea:	6a38      	ldr	r0, [r7, #32]
 80023ec:	f002 fc62 	bl	8004cb4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	699a      	ldr	r2, [r3, #24]
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023fc:	441a      	add	r2, r3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699a      	ldr	r2, [r3, #24]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0210 	orr.w	r2, r2, #16
 8002410:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f002 fdb1 	bl	8004f7e <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002422:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002426:	d16e      	bne.n	8002506 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f002 fdb7 	bl	8004fa4 <USB_ReadDevAllOutEpInterrupt>
 8002436:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002438:	e062      	b.n	8002500 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d057      	beq.n	80024f4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f002 fddc 	bl	800500c <USB_ReadDevOutEPInterrupt>
 8002454:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00c      	beq.n	800247a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246c:	461a      	mov	r2, r3
 800246e:	2301      	movs	r3, #1
 8002470:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fdb1 	bl	8002fdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00c      	beq.n	800249e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002490:	461a      	mov	r2, r3
 8002492:	2308      	movs	r3, #8
 8002494:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002496:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 feab 	bl	80031f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b4:	461a      	mov	r2, r3
 80024b6:	2310      	movs	r3, #16
 80024b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d0:	461a      	mov	r2, r3
 80024d2:	2320      	movs	r3, #32
 80024d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d009      	beq.n	80024f4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ec:	461a      	mov	r2, r3
 80024ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	3301      	adds	r3, #1
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	085b      	lsrs	r3, r3, #1
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002502:	2b00      	cmp	r3, #0
 8002504:	d199      	bne.n	800243a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f002 fd37 	bl	8004f7e <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002516:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800251a:	f040 80c0 	bne.w	800269e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f002 fd58 	bl	8004fd8 <USB_ReadDevAllInEpInterrupt>
 8002528:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800252e:	e0b2      	b.n	8002696 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80a7 	beq.w	800268a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f002 fd7e 	bl	8005048 <USB_ReadDevInEPInterrupt>
 800254c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d057      	beq.n	8002608 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	2201      	movs	r2, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	43db      	mvns	r3, r3
 8002572:	69f9      	ldr	r1, [r7, #28]
 8002574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002578:	4013      	ands	r3, r2
 800257a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	4413      	add	r3, r2
 8002584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002588:	461a      	mov	r2, r3
 800258a:	2301      	movs	r3, #1
 800258c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d132      	bne.n	80025fc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259a:	4613      	mov	r3, r2
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	3348      	adds	r3, #72	; 0x48
 80025a6:	6819      	ldr	r1, [r3, #0]
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4403      	add	r3, r0
 80025b6:	3344      	adds	r3, #68	; 0x44
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4419      	add	r1, r3
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4403      	add	r3, r0
 80025ca:	3348      	adds	r3, #72	; 0x48
 80025cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d113      	bne.n	80025fc <HAL_PCD_IRQHandler+0x31c>
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d8:	4613      	mov	r3, r2
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	3350      	adds	r3, #80	; 0x50
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d108      	bne.n	80025fc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025f4:	461a      	mov	r2, r3
 80025f6:	2101      	movs	r1, #1
 80025f8:	f002 fd86 	bl	8005108 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	4619      	mov	r1, r3
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f004 fd29 	bl	800705a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	4413      	add	r3, r2
 800261a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800261e:	461a      	mov	r2, r3
 8002620:	2308      	movs	r3, #8
 8002622:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800263a:	461a      	mov	r2, r3
 800263c:	2310      	movs	r3, #16
 800263e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002656:	461a      	mov	r2, r3
 8002658:	2340      	movs	r3, #64	; 0x40
 800265a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d008      	beq.n	8002678 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002672:	461a      	mov	r2, r3
 8002674:	2302      	movs	r3, #2
 8002676:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 fc1b 	bl	8002ec0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	3301      	adds	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	085b      	lsrs	r3, r3, #1
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	2b00      	cmp	r3, #0
 800269a:	f47f af49 	bne.w	8002530 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f002 fc6b 	bl	8004f7e <USB_ReadInterrupts>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026b2:	d122      	bne.n	80026fa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026da:	2100      	movs	r1, #0
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fe27 	bl	8003330 <HAL_PCDEx_LPM_Callback>
 80026e2:	e002      	b.n	80026ea <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f004 fd2f 	bl	8007148 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f002 fc3d 	bl	8004f7e <USB_ReadInterrupts>
 8002704:	4603      	mov	r3, r0
 8002706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800270a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800270e:	d112      	bne.n	8002736 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b01      	cmp	r3, #1
 800271e:	d102      	bne.n	8002726 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f004 fceb 	bl	80070fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695a      	ldr	r2, [r3, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002734:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f002 fc1f 	bl	8004f7e <USB_ReadInterrupts>
 8002740:	4603      	mov	r3, r0
 8002742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274a:	f040 80c7 	bne.w	80028dc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	69fa      	ldr	r2, [r7, #28]
 8002758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2110      	movs	r1, #16
 8002768:	4618      	mov	r0, r3
 800276a:	f001 fced 	bl	8004148 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276e:	2300      	movs	r3, #0
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002772:	e056      	b.n	8002822 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	4413      	add	r3, r2
 800277c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002780:	461a      	mov	r2, r3
 8002782:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002786:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	4413      	add	r3, r2
 8002790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002798:	0151      	lsls	r1, r2, #5
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	440a      	add	r2, r1
 800279e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027a6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b8:	0151      	lsls	r1, r2, #5
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	440a      	add	r2, r1
 80027be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d4:	461a      	mov	r2, r3
 80027d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ec:	0151      	lsls	r1, r2, #5
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	440a      	add	r2, r1
 80027f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	4413      	add	r3, r2
 8002804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800280c:	0151      	lsls	r1, r2, #5
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	440a      	add	r2, r1
 8002812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002816:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800281a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	3301      	adds	r3, #1
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002828:	429a      	cmp	r2, r3
 800282a:	d3a3      	bcc.n	8002774 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800283a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800283e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	2b00      	cmp	r3, #0
 8002846:	d016      	beq.n	8002876 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002858:	f043 030b 	orr.w	r3, r3, #11
 800285c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800286e:	f043 030b 	orr.w	r3, r3, #11
 8002872:	6453      	str	r3, [r2, #68]	; 0x44
 8002874:	e015      	b.n	80028a2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002884:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002888:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800288c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800289c:	f043 030b 	orr.w	r3, r3, #11
 80028a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028c6:	461a      	mov	r2, r3
 80028c8:	f002 fc1e 	bl	8005108 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 fb4c 	bl	8004f7e <USB_ReadInterrupts>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f0:	d124      	bne.n	800293c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f002 fbe2 	bl	80050c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f001 fc82 	bl	800420a <USB_GetDevSpeed>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681c      	ldr	r4, [r3, #0]
 8002912:	f001 f959 	bl	8003bc8 <HAL_RCC_GetHCLKFreq>
 8002916:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800291c:	b2db      	uxtb	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	4620      	mov	r0, r4
 8002922:	f001 f9bf 	bl	8003ca4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f004 fbbf 	bl	80070aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800293a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f002 fb1c 	bl	8004f7e <USB_ReadInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b08      	cmp	r3, #8
 800294e:	d10a      	bne.n	8002966 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f004 fb9c 	bl	800708e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695a      	ldr	r2, [r3, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f002 0208 	and.w	r2, r2, #8
 8002964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f002 fb07 	bl	8004f7e <USB_ReadInterrupts>
 8002970:	4603      	mov	r3, r0
 8002972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800297a:	d10f      	bne.n	800299c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4619      	mov	r1, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f004 fbfe 	bl	8007188 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800299a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f002 faec 	bl	8004f7e <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029b0:	d10f      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	4619      	mov	r1, r3
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f004 fbd1 	bl	8007164 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f002 fad1 	bl	8004f7e <USB_ReadInterrupts>
 80029dc:	4603      	mov	r3, r0
 80029de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e6:	d10a      	bne.n	80029fe <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f004 fbdf 	bl	80071ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 fabb 	bl	8004f7e <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d115      	bne.n	8002a3e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f004 fbcf 	bl	80071c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	e000      	b.n	8002a3e <HAL_PCD_IRQHandler+0x75e>
      return;
 8002a3c:	bf00      	nop
    }
  }
}
 8002a3e:	3734      	adds	r7, #52	; 0x34
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd90      	pop	{r4, r7, pc}

08002a44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_PCD_SetAddress+0x1a>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e013      	b.n	8002a86 <HAL_PCD_SetAddress+0x42>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f002 fa19 	bl	8004eae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	4608      	mov	r0, r1
 8002a98:	4611      	mov	r1, r2
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	70fb      	strb	r3, [r7, #3]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	803b      	strh	r3, [r7, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	da0f      	bge.n	8002ad4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	f003 020f 	and.w	r2, r3, #15
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	3338      	adds	r3, #56	; 0x38
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3304      	adds	r3, #4
 8002aca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	705a      	strb	r2, [r3, #1]
 8002ad2:	e00f      	b.n	8002af4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad4:	78fb      	ldrb	r3, [r7, #3]
 8002ad6:	f003 020f 	and.w	r2, r3, #15
 8002ada:	4613      	mov	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	3304      	adds	r3, #4
 8002aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b00:	883a      	ldrh	r2, [r7, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	78ba      	ldrb	r2, [r7, #2]
 8002b0a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	785b      	ldrb	r3, [r3, #1]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d004      	beq.n	8002b1e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b1e:	78bb      	ldrb	r3, [r7, #2]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d102      	bne.n	8002b2a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_PCD_EP_Open+0xaa>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e00e      	b.n	8002b56 <HAL_PCD_EP_Open+0xc8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68f9      	ldr	r1, [r7, #12]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 fb84 	bl	8004254 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b54:	7afb      	ldrb	r3, [r7, #11]
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	da0f      	bge.n	8002b92 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	f003 020f 	and.w	r2, r3, #15
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	3338      	adds	r3, #56	; 0x38
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	705a      	strb	r2, [r3, #1]
 8002b90:	e00f      	b.n	8002bb2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	f003 020f 	and.w	r2, r3, #15
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3304      	adds	r3, #4
 8002baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_PCD_EP_Close+0x6e>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e00e      	b.n	8002bea <HAL_PCD_EP_Close+0x8c>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68f9      	ldr	r1, [r7, #12]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f001 fbc2 	bl	8004364 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c02:	7afb      	ldrb	r3, [r7, #11]
 8002c04:	f003 020f 	and.w	r2, r3, #15
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	3304      	adds	r3, #4
 8002c1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2200      	movs	r2, #0
 8002c32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c34:	7afb      	ldrb	r3, [r7, #11]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d102      	bne.n	8002c4e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c4e:	7afb      	ldrb	r3, [r7, #11]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	6979      	ldr	r1, [r7, #20]
 8002c66:	f001 fe9d 	bl	80049a4 <USB_EP0StartXfer>
 8002c6a:	e008      	b.n	8002c7e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	461a      	mov	r2, r3
 8002c78:	6979      	ldr	r1, [r7, #20]
 8002c7a:	f001 fc4f 	bl	800451c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	f003 020f 	and.w	r2, r3, #15
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cc8:	7afb      	ldrb	r3, [r7, #11]
 8002cca:	f003 020f 	and.w	r2, r3, #15
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	3338      	adds	r3, #56	; 0x38
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	3304      	adds	r3, #4
 8002cde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf8:	7afb      	ldrb	r3, [r7, #11]
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d102      	bne.n	8002d12 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d12:	7afb      	ldrb	r3, [r7, #11]
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d109      	bne.n	8002d30 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	6979      	ldr	r1, [r7, #20]
 8002d2a:	f001 fe3b 	bl	80049a4 <USB_EP0StartXfer>
 8002d2e:	e008      	b.n	8002d42 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	6979      	ldr	r1, [r7, #20]
 8002d3e:	f001 fbed 	bl	800451c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	f003 020f 	and.w	r2, r3, #15
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d901      	bls.n	8002d6a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e050      	b.n	8002e0c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	da0f      	bge.n	8002d92 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	f003 020f 	and.w	r2, r3, #15
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	3338      	adds	r3, #56	; 0x38
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	3304      	adds	r3, #4
 8002d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	705a      	strb	r2, [r3, #1]
 8002d90:	e00d      	b.n	8002dae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4413      	add	r3, r2
 8002da4:	3304      	adds	r3, #4
 8002da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_PCD_EP_SetStall+0x82>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e01e      	b.n	8002e0c <HAL_PCD_EP_SetStall+0xc0>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68f9      	ldr	r1, [r7, #12]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 ff92 	bl	8004d06 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	b2d9      	uxtb	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f002 f983 	bl	8005108 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	f003 020f 	and.w	r2, r3, #15
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d901      	bls.n	8002e32 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e042      	b.n	8002eb8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	da0f      	bge.n	8002e5a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	f003 020f 	and.w	r2, r3, #15
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	3338      	adds	r3, #56	; 0x38
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3304      	adds	r3, #4
 8002e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	705a      	strb	r2, [r3, #1]
 8002e58:	e00f      	b.n	8002e7a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	f003 020f 	and.w	r2, r3, #15
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	4413      	add	r3, r2
 8002e70:	3304      	adds	r3, #4
 8002e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_PCD_EP_ClrStall+0x86>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e00e      	b.n	8002eb8 <HAL_PCD_EP_ClrStall+0xa4>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68f9      	ldr	r1, [r7, #12]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 ff9a 	bl	8004de2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	3338      	adds	r3, #56	; 0x38
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	699a      	ldr	r2, [r3, #24]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d901      	bls.n	8002ef8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e06c      	b.n	8002fd2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d902      	bls.n	8002f14 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	3303      	adds	r3, #3
 8002f18:	089b      	lsrs	r3, r3, #2
 8002f1a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f1c:	e02b      	b.n	8002f76 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d902      	bls.n	8002f3a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	3303      	adds	r3, #3
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68d9      	ldr	r1, [r3, #12]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	4603      	mov	r3, r0
 8002f58:	6978      	ldr	r0, [r7, #20]
 8002f5a:	f001 fe76 	bl	8004c4a <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	441a      	add	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	441a      	add	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d809      	bhi.n	8002fa0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	699a      	ldr	r2, [r3, #24]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d203      	bcs.n	8002fa0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1be      	bne.n	8002f1e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d811      	bhi.n	8002fd0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	6939      	ldr	r1, [r7, #16]
 8002fc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fcc:	4013      	ands	r3, r2
 8002fce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3720      	adds	r7, #32
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	333c      	adds	r3, #60	; 0x3c
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	2b01      	cmp	r3, #1
 8003010:	f040 80a0 	bne.w	8003154 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d015      	beq.n	800304a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4a72      	ldr	r2, [pc, #456]	; (80031ec <PCD_EP_OutXfrComplete_int+0x210>)
 8003022:	4293      	cmp	r3, r2
 8003024:	f240 80dd 	bls.w	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 80d7 	beq.w	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003040:	461a      	mov	r2, r3
 8003042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003046:	6093      	str	r3, [r2, #8]
 8003048:	e0cb      	b.n	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003060:	461a      	mov	r2, r3
 8003062:	2320      	movs	r3, #32
 8003064:	6093      	str	r3, [r2, #8]
 8003066:	e0bc      	b.n	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800306e:	2b00      	cmp	r3, #0
 8003070:	f040 80b7 	bne.w	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a5d      	ldr	r2, [pc, #372]	; (80031ec <PCD_EP_OutXfrComplete_int+0x210>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d90f      	bls.n	800309c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003092:	461a      	mov	r2, r3
 8003094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003098:	6093      	str	r3, [r2, #8]
 800309a:	e0a2      	b.n	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030ae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	0159      	lsls	r1, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	440b      	add	r3, r1
 80030b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80030c2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4403      	add	r3, r0
 80030d2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80030d6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4403      	add	r3, r0
 80030fa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4419      	add	r1, r3
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	4613      	mov	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4403      	add	r3, r0
 8003110:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003114:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d114      	bne.n	8003146 <PCD_EP_OutXfrComplete_int+0x16a>
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d108      	bne.n	8003146 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800313e:	461a      	mov	r2, r3
 8003140:	2101      	movs	r1, #1
 8003142:	f001 ffe1 	bl	8005108 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	4619      	mov	r1, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f003 ff69 	bl	8007024 <HAL_PCD_DataOutStageCallback>
 8003152:	e046      	b.n	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a26      	ldr	r2, [pc, #152]	; (80031f0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d124      	bne.n	80031a6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003172:	461a      	mov	r2, r3
 8003174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003178:	6093      	str	r3, [r2, #8]
 800317a:	e032      	b.n	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003192:	461a      	mov	r2, r3
 8003194:	2320      	movs	r3, #32
 8003196:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	4619      	mov	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f003 ff40 	bl	8007024 <HAL_PCD_DataOutStageCallback>
 80031a4:	e01d      	b.n	80031e2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d114      	bne.n	80031d6 <PCD_EP_OutXfrComplete_int+0x1fa>
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d108      	bne.n	80031d6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031ce:	461a      	mov	r2, r3
 80031d0:	2100      	movs	r1, #0
 80031d2:	f001 ff99 	bl	8005108 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	4619      	mov	r1, r3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f003 ff21 	bl	8007024 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	4f54300a 	.word	0x4f54300a
 80031f0:	4f54310a 	.word	0x4f54310a

080031f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	333c      	adds	r3, #60	; 0x3c
 800320c:	3304      	adds	r3, #4
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4413      	add	r3, r2
 800321a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4a15      	ldr	r2, [pc, #84]	; (800327c <PCD_EP_OutSetupPacket_int+0x88>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d90e      	bls.n	8003248 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003230:	2b00      	cmp	r3, #0
 8003232:	d009      	beq.n	8003248 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003240:	461a      	mov	r2, r3
 8003242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003246:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f003 fed9 	bl	8007000 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a0a      	ldr	r2, [pc, #40]	; (800327c <PCD_EP_OutSetupPacket_int+0x88>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d90c      	bls.n	8003270 <PCD_EP_OutSetupPacket_int+0x7c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d108      	bne.n	8003270 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003268:	461a      	mov	r2, r3
 800326a:	2101      	movs	r1, #1
 800326c:	f001 ff4c 	bl	8005108 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	4f54300a 	.word	0x4f54300a

08003280 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	460b      	mov	r3, r1
 800328a:	70fb      	strb	r3, [r7, #3]
 800328c:	4613      	mov	r3, r2
 800328e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d107      	bne.n	80032ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800329e:	883b      	ldrh	r3, [r7, #0]
 80032a0:	0419      	lsls	r1, r3, #16
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
 80032ac:	e028      	b.n	8003300 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	4413      	add	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032bc:	2300      	movs	r3, #0
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	e00d      	b.n	80032de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	3340      	adds	r3, #64	; 0x40
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	4413      	add	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	3301      	adds	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d3ec      	bcc.n	80032c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032e8:	883b      	ldrh	r3, [r7, #0]
 80032ea:	0418      	lsls	r0, r3, #16
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6819      	ldr	r1, [r3, #0]
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	4302      	orrs	r2, r0
 80032f8:	3340      	adds	r3, #64	; 0x40
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	460b      	mov	r3, r1
 8003318:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	887a      	ldrh	r2, [r7, #2]
 8003320:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e264      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d075      	beq.n	8003452 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003366:	4ba3      	ldr	r3, [pc, #652]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b04      	cmp	r3, #4
 8003370:	d00c      	beq.n	800338c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003372:	4ba0      	ldr	r3, [pc, #640]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800337a:	2b08      	cmp	r3, #8
 800337c:	d112      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337e:	4b9d      	ldr	r3, [pc, #628]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800338a:	d10b      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	4b99      	ldr	r3, [pc, #612]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d05b      	beq.n	8003450 <HAL_RCC_OscConfig+0x108>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d157      	bne.n	8003450 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e23f      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ac:	d106      	bne.n	80033bc <HAL_RCC_OscConfig+0x74>
 80033ae:	4b91      	ldr	r3, [pc, #580]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a90      	ldr	r2, [pc, #576]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	e01d      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x98>
 80033c6:	4b8b      	ldr	r3, [pc, #556]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a8a      	ldr	r2, [pc, #552]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b88      	ldr	r3, [pc, #544]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a87      	ldr	r2, [pc, #540]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e00b      	b.n	80033f8 <HAL_RCC_OscConfig+0xb0>
 80033e0:	4b84      	ldr	r3, [pc, #528]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a83      	ldr	r2, [pc, #524]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b81      	ldr	r3, [pc, #516]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a80      	ldr	r2, [pc, #512]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80033f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d013      	beq.n	8003428 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003400:	f7fd fbd2 	bl	8000ba8 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003408:	f7fd fbce 	bl	8000ba8 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b64      	cmp	r3, #100	; 0x64
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e204      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0xc0>
 8003426:	e014      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fd fbbe 	bl	8000ba8 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003430:	f7fd fbba 	bl	8000ba8 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b64      	cmp	r3, #100	; 0x64
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e1f0      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003442:	4b6c      	ldr	r3, [pc, #432]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0xe8>
 800344e:	e000      	b.n	8003452 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d063      	beq.n	8003526 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800345e:	4b65      	ldr	r3, [pc, #404]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00b      	beq.n	8003482 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346a:	4b62      	ldr	r3, [pc, #392]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003472:	2b08      	cmp	r3, #8
 8003474:	d11c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003476:	4b5f      	ldr	r3, [pc, #380]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d116      	bne.n	80034b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003482:	4b5c      	ldr	r3, [pc, #368]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_RCC_OscConfig+0x152>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d001      	beq.n	800349a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e1c4      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349a:	4b56      	ldr	r3, [pc, #344]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4952      	ldr	r1, [pc, #328]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	e03a      	b.n	8003526 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d020      	beq.n	80034fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b8:	4b4f      	ldr	r3, [pc, #316]	; (80035f8 <HAL_RCC_OscConfig+0x2b0>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034be:	f7fd fb73 	bl	8000ba8 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fd fb6f 	bl	8000ba8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e1a5      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d8:	4b46      	ldr	r3, [pc, #280]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e4:	4b43      	ldr	r3, [pc, #268]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4940      	ldr	r1, [pc, #256]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	600b      	str	r3, [r1, #0]
 80034f8:	e015      	b.n	8003526 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034fa:	4b3f      	ldr	r3, [pc, #252]	; (80035f8 <HAL_RCC_OscConfig+0x2b0>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fd fb52 	bl	8000ba8 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003508:	f7fd fb4e 	bl	8000ba8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e184      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	4b36      	ldr	r3, [pc, #216]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d030      	beq.n	8003594 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4b30      	ldr	r3, [pc, #192]	; (80035fc <HAL_RCC_OscConfig+0x2b4>)
 800353c:	2201      	movs	r2, #1
 800353e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fd fb32 	bl	8000ba8 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003548:	f7fd fb2e 	bl	8000ba8 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e164      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355a:	4b26      	ldr	r3, [pc, #152]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x200>
 8003566:	e015      	b.n	8003594 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003568:	4b24      	ldr	r3, [pc, #144]	; (80035fc <HAL_RCC_OscConfig+0x2b4>)
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356e:	f7fd fb1b 	bl	8000ba8 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003576:	f7fd fb17 	bl	8000ba8 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e14d      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 800358a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f0      	bne.n	8003576 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80a0 	beq.w	80036e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a2:	2300      	movs	r3, #0
 80035a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a6:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10f      	bne.n	80035d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6413      	str	r3, [r2, #64]	; 0x40
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ce:	2301      	movs	r3, #1
 80035d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d2:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_OscConfig+0x2b8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d121      	bne.n	8003622 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035de:	4b08      	ldr	r3, [pc, #32]	; (8003600 <HAL_RCC_OscConfig+0x2b8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a07      	ldr	r2, [pc, #28]	; (8003600 <HAL_RCC_OscConfig+0x2b8>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ea:	f7fd fadd 	bl	8000ba8 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f0:	e011      	b.n	8003616 <HAL_RCC_OscConfig+0x2ce>
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	42470000 	.word	0x42470000
 80035fc:	42470e80 	.word	0x42470e80
 8003600:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003604:	f7fd fad0 	bl	8000ba8 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e106      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003616:	4b85      	ldr	r3, [pc, #532]	; (800382c <HAL_RCC_OscConfig+0x4e4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d106      	bne.n	8003638 <HAL_RCC_OscConfig+0x2f0>
 800362a:	4b81      	ldr	r3, [pc, #516]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a80      	ldr	r2, [pc, #512]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
 8003636:	e01c      	b.n	8003672 <HAL_RCC_OscConfig+0x32a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b05      	cmp	r3, #5
 800363e:	d10c      	bne.n	800365a <HAL_RCC_OscConfig+0x312>
 8003640:	4b7b      	ldr	r3, [pc, #492]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	4a7a      	ldr	r2, [pc, #488]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003646:	f043 0304 	orr.w	r3, r3, #4
 800364a:	6713      	str	r3, [r2, #112]	; 0x70
 800364c:	4b78      	ldr	r3, [pc, #480]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	4a77      	ldr	r2, [pc, #476]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6713      	str	r3, [r2, #112]	; 0x70
 8003658:	e00b      	b.n	8003672 <HAL_RCC_OscConfig+0x32a>
 800365a:	4b75      	ldr	r3, [pc, #468]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	4a74      	ldr	r2, [pc, #464]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003660:	f023 0301 	bic.w	r3, r3, #1
 8003664:	6713      	str	r3, [r2, #112]	; 0x70
 8003666:	4b72      	ldr	r3, [pc, #456]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366a:	4a71      	ldr	r2, [pc, #452]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 800366c:	f023 0304 	bic.w	r3, r3, #4
 8003670:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d015      	beq.n	80036a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367a:	f7fd fa95 	bl	8000ba8 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003680:	e00a      	b.n	8003698 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003682:	f7fd fa91 	bl	8000ba8 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003690:	4293      	cmp	r3, r2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e0c5      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	4b65      	ldr	r3, [pc, #404]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0ee      	beq.n	8003682 <HAL_RCC_OscConfig+0x33a>
 80036a4:	e014      	b.n	80036d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a6:	f7fd fa7f 	bl	8000ba8 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fd fa7b 	bl	8000ba8 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0af      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c4:	4b5a      	ldr	r3, [pc, #360]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ee      	bne.n	80036ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d105      	bne.n	80036e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d6:	4b56      	ldr	r3, [pc, #344]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	4a55      	ldr	r2, [pc, #340]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 80036dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 809b 	beq.w	8003822 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036ec:	4b50      	ldr	r3, [pc, #320]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d05c      	beq.n	80037b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d141      	bne.n	8003784 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003700:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <HAL_RCC_OscConfig+0x4ec>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003706:	f7fd fa4f 	bl	8000ba8 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370c:	e008      	b.n	8003720 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370e:	f7fd fa4b 	bl	8000ba8 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e081      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003720:	4b43      	ldr	r3, [pc, #268]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f0      	bne.n	800370e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	019b      	lsls	r3, r3, #6
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003742:	085b      	lsrs	r3, r3, #1
 8003744:	3b01      	subs	r3, #1
 8003746:	041b      	lsls	r3, r3, #16
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	061b      	lsls	r3, r3, #24
 8003750:	4937      	ldr	r1, [pc, #220]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003752:	4313      	orrs	r3, r2
 8003754:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003756:	4b37      	ldr	r3, [pc, #220]	; (8003834 <HAL_RCC_OscConfig+0x4ec>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fd fa24 	bl	8000ba8 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003764:	f7fd fa20 	bl	8000ba8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e056      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003776:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x41c>
 8003782:	e04e      	b.n	8003822 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003784:	4b2b      	ldr	r3, [pc, #172]	; (8003834 <HAL_RCC_OscConfig+0x4ec>)
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378a:	f7fd fa0d 	bl	8000ba8 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003792:	f7fd fa09 	bl	8000ba8 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e03f      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a4:	4b22      	ldr	r3, [pc, #136]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f0      	bne.n	8003792 <HAL_RCC_OscConfig+0x44a>
 80037b0:	e037      	b.n	8003822 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e032      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037be:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <HAL_RCC_OscConfig+0x4e8>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d028      	beq.n	800381e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d121      	bne.n	800381e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d11a      	bne.n	800381e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037ee:	4013      	ands	r3, r2
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d111      	bne.n	800381e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	085b      	lsrs	r3, r3, #1
 8003806:	3b01      	subs	r3, #1
 8003808:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d107      	bne.n	800381e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d001      	beq.n	8003822 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40007000 	.word	0x40007000
 8003830:	40023800 	.word	0x40023800
 8003834:	42470060 	.word	0x42470060

08003838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0cc      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b68      	ldr	r3, [pc, #416]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d90c      	bls.n	8003874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b65      	ldr	r3, [pc, #404]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003862:	4b63      	ldr	r3, [pc, #396]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	d001      	beq.n	8003874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0b8      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d020      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800388c:	4b59      	ldr	r3, [pc, #356]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a58      	ldr	r2, [pc, #352]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003896:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a4:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	4a52      	ldr	r2, [pc, #328]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b0:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	494d      	ldr	r1, [pc, #308]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d044      	beq.n	8003958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d6:	4b47      	ldr	r3, [pc, #284]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d119      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e07f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d107      	bne.n	8003906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f6:	4b3f      	ldr	r3, [pc, #252]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e06f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003906:	4b3b      	ldr	r3, [pc, #236]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e067      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003916:	4b37      	ldr	r3, [pc, #220]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f023 0203 	bic.w	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4934      	ldr	r1, [pc, #208]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	4313      	orrs	r3, r2
 8003926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003928:	f7fd f93e 	bl	8000ba8 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392e:	e00a      	b.n	8003946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003930:	f7fd f93a 	bl	8000ba8 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e04f      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003946:	4b2b      	ldr	r3, [pc, #172]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 020c 	and.w	r2, r3, #12
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	429a      	cmp	r2, r3
 8003956:	d1eb      	bne.n	8003930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003958:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d20c      	bcs.n	8003980 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e032      	b.n	80039e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4916      	ldr	r1, [pc, #88]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	490e      	ldr	r1, [pc, #56]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039be:	f000 f821 	bl	8003a04 <HAL_RCC_GetSysClockFreq>
 80039c2:	4602      	mov	r2, r0
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	490a      	ldr	r1, [pc, #40]	; (80039f8 <HAL_RCC_ClockConfig+0x1c0>)
 80039d0:	5ccb      	ldrb	r3, [r1, r3]
 80039d2:	fa22 f303 	lsr.w	r3, r2, r3
 80039d6:	4a09      	ldr	r2, [pc, #36]	; (80039fc <HAL_RCC_ClockConfig+0x1c4>)
 80039d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039da:	4b09      	ldr	r3, [pc, #36]	; (8003a00 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd f89e 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023c00 	.word	0x40023c00
 80039f4:	40023800 	.word	0x40023800
 80039f8:	08007ea8 	.word	0x08007ea8
 80039fc:	20000000 	.word	0x20000000
 8003a00:	20000004 	.word	0x20000004

08003a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	2300      	movs	r3, #0
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	2300      	movs	r3, #0
 8003a16:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a1c:	4b67      	ldr	r3, [pc, #412]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d00d      	beq.n	8003a44 <HAL_RCC_GetSysClockFreq+0x40>
 8003a28:	2b08      	cmp	r3, #8
 8003a2a:	f200 80bd 	bhi.w	8003ba8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x34>
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a36:	e0b7      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a38:	4b61      	ldr	r3, [pc, #388]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a3a:	60bb      	str	r3, [r7, #8]
       break;
 8003a3c:	e0b7      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a3e:	4b61      	ldr	r3, [pc, #388]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a40:	60bb      	str	r3, [r7, #8]
      break;
 8003a42:	e0b4      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a44:	4b5d      	ldr	r3, [pc, #372]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a4e:	4b5b      	ldr	r3, [pc, #364]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d04d      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5a:	4b58      	ldr	r3, [pc, #352]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	461a      	mov	r2, r3
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a6a:	f04f 0100 	mov.w	r1, #0
 8003a6e:	ea02 0800 	and.w	r8, r2, r0
 8003a72:	ea03 0901 	and.w	r9, r3, r1
 8003a76:	4640      	mov	r0, r8
 8003a78:	4649      	mov	r1, r9
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	014b      	lsls	r3, r1, #5
 8003a84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a88:	0142      	lsls	r2, r0, #5
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	ebb0 0008 	subs.w	r0, r0, r8
 8003a92:	eb61 0109 	sbc.w	r1, r1, r9
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	018b      	lsls	r3, r1, #6
 8003aa0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003aa4:	0182      	lsls	r2, r0, #6
 8003aa6:	1a12      	subs	r2, r2, r0
 8003aa8:	eb63 0301 	sbc.w	r3, r3, r1
 8003aac:	f04f 0000 	mov.w	r0, #0
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	00d9      	lsls	r1, r3, #3
 8003ab6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aba:	00d0      	lsls	r0, r2, #3
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	eb12 0208 	adds.w	r2, r2, r8
 8003ac4:	eb43 0309 	adc.w	r3, r3, r9
 8003ac8:	f04f 0000 	mov.w	r0, #0
 8003acc:	f04f 0100 	mov.w	r1, #0
 8003ad0:	0259      	lsls	r1, r3, #9
 8003ad2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003ad6:	0250      	lsls	r0, r2, #9
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4610      	mov	r0, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	f7fc fbca 	bl	8000280 <__aeabi_uldivmod>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4613      	mov	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	e04a      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af6:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	461a      	mov	r2, r3
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	ea02 0400 	and.w	r4, r2, r0
 8003b0e:	ea03 0501 	and.w	r5, r3, r1
 8003b12:	4620      	mov	r0, r4
 8003b14:	4629      	mov	r1, r5
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	014b      	lsls	r3, r1, #5
 8003b20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b24:	0142      	lsls	r2, r0, #5
 8003b26:	4610      	mov	r0, r2
 8003b28:	4619      	mov	r1, r3
 8003b2a:	1b00      	subs	r0, r0, r4
 8003b2c:	eb61 0105 	sbc.w	r1, r1, r5
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	018b      	lsls	r3, r1, #6
 8003b3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b3e:	0182      	lsls	r2, r0, #6
 8003b40:	1a12      	subs	r2, r2, r0
 8003b42:	eb63 0301 	sbc.w	r3, r3, r1
 8003b46:	f04f 0000 	mov.w	r0, #0
 8003b4a:	f04f 0100 	mov.w	r1, #0
 8003b4e:	00d9      	lsls	r1, r3, #3
 8003b50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b54:	00d0      	lsls	r0, r2, #3
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	1912      	adds	r2, r2, r4
 8003b5c:	eb45 0303 	adc.w	r3, r5, r3
 8003b60:	f04f 0000 	mov.w	r0, #0
 8003b64:	f04f 0100 	mov.w	r1, #0
 8003b68:	0299      	lsls	r1, r3, #10
 8003b6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b6e:	0290      	lsls	r0, r2, #10
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4610      	mov	r0, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	f7fc fb7e 	bl	8000280 <__aeabi_uldivmod>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4613      	mov	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b8c:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	3301      	adds	r3, #1
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	60bb      	str	r3, [r7, #8]
      break;
 8003ba6:	e002      	b.n	8003bae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003baa:	60bb      	str	r3, [r7, #8]
      break;
 8003bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bae:	68bb      	ldr	r3, [r7, #8]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bba:	bf00      	nop
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	00f42400 	.word	0x00f42400
 8003bc4:	007a1200 	.word	0x007a1200

08003bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bcc:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003bce:	681b      	ldr	r3, [r3, #0]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	20000000 	.word	0x20000000

08003be0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003be0:	b084      	sub	sp, #16
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	f107 001c 	add.w	r0, r7, #28
 8003bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d122      	bne.n	8003c3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d105      	bne.n	8003c32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f001 fac6 	bl	80051c4 <USB_CoreReset>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	73fb      	strb	r3, [r7, #15]
 8003c3c:	e01a      	b.n	8003c74 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f001 faba 	bl	80051c4 <USB_CoreReset>
 8003c50:	4603      	mov	r3, r0
 8003c52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38
 8003c66:	e005      	b.n	8003c74 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d10b      	bne.n	8003c92 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f043 0206 	orr.w	r2, r3, #6
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f043 0220 	orr.w	r2, r3, #32
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c9e:	b004      	add	sp, #16
 8003ca0:	4770      	bx	lr
	...

08003ca4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d165      	bne.n	8003d84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4a41      	ldr	r2, [pc, #260]	; (8003dc0 <USB_SetTurnaroundTime+0x11c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d906      	bls.n	8003cce <USB_SetTurnaroundTime+0x2a>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4a40      	ldr	r2, [pc, #256]	; (8003dc4 <USB_SetTurnaroundTime+0x120>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d202      	bcs.n	8003cce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003cc8:	230f      	movs	r3, #15
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	e062      	b.n	8003d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	4a3c      	ldr	r2, [pc, #240]	; (8003dc4 <USB_SetTurnaroundTime+0x120>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d306      	bcc.n	8003ce4 <USB_SetTurnaroundTime+0x40>
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	4a3b      	ldr	r2, [pc, #236]	; (8003dc8 <USB_SetTurnaroundTime+0x124>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d202      	bcs.n	8003ce4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003cde:	230e      	movs	r3, #14
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	e057      	b.n	8003d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	4a38      	ldr	r2, [pc, #224]	; (8003dc8 <USB_SetTurnaroundTime+0x124>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d306      	bcc.n	8003cfa <USB_SetTurnaroundTime+0x56>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4a37      	ldr	r2, [pc, #220]	; (8003dcc <USB_SetTurnaroundTime+0x128>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d202      	bcs.n	8003cfa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003cf4:	230d      	movs	r3, #13
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e04c      	b.n	8003d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4a33      	ldr	r2, [pc, #204]	; (8003dcc <USB_SetTurnaroundTime+0x128>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d306      	bcc.n	8003d10 <USB_SetTurnaroundTime+0x6c>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4a32      	ldr	r2, [pc, #200]	; (8003dd0 <USB_SetTurnaroundTime+0x12c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d802      	bhi.n	8003d10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d0a:	230c      	movs	r3, #12
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e041      	b.n	8003d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4a2f      	ldr	r2, [pc, #188]	; (8003dd0 <USB_SetTurnaroundTime+0x12c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d906      	bls.n	8003d26 <USB_SetTurnaroundTime+0x82>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	4a2e      	ldr	r2, [pc, #184]	; (8003dd4 <USB_SetTurnaroundTime+0x130>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d802      	bhi.n	8003d26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d20:	230b      	movs	r3, #11
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	e036      	b.n	8003d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4a2a      	ldr	r2, [pc, #168]	; (8003dd4 <USB_SetTurnaroundTime+0x130>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d906      	bls.n	8003d3c <USB_SetTurnaroundTime+0x98>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	4a29      	ldr	r2, [pc, #164]	; (8003dd8 <USB_SetTurnaroundTime+0x134>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d802      	bhi.n	8003d3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d36:	230a      	movs	r3, #10
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	e02b      	b.n	8003d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4a26      	ldr	r2, [pc, #152]	; (8003dd8 <USB_SetTurnaroundTime+0x134>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d906      	bls.n	8003d52 <USB_SetTurnaroundTime+0xae>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4a25      	ldr	r2, [pc, #148]	; (8003ddc <USB_SetTurnaroundTime+0x138>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d202      	bcs.n	8003d52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d4c:	2309      	movs	r3, #9
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	e020      	b.n	8003d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4a21      	ldr	r2, [pc, #132]	; (8003ddc <USB_SetTurnaroundTime+0x138>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d306      	bcc.n	8003d68 <USB_SetTurnaroundTime+0xc4>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	4a20      	ldr	r2, [pc, #128]	; (8003de0 <USB_SetTurnaroundTime+0x13c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d802      	bhi.n	8003d68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d62:	2308      	movs	r3, #8
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e015      	b.n	8003d94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4a1d      	ldr	r2, [pc, #116]	; (8003de0 <USB_SetTurnaroundTime+0x13c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d906      	bls.n	8003d7e <USB_SetTurnaroundTime+0xda>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4a1c      	ldr	r2, [pc, #112]	; (8003de4 <USB_SetTurnaroundTime+0x140>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d202      	bcs.n	8003d7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d78:	2307      	movs	r3, #7
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e00a      	b.n	8003d94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d7e:	2306      	movs	r3, #6
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e007      	b.n	8003d94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d8a:	2309      	movs	r3, #9
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	e001      	b.n	8003d94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d90:	2309      	movs	r3, #9
 8003d92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	029b      	lsls	r3, r3, #10
 8003da8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003dac:	431a      	orrs	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	00d8acbf 	.word	0x00d8acbf
 8003dc4:	00e4e1c0 	.word	0x00e4e1c0
 8003dc8:	00f42400 	.word	0x00f42400
 8003dcc:	01067380 	.word	0x01067380
 8003dd0:	011a499f 	.word	0x011a499f
 8003dd4:	01312cff 	.word	0x01312cff
 8003dd8:	014ca43f 	.word	0x014ca43f
 8003ddc:	016e3600 	.word	0x016e3600
 8003de0:	01a6ab1f 	.word	0x01a6ab1f
 8003de4:	01e84800 	.word	0x01e84800

08003de8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f023 0201 	bic.w	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d106      	bne.n	8003e58 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	e00b      	b.n	8003e70 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60da      	str	r2, [r3, #12]
 8003e6a:	e001      	b.n	8003e70 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e003      	b.n	8003e78 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003e70:	2032      	movs	r0, #50	; 0x32
 8003e72:	f7fc fea5 	bl	8000bc0 <HAL_Delay>

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e80:	b084      	sub	sp, #16
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b086      	sub	sp, #24
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	e009      	b.n	8003eb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	3340      	adds	r3, #64	; 0x40
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	2200      	movs	r2, #0
 8003eac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	2b0e      	cmp	r3, #14
 8003eb8:	d9f2      	bls.n	8003ea0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d11c      	bne.n	8003efa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ece:	f043 0302 	orr.w	r3, r3, #2
 8003ed2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38
 8003ef8:	e00b      	b.n	8003f12 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f24:	4619      	mov	r1, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	680b      	ldr	r3, [r1, #0]
 8003f30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d10c      	bne.n	8003f52 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d104      	bne.n	8003f48 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f3e:	2100      	movs	r1, #0
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f949 	bl	80041d8 <USB_SetDevSpeed>
 8003f46:	e008      	b.n	8003f5a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f48:	2101      	movs	r1, #1
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 f944 	bl	80041d8 <USB_SetDevSpeed>
 8003f50:	e003      	b.n	8003f5a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f52:	2103      	movs	r1, #3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f93f 	bl	80041d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f5a:	2110      	movs	r1, #16
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f8f3 	bl	8004148 <USB_FlushTxFifo>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f911 	bl	8004194 <USB_FlushRxFifo>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f82:	461a      	mov	r2, r3
 8003f84:	2300      	movs	r3, #0
 8003f86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8e:	461a      	mov	r2, r3
 8003f90:	2300      	movs	r3, #0
 8003f92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	e043      	b.n	800402e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fbc:	d118      	bne.n	8003ff0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	e013      	b.n	8004002 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	e008      	b.n	8004002 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2300      	movs	r3, #0
 8004000:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400e:	461a      	mov	r2, r3
 8004010:	2300      	movs	r3, #0
 8004012:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004020:	461a      	mov	r2, r3
 8004022:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004026:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	3301      	adds	r3, #1
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	429a      	cmp	r2, r3
 8004034:	d3b7      	bcc.n	8003fa6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004036:	2300      	movs	r3, #0
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	e043      	b.n	80040c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800404e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004052:	d118      	bne.n	8004086 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004066:	461a      	mov	r2, r3
 8004068:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e013      	b.n	8004098 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407c:	461a      	mov	r2, r3
 800407e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	e008      	b.n	8004098 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	015a      	lsls	r2, r3, #5
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4413      	add	r3, r2
 800408e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004092:	461a      	mov	r2, r3
 8004094:	2300      	movs	r3, #0
 8004096:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a4:	461a      	mov	r2, r3
 80040a6:	2300      	movs	r3, #0
 80040a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	461a      	mov	r2, r3
 80040b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	3301      	adds	r3, #1
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d3b7      	bcc.n	800403c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80040ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d105      	bne.n	8004100 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f043 0210 	orr.w	r2, r3, #16
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699a      	ldr	r2, [r3, #24]
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <USB_DevInit+0x2c4>)
 8004106:	4313      	orrs	r3, r2
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800410c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f043 0208 	orr.w	r2, r3, #8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800411e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d107      	bne.n	8004134 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800412c:	f043 0304 	orr.w	r3, r3, #4
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004134:	7dfb      	ldrb	r3, [r7, #23]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004140:	b004      	add	sp, #16
 8004142:	4770      	bx	lr
 8004144:	803c3800 	.word	0x803c3800

08004148 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	019b      	lsls	r3, r3, #6
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3301      	adds	r3, #1
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4a09      	ldr	r2, [pc, #36]	; (8004190 <USB_FlushTxFifo+0x48>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d901      	bls.n	8004174 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e006      	b.n	8004182 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b20      	cmp	r3, #32
 800417e:	d0f0      	beq.n	8004162 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	00030d40 	.word	0x00030d40

08004194 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2210      	movs	r2, #16
 80041a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	3301      	adds	r3, #1
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <USB_FlushRxFifo+0x40>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d901      	bls.n	80041b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e006      	b.n	80041c6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d0f0      	beq.n	80041a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	00030d40 	.word	0x00030d40

080041d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	68f9      	ldr	r1, [r7, #12]
 80041f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041f8:	4313      	orrs	r3, r2
 80041fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800420a:	b480      	push	{r7}
 800420c:	b087      	sub	sp, #28
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 0306 	and.w	r3, r3, #6
 8004222:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d102      	bne.n	8004230 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800422a:	2300      	movs	r3, #0
 800422c:	75fb      	strb	r3, [r7, #23]
 800422e:	e00a      	b.n	8004246 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b02      	cmp	r3, #2
 8004234:	d002      	beq.n	800423c <USB_GetDevSpeed+0x32>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b06      	cmp	r3, #6
 800423a:	d102      	bne.n	8004242 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800423c:	2302      	movs	r3, #2
 800423e:	75fb      	strb	r3, [r7, #23]
 8004240:	e001      	b.n	8004246 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004242:	230f      	movs	r3, #15
 8004244:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004246:	7dfb      	ldrb	r3, [r7, #23]
}
 8004248:	4618      	mov	r0, r3
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d13a      	bne.n	80042e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	f003 030f 	and.w	r3, r3, #15
 8004280:	2101      	movs	r1, #1
 8004282:	fa01 f303 	lsl.w	r3, r1, r3
 8004286:	b29b      	uxth	r3, r3
 8004288:	68f9      	ldr	r1, [r7, #12]
 800428a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800428e:	4313      	orrs	r3, r2
 8004290:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d155      	bne.n	8004354 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	78db      	ldrb	r3, [r3, #3]
 80042c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	059b      	lsls	r3, r3, #22
 80042ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042cc:	4313      	orrs	r3, r2
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	0151      	lsls	r1, r2, #5
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	440a      	add	r2, r1
 80042d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	e036      	b.n	8004354 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ec:	69da      	ldr	r2, [r3, #28]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	2101      	movs	r1, #1
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	68f9      	ldr	r1, [r7, #12]
 8004300:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004304:	4313      	orrs	r3, r2
 8004306:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d11a      	bne.n	8004354 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	78db      	ldrb	r3, [r3, #3]
 8004338:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800433a:	430b      	orrs	r3, r1
 800433c:	4313      	orrs	r3, r2
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	440a      	add	r2, r1
 8004346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800434a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004352:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	785b      	ldrb	r3, [r3, #1]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d161      	bne.n	8004444 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004396:	d11f      	bne.n	80043d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	0151      	lsls	r1, r2, #5
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	440a      	add	r2, r1
 80043ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	f003 030f 	and.w	r3, r3, #15
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043f8:	4013      	ands	r3, r2
 80043fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004402:	69da      	ldr	r2, [r3, #28]
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	2101      	movs	r1, #1
 800440e:	fa01 f303 	lsl.w	r3, r1, r3
 8004412:	b29b      	uxth	r3, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	68f9      	ldr	r1, [r7, #12]
 8004418:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800441c:	4013      	ands	r3, r2
 800441e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	0159      	lsls	r1, r3, #5
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	440b      	add	r3, r1
 8004436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443a:	4619      	mov	r1, r3
 800443c:	4b35      	ldr	r3, [pc, #212]	; (8004514 <USB_DeactivateEndpoint+0x1b0>)
 800443e:	4013      	ands	r3, r2
 8004440:	600b      	str	r3, [r1, #0]
 8004442:	e060      	b.n	8004506 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800445a:	d11f      	bne.n	800449c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	0151      	lsls	r1, r2, #5
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	440a      	add	r2, r1
 8004472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004476:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800447a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	0151      	lsls	r1, r2, #5
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	440a      	add	r2, r1
 8004492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004496:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800449a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	2101      	movs	r1, #1
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	041b      	lsls	r3, r3, #16
 80044b4:	43db      	mvns	r3, r3
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044bc:	4013      	ands	r3, r2
 80044be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c6:	69da      	ldr	r2, [r3, #28]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	f003 030f 	and.w	r3, r3, #15
 80044d0:	2101      	movs	r1, #1
 80044d2:	fa01 f303 	lsl.w	r3, r1, r3
 80044d6:	041b      	lsls	r3, r3, #16
 80044d8:	43db      	mvns	r3, r3
 80044da:	68f9      	ldr	r1, [r7, #12]
 80044dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e0:	4013      	ands	r3, r2
 80044e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	0159      	lsls	r1, r3, #5
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	440b      	add	r3, r1
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	4619      	mov	r1, r3
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <USB_DeactivateEndpoint+0x1b4>)
 8004502:	4013      	ands	r3, r2
 8004504:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	ec337800 	.word	0xec337800
 8004518:	eff37800 	.word	0xeff37800

0800451c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	; 0x28
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	4613      	mov	r3, r2
 8004528:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	785b      	ldrb	r3, [r3, #1]
 8004538:	2b01      	cmp	r3, #1
 800453a:	f040 815c 	bne.w	80047f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d132      	bne.n	80045ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	440a      	add	r2, r1
 800455c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004560:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004564:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004568:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	0151      	lsls	r1, r2, #5
 800457c:	69fa      	ldr	r2, [r7, #28]
 800457e:	440a      	add	r2, r1
 8004580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004588:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	0151      	lsls	r1, r2, #5
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	440a      	add	r2, r1
 80045a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a4:	0cdb      	lsrs	r3, r3, #19
 80045a6:	04db      	lsls	r3, r3, #19
 80045a8:	6113      	str	r3, [r2, #16]
 80045aa:	e074      	b.n	8004696 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	0151      	lsls	r1, r2, #5
 80045be:	69fa      	ldr	r2, [r7, #28]
 80045c0:	440a      	add	r2, r1
 80045c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c6:	0cdb      	lsrs	r3, r3, #19
 80045c8:	04db      	lsls	r3, r3, #19
 80045ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	0151      	lsls	r1, r2, #5
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	440a      	add	r2, r1
 80045e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	6959      	ldr	r1, [r3, #20]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	440b      	add	r3, r1
 8004608:	1e59      	subs	r1, r3, #1
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004612:	04d9      	lsls	r1, r3, #19
 8004614:	4b9d      	ldr	r3, [pc, #628]	; (800488c <USB_EPStartXfer+0x370>)
 8004616:	400b      	ands	r3, r1
 8004618:	69b9      	ldr	r1, [r7, #24]
 800461a:	0148      	lsls	r0, r1, #5
 800461c:	69f9      	ldr	r1, [r7, #28]
 800461e:	4401      	add	r1, r0
 8004620:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004624:	4313      	orrs	r3, r2
 8004626:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	4413      	add	r3, r2
 8004630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800463e:	69b9      	ldr	r1, [r7, #24]
 8004640:	0148      	lsls	r0, r1, #5
 8004642:	69f9      	ldr	r1, [r7, #28]
 8004644:	4401      	add	r1, r0
 8004646:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800464a:	4313      	orrs	r3, r2
 800464c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	78db      	ldrb	r3, [r3, #3]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d11f      	bne.n	8004696 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	4413      	add	r3, r2
 800465e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	0151      	lsls	r1, r2, #5
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	440a      	add	r2, r1
 800466c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004670:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004674:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	0151      	lsls	r1, r2, #5
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	440a      	add	r2, r1
 800468c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004690:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004694:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d14b      	bne.n	8004734 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d009      	beq.n	80046b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b0:	461a      	mov	r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	78db      	ldrb	r3, [r3, #3]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d128      	bne.n	8004712 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d110      	bne.n	80046f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	69fa      	ldr	r2, [r7, #28]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	e00f      	b.n	8004712 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	440a      	add	r2, r1
 8004708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800470c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004710:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	0151      	lsls	r1, r2, #5
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	440a      	add	r2, r1
 8004728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	e12f      	b.n	8004994 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	440a      	add	r2, r1
 800474a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004752:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	78db      	ldrb	r3, [r3, #3]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d015      	beq.n	8004788 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 8117 	beq.w	8004994 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	2101      	movs	r1, #1
 8004778:	fa01 f303 	lsl.w	r3, r1, r3
 800477c:	69f9      	ldr	r1, [r7, #28]
 800477e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004782:	4313      	orrs	r3, r2
 8004784:	634b      	str	r3, [r1, #52]	; 0x34
 8004786:	e105      	b.n	8004994 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d110      	bne.n	80047ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	0151      	lsls	r1, r2, #5
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	440a      	add	r2, r1
 80047ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	e00f      	b.n	80047da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	0151      	lsls	r1, r2, #5
 80047cc:	69fa      	ldr	r2, [r7, #28]
 80047ce:	440a      	add	r2, r1
 80047d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	68d9      	ldr	r1, [r3, #12]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	781a      	ldrb	r2, [r3, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	b298      	uxth	r0, r3
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	4603      	mov	r3, r0
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 fa2b 	bl	8004c4a <USB_WritePacket>
 80047f4:	e0ce      	b.n	8004994 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	440a      	add	r2, r1
 800480c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004810:	0cdb      	lsrs	r3, r3, #19
 8004812:	04db      	lsls	r3, r3, #19
 8004814:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	0151      	lsls	r1, r2, #5
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	440a      	add	r2, r1
 800482c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004830:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004834:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004838:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d126      	bne.n	8004890 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484e:	691a      	ldr	r2, [r3, #16]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004858:	69b9      	ldr	r1, [r7, #24]
 800485a:	0148      	lsls	r0, r1, #5
 800485c:	69f9      	ldr	r1, [r7, #28]
 800485e:	4401      	add	r1, r0
 8004860:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004864:	4313      	orrs	r3, r2
 8004866:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	0151      	lsls	r1, r2, #5
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	440a      	add	r2, r1
 800487e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004882:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004886:	6113      	str	r3, [r2, #16]
 8004888:	e036      	b.n	80048f8 <USB_EPStartXfer+0x3dc>
 800488a:	bf00      	nop
 800488c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4413      	add	r3, r2
 800489a:	1e5a      	subs	r2, r3, #1
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	8afb      	ldrh	r3, [r7, #22]
 80048b6:	04d9      	lsls	r1, r3, #19
 80048b8:	4b39      	ldr	r3, [pc, #228]	; (80049a0 <USB_EPStartXfer+0x484>)
 80048ba:	400b      	ands	r3, r1
 80048bc:	69b9      	ldr	r1, [r7, #24]
 80048be:	0148      	lsls	r0, r1, #5
 80048c0:	69f9      	ldr	r1, [r7, #28]
 80048c2:	4401      	add	r1, r0
 80048c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048c8:	4313      	orrs	r3, r2
 80048ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d8:	691a      	ldr	r2, [r3, #16]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	8af9      	ldrh	r1, [r7, #22]
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e8:	69b9      	ldr	r1, [r7, #24]
 80048ea:	0148      	lsls	r0, r1, #5
 80048ec:	69f9      	ldr	r1, [r7, #28]
 80048ee:	4401      	add	r1, r0
 80048f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048f4:	4313      	orrs	r3, r2
 80048f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d10d      	bne.n	800491a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	68d9      	ldr	r1, [r3, #12]
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	460a      	mov	r2, r1
 8004918:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	78db      	ldrb	r3, [r3, #3]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d128      	bne.n	8004974 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d110      	bne.n	8004954 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	0151      	lsls	r1, r2, #5
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	440a      	add	r2, r1
 8004948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800494c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e00f      	b.n	8004974 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800496e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004972:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800498e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004992:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3720      	adds	r7, #32
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	1ff80000 	.word	0x1ff80000

080049a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	4613      	mov	r3, r2
 80049b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	785b      	ldrb	r3, [r3, #1]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	f040 80cd 	bne.w	8004b60 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d132      	bne.n	8004a34 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	0151      	lsls	r1, r2, #5
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	440a      	add	r2, r1
 80049e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	0151      	lsls	r1, r2, #5
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	440a      	add	r2, r1
 8004a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	015a      	lsls	r2, r3, #5
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	4413      	add	r3, r2
 8004a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a2c:	0cdb      	lsrs	r3, r3, #19
 8004a2e:	04db      	lsls	r3, r3, #19
 8004a30:	6113      	str	r3, [r2, #16]
 8004a32:	e04e      	b.n	8004ad2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4e:	0cdb      	lsrs	r3, r3, #19
 8004a50:	04db      	lsls	r3, r3, #19
 8004a52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a76:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	695a      	ldr	r2, [r3, #20]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d903      	bls.n	8004a8c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	0151      	lsls	r1, r2, #5
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	440a      	add	r2, r1
 8004aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab8:	691a      	ldr	r2, [r3, #16]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac2:	6939      	ldr	r1, [r7, #16]
 8004ac4:	0148      	lsls	r0, r1, #5
 8004ac6:	6979      	ldr	r1, [r7, #20]
 8004ac8:	4401      	add	r1, r0
 8004aca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d11e      	bne.n	8004b16 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d009      	beq.n	8004af4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aec:	461a      	mov	r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	0151      	lsls	r1, r2, #5
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	440a      	add	r2, r1
 8004b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b12:	6013      	str	r3, [r2, #0]
 8004b14:	e092      	b.n	8004c3c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	0151      	lsls	r1, r2, #5
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	440a      	add	r2, r1
 8004b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b34:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d07e      	beq.n	8004c3c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	2101      	movs	r1, #1
 8004b50:	fa01 f303 	lsl.w	r3, r1, r3
 8004b54:	6979      	ldr	r1, [r7, #20]
 8004b56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	634b      	str	r3, [r1, #52]	; 0x34
 8004b5e:	e06d      	b.n	8004c3c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b7a:	0cdb      	lsrs	r3, r3, #19
 8004b7c:	04db      	lsls	r3, r3, #19
 8004b7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	0151      	lsls	r1, r2, #5
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	440a      	add	r2, r1
 8004b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ba2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bd2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bea:	6939      	ldr	r1, [r7, #16]
 8004bec:	0148      	lsls	r0, r1, #5
 8004bee:	6979      	ldr	r1, [r7, #20]
 8004bf0:	4401      	add	r1, r0
 8004bf2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10d      	bne.n	8004c1c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d009      	beq.n	8004c1c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	68d9      	ldr	r1, [r3, #12]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c18:	460a      	mov	r2, r1
 8004c1a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b089      	sub	sp, #36	; 0x24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	4611      	mov	r1, r2
 8004c56:	461a      	mov	r2, r3
 8004c58:	460b      	mov	r3, r1
 8004c5a:	71fb      	strb	r3, [r7, #7]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004c68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d11a      	bne.n	8004ca6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c70:	88bb      	ldrh	r3, [r7, #4]
 8004c72:	3303      	adds	r3, #3
 8004c74:	089b      	lsrs	r3, r3, #2
 8004c76:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61bb      	str	r3, [r7, #24]
 8004c7c:	e00f      	b.n	8004c9e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	031a      	lsls	r2, r3, #12
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	3304      	adds	r3, #4
 8004c96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d3eb      	bcc.n	8004c7e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3724      	adds	r7, #36	; 0x24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b089      	sub	sp, #36	; 0x24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	3303      	adds	r3, #3
 8004cce:	089b      	lsrs	r3, r3, #2
 8004cd0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61bb      	str	r3, [r7, #24]
 8004cd6:	e00b      	b.n	8004cf0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	3301      	adds	r3, #1
 8004cee:	61bb      	str	r3, [r7, #24]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d3ef      	bcc.n	8004cd8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004cf8:	69fb      	ldr	r3, [r7, #28]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3724      	adds	r7, #36	; 0x24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	785b      	ldrb	r3, [r3, #1]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d12c      	bne.n	8004d7c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	db12      	blt.n	8004d5a <USB_EPSetStall+0x54>
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00f      	beq.n	8004d5a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	0151      	lsls	r1, r2, #5
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	440a      	add	r2, r1
 8004d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d58:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	0151      	lsls	r1, r2, #5
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	440a      	add	r2, r1
 8004d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	e02b      	b.n	8004dd4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	db12      	blt.n	8004db4 <USB_EPSetStall+0xae>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00f      	beq.n	8004db4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	0151      	lsls	r1, r2, #5
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	440a      	add	r2, r1
 8004daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004db2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004dd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b085      	sub	sp, #20
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
 8004dea:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	785b      	ldrb	r3, [r3, #1]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d128      	bne.n	8004e50 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	78db      	ldrb	r3, [r3, #3]
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d003      	beq.n	8004e2e <USB_EPClearStall+0x4c>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	78db      	ldrb	r3, [r3, #3]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d138      	bne.n	8004ea0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	0151      	lsls	r1, r2, #5
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	440a      	add	r2, r1
 8004e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	e027      	b.n	8004ea0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	0151      	lsls	r1, r2, #5
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	440a      	add	r2, r1
 8004e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	78db      	ldrb	r3, [r3, #3]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d003      	beq.n	8004e80 <USB_EPClearStall+0x9e>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	78db      	ldrb	r3, [r3, #3]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d10f      	bne.n	8004ea0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	0151      	lsls	r1, r2, #5
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	440a      	add	r2, r1
 8004e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ecc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ed0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004ee2:	68f9      	ldr	r1, [r7, #12]
 8004ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f14:	f023 0303 	bic.w	r3, r3, #3
 8004f18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f28:	f023 0302 	bic.w	r3, r3, #2
 8004f2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f6a:	f043 0302 	orr.w	r3, r3, #2
 8004f6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b085      	sub	sp, #20
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4013      	ands	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f96:	68fb      	ldr	r3, [r7, #12]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	0c1b      	lsrs	r3, r3, #16
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	b29b      	uxth	r3, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	4013      	ands	r3, r2
 8005038:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800503a:	68bb      	ldr	r3, [r7, #8]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	460b      	mov	r3, r1
 8005052:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
 8005078:	01db      	lsls	r3, r3, #7
 800507a:	b2db      	uxtb	r3, r3
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4013      	ands	r3, r2
 8005094:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005096:	68bb      	ldr	r3, [r7, #8]
}
 8005098:	4618      	mov	r0, r3
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	f003 0301 	and.w	r3, r3, #1
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050de:	f023 0307 	bic.w	r3, r3, #7
 80050e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	460b      	mov	r3, r1
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	333c      	adds	r3, #60	; 0x3c
 800511e:	3304      	adds	r3, #4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	4a26      	ldr	r2, [pc, #152]	; (80051c0 <USB_EP0_OutStart+0xb8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d90a      	bls.n	8005142 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800513c:	d101      	bne.n	8005142 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	e037      	b.n	80051b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	461a      	mov	r2, r3
 800514a:	2300      	movs	r3, #0
 800514c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800515c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005160:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005170:	f043 0318 	orr.w	r3, r3, #24
 8005174:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005184:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005188:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800518a:	7afb      	ldrb	r3, [r7, #11]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d10f      	bne.n	80051b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005196:	461a      	mov	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80051ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	4f54300a 	.word	0x4f54300a

080051c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3301      	adds	r3, #1
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4a13      	ldr	r2, [pc, #76]	; (8005228 <USB_CoreReset+0x64>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e01b      	b.n	800521a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	daf2      	bge.n	80051d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f043 0201 	orr.w	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	3301      	adds	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a09      	ldr	r2, [pc, #36]	; (8005228 <USB_CoreReset+0x64>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d901      	bls.n	800520c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e006      	b.n	800521a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b01      	cmp	r3, #1
 8005216:	d0f0      	beq.n	80051fa <USB_CoreReset+0x36>

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	00030d40 	.word	0x00030d40

0800522c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005238:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800523c:	f002 f95c 	bl	80074f8 <USBD_static_malloc>
 8005240:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d105      	bne.n	8005254 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005250:	2302      	movs	r3, #2
 8005252:	e066      	b.n	8005322 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	7c1b      	ldrb	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d119      	bne.n	8005298 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005264:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005268:	2202      	movs	r2, #2
 800526a:	2181      	movs	r1, #129	; 0x81
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f002 f820 	bl	80072b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005278:	f44f 7300 	mov.w	r3, #512	; 0x200
 800527c:	2202      	movs	r2, #2
 800527e:	2101      	movs	r1, #1
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f002 f816 	bl	80072b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2210      	movs	r2, #16
 8005292:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005296:	e016      	b.n	80052c6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005298:	2340      	movs	r3, #64	; 0x40
 800529a:	2202      	movs	r2, #2
 800529c:	2181      	movs	r1, #129	; 0x81
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f002 f807 	bl	80072b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80052aa:	2340      	movs	r3, #64	; 0x40
 80052ac:	2202      	movs	r2, #2
 80052ae:	2101      	movs	r1, #1
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f001 fffe 	bl	80072b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2210      	movs	r2, #16
 80052c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80052c6:	2308      	movs	r3, #8
 80052c8:	2203      	movs	r2, #3
 80052ca:	2182      	movs	r1, #130	; 0x82
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f001 fff0 	bl	80072b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	7c1b      	ldrb	r3, [r3, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d109      	bne.n	8005310 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005306:	2101      	movs	r1, #1
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f002 f8c1 	bl	8007490 <USBD_LL_PrepareReceive>
 800530e:	e007      	b.n	8005320 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005316:	2340      	movs	r3, #64	; 0x40
 8005318:	2101      	movs	r1, #1
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f002 f8b8 	bl	8007490 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
 8005332:	460b      	mov	r3, r1
 8005334:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005336:	2181      	movs	r1, #129	; 0x81
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f001 ffe0 	bl	80072fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005344:	2101      	movs	r1, #1
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f001 ffd9 	bl	80072fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005354:	2182      	movs	r1, #130	; 0x82
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f001 ffd1 	bl	80072fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00e      	beq.n	8005394 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005386:	4618      	mov	r0, r3
 8005388:	f002 f8c4 	bl	8007514 <USBD_static_free>
    pdev->pClassData = NULL;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e0af      	b.n	8005528 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d03f      	beq.n	8005454 <USBD_CDC_Setup+0xb4>
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	f040 809f 	bne.w	8005518 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	88db      	ldrh	r3, [r3, #6]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d02e      	beq.n	8005440 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	b25b      	sxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	da16      	bge.n	800541a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80053f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	88d2      	ldrh	r2, [r2, #6]
 80053fe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	88db      	ldrh	r3, [r3, #6]
 8005404:	2b07      	cmp	r3, #7
 8005406:	bf28      	it	cs
 8005408:	2307      	movcs	r3, #7
 800540a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	89fa      	ldrh	r2, [r7, #14]
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f001 fb19 	bl	8006a4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005418:	e085      	b.n	8005526 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	785a      	ldrb	r2, [r3, #1]
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	88db      	ldrh	r3, [r3, #6]
 8005428:	b2da      	uxtb	r2, r3
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005430:	6939      	ldr	r1, [r7, #16]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	88db      	ldrh	r3, [r3, #6]
 8005436:	461a      	mov	r2, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 fb32 	bl	8006aa2 <USBD_CtlPrepareRx>
      break;
 800543e:	e072      	b.n	8005526 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	7850      	ldrb	r0, [r2, #1]
 800544c:	2200      	movs	r2, #0
 800544e:	6839      	ldr	r1, [r7, #0]
 8005450:	4798      	blx	r3
      break;
 8005452:	e068      	b.n	8005526 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b0b      	cmp	r3, #11
 800545a:	d852      	bhi.n	8005502 <USBD_CDC_Setup+0x162>
 800545c:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <USBD_CDC_Setup+0xc4>)
 800545e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005462:	bf00      	nop
 8005464:	08005495 	.word	0x08005495
 8005468:	08005511 	.word	0x08005511
 800546c:	08005503 	.word	0x08005503
 8005470:	08005503 	.word	0x08005503
 8005474:	08005503 	.word	0x08005503
 8005478:	08005503 	.word	0x08005503
 800547c:	08005503 	.word	0x08005503
 8005480:	08005503 	.word	0x08005503
 8005484:	08005503 	.word	0x08005503
 8005488:	08005503 	.word	0x08005503
 800548c:	080054bf 	.word	0x080054bf
 8005490:	080054e9 	.word	0x080054e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b03      	cmp	r3, #3
 800549e:	d107      	bne.n	80054b0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80054a0:	f107 030a 	add.w	r3, r7, #10
 80054a4:	2202      	movs	r2, #2
 80054a6:	4619      	mov	r1, r3
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f001 face 	bl	8006a4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054ae:	e032      	b.n	8005516 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80054b0:	6839      	ldr	r1, [r7, #0]
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f001 fa58 	bl	8006968 <USBD_CtlError>
            ret = USBD_FAIL;
 80054b8:	2303      	movs	r3, #3
 80054ba:	75fb      	strb	r3, [r7, #23]
          break;
 80054bc:	e02b      	b.n	8005516 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d107      	bne.n	80054da <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80054ca:	f107 030d 	add.w	r3, r7, #13
 80054ce:	2201      	movs	r2, #1
 80054d0:	4619      	mov	r1, r3
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f001 fab9 	bl	8006a4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054d8:	e01d      	b.n	8005516 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f001 fa43 	bl	8006968 <USBD_CtlError>
            ret = USBD_FAIL;
 80054e2:	2303      	movs	r3, #3
 80054e4:	75fb      	strb	r3, [r7, #23]
          break;
 80054e6:	e016      	b.n	8005516 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d00f      	beq.n	8005514 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f001 fa36 	bl	8006968 <USBD_CtlError>
            ret = USBD_FAIL;
 80054fc:	2303      	movs	r3, #3
 80054fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005500:	e008      	b.n	8005514 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005502:	6839      	ldr	r1, [r7, #0]
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 fa2f 	bl	8006968 <USBD_CtlError>
          ret = USBD_FAIL;
 800550a:	2303      	movs	r3, #3
 800550c:	75fb      	strb	r3, [r7, #23]
          break;
 800550e:	e002      	b.n	8005516 <USBD_CDC_Setup+0x176>
          break;
 8005510:	bf00      	nop
 8005512:	e008      	b.n	8005526 <USBD_CDC_Setup+0x186>
          break;
 8005514:	bf00      	nop
      }
      break;
 8005516:	e006      	b.n	8005526 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f001 fa24 	bl	8006968 <USBD_CtlError>
      ret = USBD_FAIL;
 8005520:	2303      	movs	r3, #3
 8005522:	75fb      	strb	r3, [r7, #23]
      break;
 8005524:	bf00      	nop
  }

  return (uint8_t)ret;
 8005526:	7dfb      	ldrb	r3, [r7, #23]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005542:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800554e:	2303      	movs	r3, #3
 8005550:	e04f      	b.n	80055f2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005558:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800555a:	78fa      	ldrb	r2, [r7, #3]
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	440b      	add	r3, r1
 8005568:	3318      	adds	r3, #24
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d029      	beq.n	80055c4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005570:	78fa      	ldrb	r2, [r7, #3]
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	440b      	add	r3, r1
 800557e:	3318      	adds	r3, #24
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	78f9      	ldrb	r1, [r7, #3]
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	460b      	mov	r3, r1
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	1a5b      	subs	r3, r3, r1
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4403      	add	r3, r0
 8005590:	3344      	adds	r3, #68	; 0x44
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	fbb2 f1f3 	udiv	r1, r2, r3
 8005598:	fb03 f301 	mul.w	r3, r3, r1
 800559c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d110      	bne.n	80055c4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	3318      	adds	r3, #24
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055b6:	78f9      	ldrb	r1, [r7, #3]
 80055b8:	2300      	movs	r3, #0
 80055ba:	2200      	movs	r2, #0
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f001 ff46 	bl	800744e <USBD_LL_Transmit>
 80055c2:	e015      	b.n	80055f0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00b      	beq.n	80055f0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	460b      	mov	r3, r1
 8005604:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800560c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005618:	2303      	movs	r3, #3
 800561a:	e015      	b.n	8005648 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	4619      	mov	r1, r3
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f001 ff56 	bl	80074d2 <USBD_LL_GetRxDataSize>
 8005626:	4602      	mov	r2, r0
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005642:	4611      	mov	r1, r2
 8005644:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800565e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005666:	2303      	movs	r3, #3
 8005668:	e01b      	b.n	80056a2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d015      	beq.n	80056a0 <USBD_CDC_EP0_RxReady+0x50>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800567a:	2bff      	cmp	r3, #255	; 0xff
 800567c:	d010      	beq.n	80056a0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800568c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005694:	b292      	uxth	r2, r2
 8005696:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	22ff      	movs	r2, #255	; 0xff
 800569c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2243      	movs	r2, #67	; 0x43
 80056b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80056ba:	4b03      	ldr	r3, [pc, #12]	; (80056c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	20000094 	.word	0x20000094

080056cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2243      	movs	r2, #67	; 0x43
 80056d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80056da:	4b03      	ldr	r3, [pc, #12]	; (80056e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	20000050 	.word	0x20000050

080056ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2243      	movs	r2, #67	; 0x43
 80056f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80056fa:	4b03      	ldr	r3, [pc, #12]	; (8005708 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	200000d8 	.word	0x200000d8

0800570c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	220a      	movs	r2, #10
 8005718:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800571a:	4b03      	ldr	r3, [pc, #12]	; (8005728 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800571c:	4618      	mov	r0, r3
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	2000000c 	.word	0x2000000c

0800572c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800573c:	2303      	movs	r3, #3
 800573e:	e004      	b.n	800574a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005756:	b480      	push	{r7}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005768:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005770:	2303      	movs	r3, #3
 8005772:	e008      	b.n	8005786 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e004      	b.n	80057b8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80057d4:	2301      	movs	r3, #1
 80057d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e01a      	b.n	800581c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d114      	bne.n	800581a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800580e:	2181      	movs	r1, #129	; 0x81
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f001 fe1c 	bl	800744e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800581a:	7bfb      	ldrb	r3, [r7, #15]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005832:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800583e:	2303      	movs	r3, #3
 8005840:	e016      	b.n	8005870 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	7c1b      	ldrb	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d109      	bne.n	800585e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005854:	2101      	movs	r1, #1
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f001 fe1a 	bl	8007490 <USBD_LL_PrepareReceive>
 800585c:	e007      	b.n	800586e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005864:	2340      	movs	r3, #64	; 0x40
 8005866:	2101      	movs	r1, #1
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f001 fe11 	bl	8007490 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	4613      	mov	r3, r2
 8005884:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800588c:	2303      	movs	r3, #3
 800588e:	e01f      	b.n	80058d0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	79fa      	ldrb	r2, [r7, #7]
 80058c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f001 fc8d 	bl	80071e4 <USBD_LL_Init>
 80058ca:	4603      	mov	r3, r0
 80058cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3718      	adds	r7, #24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e016      	b.n	800591e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00b      	beq.n	800591c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590c:	f107 020e 	add.w	r2, r7, #14
 8005910:	4610      	mov	r0, r2
 8005912:	4798      	blx	r3
 8005914:	4602      	mov	r2, r0
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f001 fca4 	bl	800727c <USBD_LL_Start>
 8005934:	4603      	mov	r3, r0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005960:	2303      	movs	r3, #3
 8005962:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	4611      	mov	r1, r2
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	4798      	blx	r3
 800597e:	4603      	mov	r3, r0
 8005980:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005982:	7bfb      	ldrb	r3, [r7, #15]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d007      	beq.n	80059b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	78fa      	ldrb	r2, [r7, #3]
 80059ac:	4611      	mov	r1, r2
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	4798      	blx	r3
  }

  return USBD_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 ff90 	bl	80068f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80059e2:	461a      	mov	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059f0:	f003 031f 	and.w	r3, r3, #31
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d01a      	beq.n	8005a2e <USBD_LL_SetupStage+0x72>
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d822      	bhi.n	8005a42 <USBD_LL_SetupStage+0x86>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <USBD_LL_SetupStage+0x4a>
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d00a      	beq.n	8005a1a <USBD_LL_SetupStage+0x5e>
 8005a04:	e01d      	b.n	8005a42 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fa62 	bl	8005ed8 <USBD_StdDevReq>
 8005a14:	4603      	mov	r3, r0
 8005a16:	73fb      	strb	r3, [r7, #15]
      break;
 8005a18:	e020      	b.n	8005a5c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a20:	4619      	mov	r1, r3
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fac6 	bl	8005fb4 <USBD_StdItfReq>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a2c:	e016      	b.n	8005a5c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005a34:	4619      	mov	r1, r3
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fb05 	bl	8006046 <USBD_StdEPReq>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a40:	e00c      	b.n	8005a5c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 fc73 	bl	800733c <USBD_LL_StallEP>
 8005a56:	4603      	mov	r3, r0
 8005a58:	73fb      	strb	r3, [r7, #15]
      break;
 8005a5a:	bf00      	nop
  }

  return ret;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b086      	sub	sp, #24
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005a74:	7afb      	ldrb	r3, [r7, #11]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d138      	bne.n	8005aec <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d14a      	bne.n	8005b22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d913      	bls.n	8005ac0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	1ad2      	subs	r2, r2, r3
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	bf28      	it	cs
 8005ab2:	4613      	movcs	r3, r2
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f001 f80f 	bl	8006adc <USBD_CtlContinueRx>
 8005abe:	e030      	b.n	8005b22 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d10b      	bne.n	8005ae4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d005      	beq.n	8005ae4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f001 f80a 	bl	8006afe <USBD_CtlSendStatus>
 8005aea:	e01a      	b.n	8005b22 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d114      	bne.n	8005b22 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00e      	beq.n	8005b22 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	7afa      	ldrb	r2, [r7, #11]
 8005b0e:	4611      	mov	r1, r2
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	4798      	blx	r3
 8005b14:	4603      	mov	r3, r0
 8005b16:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	e000      	b.n	8005b24 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	460b      	mov	r3, r1
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005b3a:	7afb      	ldrb	r3, [r7, #11]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d16b      	bne.n	8005c18 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3314      	adds	r3, #20
 8005b44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d156      	bne.n	8005bfe <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d914      	bls.n	8005b86 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	1ad2      	subs	r2, r2, r3
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 ff84 	bl	8006a80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f001 fc86 	bl	8007490 <USBD_LL_PrepareReceive>
 8005b84:	e03b      	b.n	8005bfe <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d11c      	bne.n	8005bcc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d316      	bcc.n	8005bcc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d20f      	bcs.n	8005bcc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005bac:	2200      	movs	r2, #0
 8005bae:	2100      	movs	r1, #0
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 ff65 	bl	8006a80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f001 fc63 	bl	8007490 <USBD_LL_PrepareReceive>
 8005bca:	e018      	b.n	8005bfe <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b03      	cmp	r3, #3
 8005bd6:	d10b      	bne.n	8005bf0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d005      	beq.n	8005bf0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bf0:	2180      	movs	r1, #128	; 0x80
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f001 fba2 	bl	800733c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 ff93 	bl	8006b24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d122      	bne.n	8005c4e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7ff fe98 	bl	800593e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c16:	e01a      	b.n	8005c4e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d114      	bne.n	8005c4e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00e      	beq.n	8005c4e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	7afa      	ldrb	r2, [r7, #11]
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	4798      	blx	r3
 8005c40:	4603      	mov	r3, r0
 8005c42:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d001      	beq.n	8005c4e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005c4a:	7dfb      	ldrb	r3, [r7, #23]
 8005c4c:	e000      	b.n	8005c50 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e02f      	b.n	8005cec <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00f      	beq.n	8005cb6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d009      	beq.n	8005cb6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6852      	ldr	r2, [r2, #4]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cb6:	2340      	movs	r3, #64	; 0x40
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2100      	movs	r1, #0
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f001 faf8 	bl	80072b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2240      	movs	r2, #64	; 0x40
 8005cce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005cd2:	2340      	movs	r3, #64	; 0x40
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2180      	movs	r1, #128	; 0x80
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 faea 	bl	80072b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2240      	movs	r2, #64	; 0x40
 8005ce8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2204      	movs	r2, #4
 8005d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d106      	bne.n	8005d62 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e012      	b.n	8005dac <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d10b      	bne.n	8005daa <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e014      	b.n	8005df8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d10d      	bne.n	8005df6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	78fa      	ldrb	r2, [r7, #3]
 8005df0:	4611      	mov	r1, r2
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e014      	b.n	8005e44 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d10d      	bne.n	8005e42 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d007      	beq.n	8005e42 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	78fa      	ldrb	r2, [r7, #3]
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d009      	beq.n	8005e90 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6852      	ldr	r2, [r2, #4]
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	4798      	blx	r3
  }

  return USBD_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b087      	sub	sp, #28
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005eb8:	8a3b      	ldrh	r3, [r7, #16]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	b21a      	sxth	r2, r3
 8005ebe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	b21b      	sxth	r3, r3
 8005ec6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005ec8:	89fb      	ldrh	r3, [r7, #14]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005eee:	2b40      	cmp	r3, #64	; 0x40
 8005ef0:	d005      	beq.n	8005efe <USBD_StdDevReq+0x26>
 8005ef2:	2b40      	cmp	r3, #64	; 0x40
 8005ef4:	d853      	bhi.n	8005f9e <USBD_StdDevReq+0xc6>
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00b      	beq.n	8005f12 <USBD_StdDevReq+0x3a>
 8005efa:	2b20      	cmp	r3, #32
 8005efc:	d14f      	bne.n	8005f9e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	4798      	blx	r3
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f10:	e04a      	b.n	8005fa8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	785b      	ldrb	r3, [r3, #1]
 8005f16:	2b09      	cmp	r3, #9
 8005f18:	d83b      	bhi.n	8005f92 <USBD_StdDevReq+0xba>
 8005f1a:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <USBD_StdDevReq+0x48>)
 8005f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f20:	08005f75 	.word	0x08005f75
 8005f24:	08005f89 	.word	0x08005f89
 8005f28:	08005f93 	.word	0x08005f93
 8005f2c:	08005f7f 	.word	0x08005f7f
 8005f30:	08005f93 	.word	0x08005f93
 8005f34:	08005f53 	.word	0x08005f53
 8005f38:	08005f49 	.word	0x08005f49
 8005f3c:	08005f93 	.word	0x08005f93
 8005f40:	08005f6b 	.word	0x08005f6b
 8005f44:	08005f5d 	.word	0x08005f5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005f48:	6839      	ldr	r1, [r7, #0]
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f9de 	bl	800630c <USBD_GetDescriptor>
          break;
 8005f50:	e024      	b.n	8005f9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fb43 	bl	80065e0 <USBD_SetAddress>
          break;
 8005f5a:	e01f      	b.n	8005f9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fb82 	bl	8006668 <USBD_SetConfig>
 8005f64:	4603      	mov	r3, r0
 8005f66:	73fb      	strb	r3, [r7, #15]
          break;
 8005f68:	e018      	b.n	8005f9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fc21 	bl	80067b4 <USBD_GetConfig>
          break;
 8005f72:	e013      	b.n	8005f9c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005f74:	6839      	ldr	r1, [r7, #0]
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fc52 	bl	8006820 <USBD_GetStatus>
          break;
 8005f7c:	e00e      	b.n	8005f9c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005f7e:	6839      	ldr	r1, [r7, #0]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fc81 	bl	8006888 <USBD_SetFeature>
          break;
 8005f86:	e009      	b.n	8005f9c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fc90 	bl	80068b0 <USBD_ClrFeature>
          break;
 8005f90:	e004      	b.n	8005f9c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fce7 	bl	8006968 <USBD_CtlError>
          break;
 8005f9a:	bf00      	nop
      }
      break;
 8005f9c:	e004      	b.n	8005fa8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fce1 	bl	8006968 <USBD_CtlError>
      break;
 8005fa6:	bf00      	nop
  }

  return ret;
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop

08005fb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d005      	beq.n	8005fda <USBD_StdItfReq+0x26>
 8005fce:	2b40      	cmp	r3, #64	; 0x40
 8005fd0:	d82f      	bhi.n	8006032 <USBD_StdItfReq+0x7e>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <USBD_StdItfReq+0x26>
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d12b      	bne.n	8006032 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d81d      	bhi.n	8006024 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	889b      	ldrh	r3, [r3, #4]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d813      	bhi.n	800601a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	6839      	ldr	r1, [r7, #0]
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4798      	blx	r3
 8006000:	4603      	mov	r3, r0
 8006002:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	88db      	ldrh	r3, [r3, #6]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d110      	bne.n	800602e <USBD_StdItfReq+0x7a>
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10d      	bne.n	800602e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fd73 	bl	8006afe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006018:	e009      	b.n	800602e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fca3 	bl	8006968 <USBD_CtlError>
          break;
 8006022:	e004      	b.n	800602e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fc9e 	bl	8006968 <USBD_CtlError>
          break;
 800602c:	e000      	b.n	8006030 <USBD_StdItfReq+0x7c>
          break;
 800602e:	bf00      	nop
      }
      break;
 8006030:	e004      	b.n	800603c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006032:	6839      	ldr	r1, [r7, #0]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fc97 	bl	8006968 <USBD_CtlError>
      break;
 800603a:	bf00      	nop
  }

  return ret;
 800603c:	7bfb      	ldrb	r3, [r7, #15]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	889b      	ldrh	r3, [r3, #4]
 8006058:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	d007      	beq.n	8006076 <USBD_StdEPReq+0x30>
 8006066:	2b40      	cmp	r3, #64	; 0x40
 8006068:	f200 8145 	bhi.w	80062f6 <USBD_StdEPReq+0x2b0>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00c      	beq.n	800608a <USBD_StdEPReq+0x44>
 8006070:	2b20      	cmp	r3, #32
 8006072:	f040 8140 	bne.w	80062f6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]
      break;
 8006088:	e13a      	b.n	8006300 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	2b03      	cmp	r3, #3
 8006090:	d007      	beq.n	80060a2 <USBD_StdEPReq+0x5c>
 8006092:	2b03      	cmp	r3, #3
 8006094:	f300 8129 	bgt.w	80062ea <USBD_StdEPReq+0x2a4>
 8006098:	2b00      	cmp	r3, #0
 800609a:	d07f      	beq.n	800619c <USBD_StdEPReq+0x156>
 800609c:	2b01      	cmp	r3, #1
 800609e:	d03c      	beq.n	800611a <USBD_StdEPReq+0xd4>
 80060a0:	e123      	b.n	80062ea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d002      	beq.n	80060b4 <USBD_StdEPReq+0x6e>
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d016      	beq.n	80060e0 <USBD_StdEPReq+0x9a>
 80060b2:	e02c      	b.n	800610e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060b4:	7bbb      	ldrb	r3, [r7, #14]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00d      	beq.n	80060d6 <USBD_StdEPReq+0x90>
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	2b80      	cmp	r3, #128	; 0x80
 80060be:	d00a      	beq.n	80060d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80060c0:	7bbb      	ldrb	r3, [r7, #14]
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 f939 	bl	800733c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80060ca:	2180      	movs	r1, #128	; 0x80
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 f935 	bl	800733c <USBD_LL_StallEP>
 80060d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80060d4:	e020      	b.n	8006118 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fc45 	bl	8006968 <USBD_CtlError>
              break;
 80060de:	e01b      	b.n	8006118 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	885b      	ldrh	r3, [r3, #2]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d10e      	bne.n	8006106 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80060e8:	7bbb      	ldrb	r3, [r7, #14]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <USBD_StdEPReq+0xc0>
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	2b80      	cmp	r3, #128	; 0x80
 80060f2:	d008      	beq.n	8006106 <USBD_StdEPReq+0xc0>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	88db      	ldrh	r3, [r3, #6]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d104      	bne.n	8006106 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80060fc:	7bbb      	ldrb	r3, [r7, #14]
 80060fe:	4619      	mov	r1, r3
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f001 f91b 	bl	800733c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fcf9 	bl	8006afe <USBD_CtlSendStatus>

              break;
 800610c:	e004      	b.n	8006118 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fc29 	bl	8006968 <USBD_CtlError>
              break;
 8006116:	bf00      	nop
          }
          break;
 8006118:	e0ec      	b.n	80062f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d002      	beq.n	800612c <USBD_StdEPReq+0xe6>
 8006126:	2b03      	cmp	r3, #3
 8006128:	d016      	beq.n	8006158 <USBD_StdEPReq+0x112>
 800612a:	e030      	b.n	800618e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800612c:	7bbb      	ldrb	r3, [r7, #14]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00d      	beq.n	800614e <USBD_StdEPReq+0x108>
 8006132:	7bbb      	ldrb	r3, [r7, #14]
 8006134:	2b80      	cmp	r3, #128	; 0x80
 8006136:	d00a      	beq.n	800614e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006138:	7bbb      	ldrb	r3, [r7, #14]
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 f8fd 	bl	800733c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006142:	2180      	movs	r1, #128	; 0x80
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 f8f9 	bl	800733c <USBD_LL_StallEP>
 800614a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800614c:	e025      	b.n	800619a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fc09 	bl	8006968 <USBD_CtlError>
              break;
 8006156:	e020      	b.n	800619a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	885b      	ldrh	r3, [r3, #2]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d11b      	bne.n	8006198 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006166:	2b00      	cmp	r3, #0
 8006168:	d004      	beq.n	8006174 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800616a:	7bbb      	ldrb	r3, [r7, #14]
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 f903 	bl	800737a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fcc2 	bl	8006afe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	6839      	ldr	r1, [r7, #0]
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	4798      	blx	r3
 8006188:	4603      	mov	r3, r0
 800618a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800618c:	e004      	b.n	8006198 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 fbe9 	bl	8006968 <USBD_CtlError>
              break;
 8006196:	e000      	b.n	800619a <USBD_StdEPReq+0x154>
              break;
 8006198:	bf00      	nop
          }
          break;
 800619a:	e0ab      	b.n	80062f4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d002      	beq.n	80061ae <USBD_StdEPReq+0x168>
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d032      	beq.n	8006212 <USBD_StdEPReq+0x1cc>
 80061ac:	e097      	b.n	80062de <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80061ae:	7bbb      	ldrb	r3, [r7, #14]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d007      	beq.n	80061c4 <USBD_StdEPReq+0x17e>
 80061b4:	7bbb      	ldrb	r3, [r7, #14]
 80061b6:	2b80      	cmp	r3, #128	; 0x80
 80061b8:	d004      	beq.n	80061c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fbd3 	bl	8006968 <USBD_CtlError>
                break;
 80061c2:	e091      	b.n	80062e8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	da0b      	bge.n	80061e4 <USBD_StdEPReq+0x19e>
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	3310      	adds	r3, #16
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	4413      	add	r3, r2
 80061e0:	3304      	adds	r3, #4
 80061e2:	e00b      	b.n	80061fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061e4:	7bbb      	ldrb	r3, [r7, #14]
 80061e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	4413      	add	r3, r2
 80061fa:	3304      	adds	r3, #4
 80061fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2202      	movs	r2, #2
 8006208:	4619      	mov	r1, r3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fc1d 	bl	8006a4a <USBD_CtlSendData>
              break;
 8006210:	e06a      	b.n	80062e8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006212:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006216:	2b00      	cmp	r3, #0
 8006218:	da11      	bge.n	800623e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	f003 020f 	and.w	r2, r3, #15
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	440b      	add	r3, r1
 800622c:	3324      	adds	r3, #36	; 0x24
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d117      	bne.n	8006264 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fb96 	bl	8006968 <USBD_CtlError>
                  break;
 800623c:	e054      	b.n	80062e8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800623e:	7bbb      	ldrb	r3, [r7, #14]
 8006240:	f003 020f 	and.w	r2, r3, #15
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	4613      	mov	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	440b      	add	r3, r1
 8006250:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d104      	bne.n	8006264 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fb83 	bl	8006968 <USBD_CtlError>
                  break;
 8006262:	e041      	b.n	80062e8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006268:	2b00      	cmp	r3, #0
 800626a:	da0b      	bge.n	8006284 <USBD_StdEPReq+0x23e>
 800626c:	7bbb      	ldrb	r3, [r7, #14]
 800626e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	3310      	adds	r3, #16
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	4413      	add	r3, r2
 8006280:	3304      	adds	r3, #4
 8006282:	e00b      	b.n	800629c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006284:	7bbb      	ldrb	r3, [r7, #14]
 8006286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	4413      	add	r3, r2
 800629a:	3304      	adds	r3, #4
 800629c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800629e:	7bbb      	ldrb	r3, [r7, #14]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <USBD_StdEPReq+0x264>
 80062a4:	7bbb      	ldrb	r3, [r7, #14]
 80062a6:	2b80      	cmp	r3, #128	; 0x80
 80062a8:	d103      	bne.n	80062b2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	e00e      	b.n	80062d0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80062b2:	7bbb      	ldrb	r3, [r7, #14]
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 f87e 	bl	80073b8 <USBD_LL_IsStallEP>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2201      	movs	r2, #1
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	e002      	b.n	80062d0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2202      	movs	r2, #2
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fbb7 	bl	8006a4a <USBD_CtlSendData>
              break;
 80062dc:	e004      	b.n	80062e8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fb41 	bl	8006968 <USBD_CtlError>
              break;
 80062e6:	bf00      	nop
          }
          break;
 80062e8:	e004      	b.n	80062f4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80062ea:	6839      	ldr	r1, [r7, #0]
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fb3b 	bl	8006968 <USBD_CtlError>
          break;
 80062f2:	bf00      	nop
      }
      break;
 80062f4:	e004      	b.n	8006300 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fb35 	bl	8006968 <USBD_CtlError>
      break;
 80062fe:	bf00      	nop
  }

  return ret;
 8006300:	7bfb      	ldrb	r3, [r7, #15]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800631a:	2300      	movs	r3, #0
 800631c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800631e:	2300      	movs	r3, #0
 8006320:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	885b      	ldrh	r3, [r3, #2]
 8006326:	0a1b      	lsrs	r3, r3, #8
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	2b06      	cmp	r3, #6
 800632e:	f200 8128 	bhi.w	8006582 <USBD_GetDescriptor+0x276>
 8006332:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <USBD_GetDescriptor+0x2c>)
 8006334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006338:	08006355 	.word	0x08006355
 800633c:	0800636d 	.word	0x0800636d
 8006340:	080063ad 	.word	0x080063ad
 8006344:	08006583 	.word	0x08006583
 8006348:	08006583 	.word	0x08006583
 800634c:	08006523 	.word	0x08006523
 8006350:	0800654f 	.word	0x0800654f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	7c12      	ldrb	r2, [r2, #16]
 8006360:	f107 0108 	add.w	r1, r7, #8
 8006364:	4610      	mov	r0, r2
 8006366:	4798      	blx	r3
 8006368:	60f8      	str	r0, [r7, #12]
      break;
 800636a:	e112      	b.n	8006592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	7c1b      	ldrb	r3, [r3, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10d      	bne.n	8006390 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637c:	f107 0208 	add.w	r2, r7, #8
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
 8006384:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3301      	adds	r3, #1
 800638a:	2202      	movs	r2, #2
 800638c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800638e:	e100      	b.n	8006592 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	f107 0208 	add.w	r2, r7, #8
 800639c:	4610      	mov	r0, r2
 800639e:	4798      	blx	r3
 80063a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	3301      	adds	r3, #1
 80063a6:	2202      	movs	r2, #2
 80063a8:	701a      	strb	r2, [r3, #0]
      break;
 80063aa:	e0f2      	b.n	8006592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	885b      	ldrh	r3, [r3, #2]
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b05      	cmp	r3, #5
 80063b4:	f200 80ac 	bhi.w	8006510 <USBD_GetDescriptor+0x204>
 80063b8:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <USBD_GetDescriptor+0xb4>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	080063d9 	.word	0x080063d9
 80063c4:	0800640d 	.word	0x0800640d
 80063c8:	08006441 	.word	0x08006441
 80063cc:	08006475 	.word	0x08006475
 80063d0:	080064a9 	.word	0x080064a9
 80063d4:	080064dd 	.word	0x080064dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00b      	beq.n	80063fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	7c12      	ldrb	r2, [r2, #16]
 80063f0:	f107 0108 	add.w	r1, r7, #8
 80063f4:	4610      	mov	r0, r2
 80063f6:	4798      	blx	r3
 80063f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063fa:	e091      	b.n	8006520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fab2 	bl	8006968 <USBD_CtlError>
            err++;
 8006404:	7afb      	ldrb	r3, [r7, #11]
 8006406:	3301      	adds	r3, #1
 8006408:	72fb      	strb	r3, [r7, #11]
          break;
 800640a:	e089      	b.n	8006520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00b      	beq.n	8006430 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	7c12      	ldrb	r2, [r2, #16]
 8006424:	f107 0108 	add.w	r1, r7, #8
 8006428:	4610      	mov	r0, r2
 800642a:	4798      	blx	r3
 800642c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800642e:	e077      	b.n	8006520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fa98 	bl	8006968 <USBD_CtlError>
            err++;
 8006438:	7afb      	ldrb	r3, [r7, #11]
 800643a:	3301      	adds	r3, #1
 800643c:	72fb      	strb	r3, [r7, #11]
          break;
 800643e:	e06f      	b.n	8006520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00b      	beq.n	8006464 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	7c12      	ldrb	r2, [r2, #16]
 8006458:	f107 0108 	add.w	r1, r7, #8
 800645c:	4610      	mov	r0, r2
 800645e:	4798      	blx	r3
 8006460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006462:	e05d      	b.n	8006520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fa7e 	bl	8006968 <USBD_CtlError>
            err++;
 800646c:	7afb      	ldrb	r3, [r7, #11]
 800646e:	3301      	adds	r3, #1
 8006470:	72fb      	strb	r3, [r7, #11]
          break;
 8006472:	e055      	b.n	8006520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	7c12      	ldrb	r2, [r2, #16]
 800648c:	f107 0108 	add.w	r1, r7, #8
 8006490:	4610      	mov	r0, r2
 8006492:	4798      	blx	r3
 8006494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006496:	e043      	b.n	8006520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fa64 	bl	8006968 <USBD_CtlError>
            err++;
 80064a0:	7afb      	ldrb	r3, [r7, #11]
 80064a2:	3301      	adds	r3, #1
 80064a4:	72fb      	strb	r3, [r7, #11]
          break;
 80064a6:	e03b      	b.n	8006520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	7c12      	ldrb	r2, [r2, #16]
 80064c0:	f107 0108 	add.w	r1, r7, #8
 80064c4:	4610      	mov	r0, r2
 80064c6:	4798      	blx	r3
 80064c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064ca:	e029      	b.n	8006520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80064cc:	6839      	ldr	r1, [r7, #0]
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa4a 	bl	8006968 <USBD_CtlError>
            err++;
 80064d4:	7afb      	ldrb	r3, [r7, #11]
 80064d6:	3301      	adds	r3, #1
 80064d8:	72fb      	strb	r3, [r7, #11]
          break;
 80064da:	e021      	b.n	8006520 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	7c12      	ldrb	r2, [r2, #16]
 80064f4:	f107 0108 	add.w	r1, r7, #8
 80064f8:	4610      	mov	r0, r2
 80064fa:	4798      	blx	r3
 80064fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80064fe:	e00f      	b.n	8006520 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fa30 	bl	8006968 <USBD_CtlError>
            err++;
 8006508:	7afb      	ldrb	r3, [r7, #11]
 800650a:	3301      	adds	r3, #1
 800650c:	72fb      	strb	r3, [r7, #11]
          break;
 800650e:	e007      	b.n	8006520 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fa28 	bl	8006968 <USBD_CtlError>
          err++;
 8006518:	7afb      	ldrb	r3, [r7, #11]
 800651a:	3301      	adds	r3, #1
 800651c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800651e:	bf00      	nop
      }
      break;
 8006520:	e037      	b.n	8006592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	7c1b      	ldrb	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006532:	f107 0208 	add.w	r2, r7, #8
 8006536:	4610      	mov	r0, r2
 8006538:	4798      	blx	r3
 800653a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800653c:	e029      	b.n	8006592 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fa11 	bl	8006968 <USBD_CtlError>
        err++;
 8006546:	7afb      	ldrb	r3, [r7, #11]
 8006548:	3301      	adds	r3, #1
 800654a:	72fb      	strb	r3, [r7, #11]
      break;
 800654c:	e021      	b.n	8006592 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	7c1b      	ldrb	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10d      	bne.n	8006572 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655e:	f107 0208 	add.w	r2, r7, #8
 8006562:	4610      	mov	r0, r2
 8006564:	4798      	blx	r3
 8006566:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3301      	adds	r3, #1
 800656c:	2207      	movs	r2, #7
 800656e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006570:	e00f      	b.n	8006592 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f9f7 	bl	8006968 <USBD_CtlError>
        err++;
 800657a:	7afb      	ldrb	r3, [r7, #11]
 800657c:	3301      	adds	r3, #1
 800657e:	72fb      	strb	r3, [r7, #11]
      break;
 8006580:	e007      	b.n	8006592 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f9ef 	bl	8006968 <USBD_CtlError>
      err++;
 800658a:	7afb      	ldrb	r3, [r7, #11]
 800658c:	3301      	adds	r3, #1
 800658e:	72fb      	strb	r3, [r7, #11]
      break;
 8006590:	bf00      	nop
  }

  if (err != 0U)
 8006592:	7afb      	ldrb	r3, [r7, #11]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d11e      	bne.n	80065d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	88db      	ldrh	r3, [r3, #6]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d016      	beq.n	80065ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80065a0:	893b      	ldrh	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00e      	beq.n	80065c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	88da      	ldrh	r2, [r3, #6]
 80065aa:	893b      	ldrh	r3, [r7, #8]
 80065ac:	4293      	cmp	r3, r2
 80065ae:	bf28      	it	cs
 80065b0:	4613      	movcs	r3, r2
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80065b6:	893b      	ldrh	r3, [r7, #8]
 80065b8:	461a      	mov	r2, r3
 80065ba:	68f9      	ldr	r1, [r7, #12]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fa44 	bl	8006a4a <USBD_CtlSendData>
 80065c2:	e009      	b.n	80065d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f9ce 	bl	8006968 <USBD_CtlError>
 80065cc:	e004      	b.n	80065d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fa95 	bl	8006afe <USBD_CtlSendStatus>
 80065d4:	e000      	b.n	80065d8 <USBD_GetDescriptor+0x2cc>
    return;
 80065d6:	bf00      	nop
  }
}
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop

080065e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	889b      	ldrh	r3, [r3, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d131      	bne.n	8006656 <USBD_SetAddress+0x76>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	88db      	ldrh	r3, [r3, #6]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d12d      	bne.n	8006656 <USBD_SetAddress+0x76>
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	885b      	ldrh	r3, [r3, #2]
 80065fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006600:	d829      	bhi.n	8006656 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	885b      	ldrh	r3, [r3, #2]
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800660c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b03      	cmp	r3, #3
 8006618:	d104      	bne.n	8006624 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f9a3 	bl	8006968 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006622:	e01d      	b.n	8006660 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	7bfa      	ldrb	r2, [r7, #15]
 8006628:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 feed 	bl	8007410 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fa61 	bl	8006afe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d004      	beq.n	800664c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2202      	movs	r2, #2
 8006646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800664a:	e009      	b.n	8006660 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006654:	e004      	b.n	8006660 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f985 	bl	8006968 <USBD_CtlError>
  }
}
 800665e:	bf00      	nop
 8006660:	bf00      	nop
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	885b      	ldrh	r3, [r3, #2]
 800667a:	b2da      	uxtb	r2, r3
 800667c:	4b4c      	ldr	r3, [pc, #304]	; (80067b0 <USBD_SetConfig+0x148>)
 800667e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006680:	4b4b      	ldr	r3, [pc, #300]	; (80067b0 <USBD_SetConfig+0x148>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d905      	bls.n	8006694 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f96c 	bl	8006968 <USBD_CtlError>
    return USBD_FAIL;
 8006690:	2303      	movs	r3, #3
 8006692:	e088      	b.n	80067a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	d002      	beq.n	80066a6 <USBD_SetConfig+0x3e>
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d025      	beq.n	80066f0 <USBD_SetConfig+0x88>
 80066a4:	e071      	b.n	800678a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80066a6:	4b42      	ldr	r3, [pc, #264]	; (80067b0 <USBD_SetConfig+0x148>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d01c      	beq.n	80066e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80066ae:	4b40      	ldr	r3, [pc, #256]	; (80067b0 <USBD_SetConfig+0x148>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	461a      	mov	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80066b8:	4b3d      	ldr	r3, [pc, #244]	; (80067b0 <USBD_SetConfig+0x148>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff f948 	bl	8005954 <USBD_SetClassConfig>
 80066c4:	4603      	mov	r3, r0
 80066c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d004      	beq.n	80066d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f949 	bl	8006968 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80066d6:	e065      	b.n	80067a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fa10 	bl	8006afe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2203      	movs	r2, #3
 80066e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80066e6:	e05d      	b.n	80067a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fa08 	bl	8006afe <USBD_CtlSendStatus>
      break;
 80066ee:	e059      	b.n	80067a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80066f0:	4b2f      	ldr	r3, [pc, #188]	; (80067b0 <USBD_SetConfig+0x148>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d112      	bne.n	800671e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006700:	4b2b      	ldr	r3, [pc, #172]	; (80067b0 <USBD_SetConfig+0x148>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800670a:	4b29      	ldr	r3, [pc, #164]	; (80067b0 <USBD_SetConfig+0x148>)
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff f93b 	bl	800598c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f9f1 	bl	8006afe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800671c:	e042      	b.n	80067a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800671e:	4b24      	ldr	r3, [pc, #144]	; (80067b0 <USBD_SetConfig+0x148>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	429a      	cmp	r2, r3
 800672a:	d02a      	beq.n	8006782 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	b2db      	uxtb	r3, r3
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7ff f929 	bl	800598c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800673a:	4b1d      	ldr	r3, [pc, #116]	; (80067b0 <USBD_SetConfig+0x148>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006744:	4b1a      	ldr	r3, [pc, #104]	; (80067b0 <USBD_SetConfig+0x148>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff f902 	bl	8005954 <USBD_SetClassConfig>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00f      	beq.n	800677a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f903 	bl	8006968 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	b2db      	uxtb	r3, r3
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff f90e 	bl	800598c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006778:	e014      	b.n	80067a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f9bf 	bl	8006afe <USBD_CtlSendStatus>
      break;
 8006780:	e010      	b.n	80067a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f9bb 	bl	8006afe <USBD_CtlSendStatus>
      break;
 8006788:	e00c      	b.n	80067a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800678a:	6839      	ldr	r1, [r7, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 f8eb 	bl	8006968 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006792:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <USBD_SetConfig+0x148>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	4619      	mov	r1, r3
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff f8f7 	bl	800598c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800679e:	2303      	movs	r3, #3
 80067a0:	73fb      	strb	r3, [r7, #15]
      break;
 80067a2:	bf00      	nop
  }

  return ret;
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20000208 	.word	0x20000208

080067b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	88db      	ldrh	r3, [r3, #6]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d004      	beq.n	80067d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f8cd 	bl	8006968 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80067ce:	e023      	b.n	8006818 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	dc02      	bgt.n	80067e2 <USBD_GetConfig+0x2e>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	dc03      	bgt.n	80067e8 <USBD_GetConfig+0x34>
 80067e0:	e015      	b.n	800680e <USBD_GetConfig+0x5a>
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d00b      	beq.n	80067fe <USBD_GetConfig+0x4a>
 80067e6:	e012      	b.n	800680e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	3308      	adds	r3, #8
 80067f2:	2201      	movs	r2, #1
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f927 	bl	8006a4a <USBD_CtlSendData>
        break;
 80067fc:	e00c      	b.n	8006818 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3304      	adds	r3, #4
 8006802:	2201      	movs	r2, #1
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f91f 	bl	8006a4a <USBD_CtlSendData>
        break;
 800680c:	e004      	b.n	8006818 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f8a9 	bl	8006968 <USBD_CtlError>
        break;
 8006816:	bf00      	nop
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006830:	b2db      	uxtb	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	2b02      	cmp	r3, #2
 8006836:	d81e      	bhi.n	8006876 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	88db      	ldrh	r3, [r3, #6]
 800683c:	2b02      	cmp	r3, #2
 800683e:	d004      	beq.n	800684a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006840:	6839      	ldr	r1, [r7, #0]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f890 	bl	8006968 <USBD_CtlError>
        break;
 8006848:	e01a      	b.n	8006880 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006856:	2b00      	cmp	r3, #0
 8006858:	d005      	beq.n	8006866 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f043 0202 	orr.w	r2, r3, #2
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	330c      	adds	r3, #12
 800686a:	2202      	movs	r2, #2
 800686c:	4619      	mov	r1, r3
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f8eb 	bl	8006a4a <USBD_CtlSendData>
      break;
 8006874:	e004      	b.n	8006880 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f875 	bl	8006968 <USBD_CtlError>
      break;
 800687e:	bf00      	nop
  }
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	885b      	ldrh	r3, [r3, #2]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d106      	bne.n	80068a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 f92b 	bl	8006afe <USBD_CtlSendStatus>
  }
}
 80068a8:	bf00      	nop
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d80b      	bhi.n	80068e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	885b      	ldrh	r3, [r3, #2]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d10c      	bne.n	80068ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f910 	bl	8006afe <USBD_CtlSendStatus>
      }
      break;
 80068de:	e004      	b.n	80068ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f840 	bl	8006968 <USBD_CtlError>
      break;
 80068e8:	e000      	b.n	80068ec <USBD_ClrFeature+0x3c>
      break;
 80068ea:	bf00      	nop
  }
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	781a      	ldrb	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3301      	adds	r3, #1
 800690e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	781a      	ldrb	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3301      	adds	r3, #1
 800691c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7ff fabb 	bl	8005e9a <SWAPBYTE>
 8006924:	4603      	mov	r3, r0
 8006926:	461a      	mov	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	3301      	adds	r3, #1
 8006930:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3301      	adds	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f7ff faae 	bl	8005e9a <SWAPBYTE>
 800693e:	4603      	mov	r3, r0
 8006940:	461a      	mov	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3301      	adds	r3, #1
 800694a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3301      	adds	r3, #1
 8006950:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f7ff faa1 	bl	8005e9a <SWAPBYTE>
 8006958:	4603      	mov	r3, r0
 800695a:	461a      	mov	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	80da      	strh	r2, [r3, #6]
}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006972:	2180      	movs	r1, #128	; 0x80
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fce1 	bl	800733c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800697a:	2100      	movs	r1, #0
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fcdd 	bl	800733c <USBD_LL_StallEP>
}
 8006982:	bf00      	nop
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b086      	sub	sp, #24
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	60b9      	str	r1, [r7, #8]
 8006994:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d036      	beq.n	8006a0e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80069a4:	6938      	ldr	r0, [r7, #16]
 80069a6:	f000 f836 	bl	8006a16 <USBD_GetLen>
 80069aa:	4603      	mov	r3, r0
 80069ac:	3301      	adds	r3, #1
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	005b      	lsls	r3, r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	4413      	add	r3, r2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	7812      	ldrb	r2, [r2, #0]
 80069c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80069c4:	7dfb      	ldrb	r3, [r7, #23]
 80069c6:	3301      	adds	r3, #1
 80069c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	4413      	add	r3, r2
 80069d0:	2203      	movs	r2, #3
 80069d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80069d4:	7dfb      	ldrb	r3, [r7, #23]
 80069d6:	3301      	adds	r3, #1
 80069d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80069da:	e013      	b.n	8006a04 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	4413      	add	r3, r2
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	7812      	ldrb	r2, [r2, #0]
 80069e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	3301      	adds	r3, #1
 80069ec:	613b      	str	r3, [r7, #16]
    idx++;
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	3301      	adds	r3, #1
 80069f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	4413      	add	r3, r2
 80069fa:	2200      	movs	r2, #0
 80069fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80069fe:	7dfb      	ldrb	r3, [r7, #23]
 8006a00:	3301      	adds	r3, #1
 8006a02:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e7      	bne.n	80069dc <USBD_GetString+0x52>
 8006a0c:	e000      	b.n	8006a10 <USBD_GetString+0x86>
    return;
 8006a0e:	bf00      	nop
  }
}
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b085      	sub	sp, #20
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006a26:	e005      	b.n	8006a34 <USBD_GetLen+0x1e>
  {
    len++;
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	3301      	adds	r3, #1
 8006a32:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1f5      	bne.n	8006a28 <USBD_GetLen+0x12>
  }

  return len;
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2202      	movs	r2, #2
 8006a5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	2100      	movs	r1, #0
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 fcec 	bl	800744e <USBD_LL_Transmit>

  return USBD_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	2100      	movs	r1, #0
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 fcdb 	bl	800744e <USBD_LL_Transmit>

  return USBD_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b084      	sub	sp, #16
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	2100      	movs	r1, #0
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 fcdf 	bl	8007490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	2100      	movs	r1, #0
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 fcce 	bl	8007490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b082      	sub	sp, #8
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2204      	movs	r2, #4
 8006b0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006b0e:	2300      	movs	r3, #0
 8006b10:	2200      	movs	r2, #0
 8006b12:	2100      	movs	r1, #0
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fc9a 	bl	800744e <USBD_LL_Transmit>

  return USBD_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2205      	movs	r2, #5
 8006b30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b34:	2300      	movs	r3, #0
 8006b36:	2200      	movs	r2, #0
 8006b38:	2100      	movs	r1, #0
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fca8 	bl	8007490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
	...

08006b4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006b50:	2200      	movs	r2, #0
 8006b52:	4912      	ldr	r1, [pc, #72]	; (8006b9c <MX_USB_DEVICE_Init+0x50>)
 8006b54:	4812      	ldr	r0, [pc, #72]	; (8006ba0 <MX_USB_DEVICE_Init+0x54>)
 8006b56:	f7fe fe8f 	bl	8005878 <USBD_Init>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006b60:	f7f9 fe66 	bl	8000830 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006b64:	490f      	ldr	r1, [pc, #60]	; (8006ba4 <MX_USB_DEVICE_Init+0x58>)
 8006b66:	480e      	ldr	r0, [pc, #56]	; (8006ba0 <MX_USB_DEVICE_Init+0x54>)
 8006b68:	f7fe feb6 	bl	80058d8 <USBD_RegisterClass>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006b72:	f7f9 fe5d 	bl	8000830 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006b76:	490c      	ldr	r1, [pc, #48]	; (8006ba8 <MX_USB_DEVICE_Init+0x5c>)
 8006b78:	4809      	ldr	r0, [pc, #36]	; (8006ba0 <MX_USB_DEVICE_Init+0x54>)
 8006b7a:	f7fe fdd7 	bl	800572c <USBD_CDC_RegisterInterface>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006b84:	f7f9 fe54 	bl	8000830 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006b88:	4805      	ldr	r0, [pc, #20]	; (8006ba0 <MX_USB_DEVICE_Init+0x54>)
 8006b8a:	f7fe fecc 	bl	8005926 <USBD_Start>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006b94:	f7f9 fe4c 	bl	8000830 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006b98:	bf00      	nop
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20000130 	.word	0x20000130
 8006ba0:	200024e0 	.word	0x200024e0
 8006ba4:	20000018 	.word	0x20000018
 8006ba8:	2000011c 	.word	0x2000011c

08006bac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	4905      	ldr	r1, [pc, #20]	; (8006bc8 <CDC_Init_FS+0x1c>)
 8006bb4:	4805      	ldr	r0, [pc, #20]	; (8006bcc <CDC_Init_FS+0x20>)
 8006bb6:	f7fe fdce 	bl	8005756 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006bba:	4905      	ldr	r1, [pc, #20]	; (8006bd0 <CDC_Init_FS+0x24>)
 8006bbc:	4803      	ldr	r0, [pc, #12]	; (8006bcc <CDC_Init_FS+0x20>)
 8006bbe:	f7fe fde8 	bl	8005792 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006bc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20002fb0 	.word	0x20002fb0
 8006bcc:	200024e0 	.word	0x200024e0
 8006bd0:	200027b0 	.word	0x200027b0

08006bd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006bd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	6039      	str	r1, [r7, #0]
 8006bee:	71fb      	strb	r3, [r7, #7]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	2b23      	cmp	r3, #35	; 0x23
 8006bf8:	d84a      	bhi.n	8006c90 <CDC_Control_FS+0xac>
 8006bfa:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <CDC_Control_FS+0x1c>)
 8006bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c00:	08006c91 	.word	0x08006c91
 8006c04:	08006c91 	.word	0x08006c91
 8006c08:	08006c91 	.word	0x08006c91
 8006c0c:	08006c91 	.word	0x08006c91
 8006c10:	08006c91 	.word	0x08006c91
 8006c14:	08006c91 	.word	0x08006c91
 8006c18:	08006c91 	.word	0x08006c91
 8006c1c:	08006c91 	.word	0x08006c91
 8006c20:	08006c91 	.word	0x08006c91
 8006c24:	08006c91 	.word	0x08006c91
 8006c28:	08006c91 	.word	0x08006c91
 8006c2c:	08006c91 	.word	0x08006c91
 8006c30:	08006c91 	.word	0x08006c91
 8006c34:	08006c91 	.word	0x08006c91
 8006c38:	08006c91 	.word	0x08006c91
 8006c3c:	08006c91 	.word	0x08006c91
 8006c40:	08006c91 	.word	0x08006c91
 8006c44:	08006c91 	.word	0x08006c91
 8006c48:	08006c91 	.word	0x08006c91
 8006c4c:	08006c91 	.word	0x08006c91
 8006c50:	08006c91 	.word	0x08006c91
 8006c54:	08006c91 	.word	0x08006c91
 8006c58:	08006c91 	.word	0x08006c91
 8006c5c:	08006c91 	.word	0x08006c91
 8006c60:	08006c91 	.word	0x08006c91
 8006c64:	08006c91 	.word	0x08006c91
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006c91 	.word	0x08006c91
 8006c70:	08006c91 	.word	0x08006c91
 8006c74:	08006c91 	.word	0x08006c91
 8006c78:	08006c91 	.word	0x08006c91
 8006c7c:	08006c91 	.word	0x08006c91
 8006c80:	08006c91 	.word	0x08006c91
 8006c84:	08006c91 	.word	0x08006c91
 8006c88:	08006c91 	.word	0x08006c91
 8006c8c:	08006c91 	.word	0x08006c91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006c90:	bf00      	nop
  }

  return (USBD_OK);
 8006c92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	4805      	ldr	r0, [pc, #20]	; (8006cc4 <CDC_Receive_FS+0x24>)
 8006cae:	f7fe fd70 	bl	8005792 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006cb2:	4804      	ldr	r0, [pc, #16]	; (8006cc4 <CDC_Receive_FS+0x24>)
 8006cb4:	f7fe fdb6 	bl	8005824 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006cb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	200024e0 	.word	0x200024e0

08006cc8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006cd8:	4b0d      	ldr	r3, [pc, #52]	; (8006d10 <CDC_Transmit_FS+0x48>)
 8006cda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cde:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e00b      	b.n	8006d06 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006cee:	887b      	ldrh	r3, [r7, #2]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6879      	ldr	r1, [r7, #4]
 8006cf4:	4806      	ldr	r0, [pc, #24]	; (8006d10 <CDC_Transmit_FS+0x48>)
 8006cf6:	f7fe fd2e 	bl	8005756 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006cfa:	4805      	ldr	r0, [pc, #20]	; (8006d10 <CDC_Transmit_FS+0x48>)
 8006cfc:	f7fe fd62 	bl	80057c4 <USBD_CDC_TransmitPacket>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	200024e0 	.word	0x200024e0

08006d14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
	...

08006d38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	4603      	mov	r3, r0
 8006d40:	6039      	str	r1, [r7, #0]
 8006d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2212      	movs	r2, #18
 8006d48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006d4a:	4b03      	ldr	r3, [pc, #12]	; (8006d58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	2000014c 	.word	0x2000014c

08006d5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	4603      	mov	r3, r0
 8006d64:	6039      	str	r1, [r7, #0]
 8006d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006d6e:	4b03      	ldr	r3, [pc, #12]	; (8006d7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	20000160 	.word	0x20000160

08006d80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	4603      	mov	r3, r0
 8006d88:	6039      	str	r1, [r7, #0]
 8006d8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d105      	bne.n	8006d9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	4907      	ldr	r1, [pc, #28]	; (8006db4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006d96:	4808      	ldr	r0, [pc, #32]	; (8006db8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006d98:	f7ff fdf7 	bl	800698a <USBD_GetString>
 8006d9c:	e004      	b.n	8006da8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	4904      	ldr	r1, [pc, #16]	; (8006db4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006da2:	4805      	ldr	r0, [pc, #20]	; (8006db8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006da4:	f7ff fdf1 	bl	800698a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006da8:	4b02      	ldr	r3, [pc, #8]	; (8006db4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	200037b0 	.word	0x200037b0
 8006db8:	08007e60 	.word	0x08007e60

08006dbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	6039      	str	r1, [r7, #0]
 8006dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	4904      	ldr	r1, [pc, #16]	; (8006ddc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006dcc:	4804      	ldr	r0, [pc, #16]	; (8006de0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006dce:	f7ff fddc 	bl	800698a <USBD_GetString>
  return USBD_StrDesc;
 8006dd2:	4b02      	ldr	r3, [pc, #8]	; (8006ddc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	200037b0 	.word	0x200037b0
 8006de0:	08007e78 	.word	0x08007e78

08006de4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	6039      	str	r1, [r7, #0]
 8006dee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	221a      	movs	r2, #26
 8006df4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006df6:	f000 f843 	bl	8006e80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006dfa:	4b02      	ldr	r3, [pc, #8]	; (8006e04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000164 	.word	0x20000164

08006e08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	4603      	mov	r3, r0
 8006e10:	6039      	str	r1, [r7, #0]
 8006e12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d105      	bne.n	8006e26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	4907      	ldr	r1, [pc, #28]	; (8006e3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e1e:	4808      	ldr	r0, [pc, #32]	; (8006e40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e20:	f7ff fdb3 	bl	800698a <USBD_GetString>
 8006e24:	e004      	b.n	8006e30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	4904      	ldr	r1, [pc, #16]	; (8006e3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006e2a:	4805      	ldr	r0, [pc, #20]	; (8006e40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006e2c:	f7ff fdad 	bl	800698a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e30:	4b02      	ldr	r3, [pc, #8]	; (8006e3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	200037b0 	.word	0x200037b0
 8006e40:	08007e8c 	.word	0x08007e8c

08006e44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	6039      	str	r1, [r7, #0]
 8006e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d105      	bne.n	8006e62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	4907      	ldr	r1, [pc, #28]	; (8006e78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e5a:	4808      	ldr	r0, [pc, #32]	; (8006e7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e5c:	f7ff fd95 	bl	800698a <USBD_GetString>
 8006e60:	e004      	b.n	8006e6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	4904      	ldr	r1, [pc, #16]	; (8006e78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006e66:	4805      	ldr	r0, [pc, #20]	; (8006e7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006e68:	f7ff fd8f 	bl	800698a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e6c:	4b02      	ldr	r3, [pc, #8]	; (8006e78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	200037b0 	.word	0x200037b0
 8006e7c:	08007e98 	.word	0x08007e98

08006e80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006e86:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <Get_SerialNum+0x44>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006e8c:	4b0e      	ldr	r3, [pc, #56]	; (8006ec8 <Get_SerialNum+0x48>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006e92:	4b0e      	ldr	r3, [pc, #56]	; (8006ecc <Get_SerialNum+0x4c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d009      	beq.n	8006eba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006ea6:	2208      	movs	r2, #8
 8006ea8:	4909      	ldr	r1, [pc, #36]	; (8006ed0 <Get_SerialNum+0x50>)
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 f814 	bl	8006ed8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006eb0:	2204      	movs	r2, #4
 8006eb2:	4908      	ldr	r1, [pc, #32]	; (8006ed4 <Get_SerialNum+0x54>)
 8006eb4:	68b8      	ldr	r0, [r7, #8]
 8006eb6:	f000 f80f 	bl	8006ed8 <IntToUnicode>
  }
}
 8006eba:	bf00      	nop
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	1fff7a10 	.word	0x1fff7a10
 8006ec8:	1fff7a14 	.word	0x1fff7a14
 8006ecc:	1fff7a18 	.word	0x1fff7a18
 8006ed0:	20000166 	.word	0x20000166
 8006ed4:	20000176 	.word	0x20000176

08006ed8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006eea:	2300      	movs	r3, #0
 8006eec:	75fb      	strb	r3, [r7, #23]
 8006eee:	e027      	b.n	8006f40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	0f1b      	lsrs	r3, r3, #28
 8006ef4:	2b09      	cmp	r3, #9
 8006ef6:	d80b      	bhi.n	8006f10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	0f1b      	lsrs	r3, r3, #28
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	4619      	mov	r1, r3
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	440b      	add	r3, r1
 8006f08:	3230      	adds	r2, #48	; 0x30
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	e00a      	b.n	8006f26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	0f1b      	lsrs	r3, r3, #28
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	440b      	add	r3, r1
 8006f20:	3237      	adds	r2, #55	; 0x37
 8006f22:	b2d2      	uxtb	r2, r2
 8006f24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	011b      	lsls	r3, r3, #4
 8006f2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	3301      	adds	r3, #1
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	4413      	add	r3, r2
 8006f36:	2200      	movs	r2, #0
 8006f38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006f3a:	7dfb      	ldrb	r3, [r7, #23]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	75fb      	strb	r3, [r7, #23]
 8006f40:	7dfa      	ldrb	r2, [r7, #23]
 8006f42:	79fb      	ldrb	r3, [r7, #7]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d3d3      	bcc.n	8006ef0 <IntToUnicode+0x18>
  }
}
 8006f48:	bf00      	nop
 8006f4a:	bf00      	nop
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
	...

08006f58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08a      	sub	sp, #40	; 0x28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f60:	f107 0314 	add.w	r3, r7, #20
 8006f64:	2200      	movs	r2, #0
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	605a      	str	r2, [r3, #4]
 8006f6a:	609a      	str	r2, [r3, #8]
 8006f6c:	60da      	str	r2, [r3, #12]
 8006f6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f78:	d13a      	bne.n	8006ff0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	4b1e      	ldr	r3, [pc, #120]	; (8006ff8 <HAL_PCD_MspInit+0xa0>)
 8006f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f82:	4a1d      	ldr	r2, [pc, #116]	; (8006ff8 <HAL_PCD_MspInit+0xa0>)
 8006f84:	f043 0301 	orr.w	r3, r3, #1
 8006f88:	6313      	str	r3, [r2, #48]	; 0x30
 8006f8a:	4b1b      	ldr	r3, [pc, #108]	; (8006ff8 <HAL_PCD_MspInit+0xa0>)
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006f96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006fa8:	230a      	movs	r3, #10
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fac:	f107 0314 	add.w	r3, r7, #20
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4812      	ldr	r0, [pc, #72]	; (8006ffc <HAL_PCD_MspInit+0xa4>)
 8006fb4:	f7fa fea8 	bl	8001d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006fb8:	4b0f      	ldr	r3, [pc, #60]	; (8006ff8 <HAL_PCD_MspInit+0xa0>)
 8006fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbc:	4a0e      	ldr	r2, [pc, #56]	; (8006ff8 <HAL_PCD_MspInit+0xa0>)
 8006fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc2:	6353      	str	r3, [r2, #52]	; 0x34
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	; (8006ff8 <HAL_PCD_MspInit+0xa0>)
 8006fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fcc:	4a0a      	ldr	r2, [pc, #40]	; (8006ff8 <HAL_PCD_MspInit+0xa0>)
 8006fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8006fd4:	4b08      	ldr	r3, [pc, #32]	; (8006ff8 <HAL_PCD_MspInit+0xa0>)
 8006fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	2043      	movs	r0, #67	; 0x43
 8006fe6:	f7fa fae8 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006fea:	2043      	movs	r0, #67	; 0x43
 8006fec:	f7fa fb01 	bl	80015f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ff0:	bf00      	nop
 8006ff2:	3728      	adds	r7, #40	; 0x28
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	40023800 	.word	0x40023800
 8006ffc:	40020000 	.word	0x40020000

08007000 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007014:	4619      	mov	r1, r3
 8007016:	4610      	mov	r0, r2
 8007018:	f7fe fcd0 	bl	80059bc <USBD_LL_SetupStage>
}
 800701c:	bf00      	nop
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	460b      	mov	r3, r1
 800702e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007036:	78fa      	ldrb	r2, [r7, #3]
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	1a9b      	subs	r3, r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	78fb      	ldrb	r3, [r7, #3]
 800704c:	4619      	mov	r1, r3
 800704e:	f7fe fd0a 	bl	8005a66 <USBD_LL_DataOutStage>
}
 8007052:	bf00      	nop
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	460b      	mov	r3, r1
 8007064:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800706c:	78fa      	ldrb	r2, [r7, #3]
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	4613      	mov	r3, r2
 8007072:	00db      	lsls	r3, r3, #3
 8007074:	1a9b      	subs	r3, r3, r2
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	440b      	add	r3, r1
 800707a:	3348      	adds	r3, #72	; 0x48
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	78fb      	ldrb	r3, [r7, #3]
 8007080:	4619      	mov	r1, r3
 8007082:	f7fe fd53 	bl	8005b2c <USBD_LL_DataInStage>
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b082      	sub	sp, #8
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800709c:	4618      	mov	r0, r3
 800709e:	f7fe fe67 	bl	8005d70 <USBD_LL_SOF>
}
 80070a2:	bf00      	nop
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80070b2:	2301      	movs	r3, #1
 80070b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d102      	bne.n	80070c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80070be:	2300      	movs	r3, #0
 80070c0:	73fb      	strb	r3, [r7, #15]
 80070c2:	e008      	b.n	80070d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d102      	bne.n	80070d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80070cc:	2301      	movs	r3, #1
 80070ce:	73fb      	strb	r3, [r7, #15]
 80070d0:	e001      	b.n	80070d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80070d2:	f7f9 fbad 	bl	8000830 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070dc:	7bfa      	ldrb	r2, [r7, #15]
 80070de:	4611      	mov	r1, r2
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe fe07 	bl	8005cf4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fe fdb3 	bl	8005c58 <USBD_LL_Reset>
}
 80070f2:	bf00      	nop
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fe02 	bl	8005d14 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	6812      	ldr	r2, [r2, #0]
 800711e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007122:	f043 0301 	orr.w	r3, r3, #1
 8007126:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007130:	4b04      	ldr	r3, [pc, #16]	; (8007144 <HAL_PCD_SuspendCallback+0x48>)
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	4a03      	ldr	r2, [pc, #12]	; (8007144 <HAL_PCD_SuspendCallback+0x48>)
 8007136:	f043 0306 	orr.w	r3, r3, #6
 800713a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800713c:	bf00      	nop
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	e000ed00 	.word	0xe000ed00

08007148 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fdf2 	bl	8005d40 <USBD_LL_Resume>
}
 800715c:	bf00      	nop
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007176:	78fa      	ldrb	r2, [r7, #3]
 8007178:	4611      	mov	r1, r2
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe fe40 	bl	8005e00 <USBD_LL_IsoOUTIncomplete>
}
 8007180:	bf00      	nop
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800719a:	78fa      	ldrb	r2, [r7, #3]
 800719c:	4611      	mov	r1, r2
 800719e:	4618      	mov	r0, r3
 80071a0:	f7fe fe08 	bl	8005db4 <USBD_LL_IsoINIncomplete>
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe fe46 	bl	8005e4c <USBD_LL_DevConnected>
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fe43 	bl	8005e62 <USBD_LL_DevDisconnected>
}
 80071dc:	bf00      	nop
 80071de:	3708      	adds	r7, #8
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d13c      	bne.n	800726e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80071f4:	4a20      	ldr	r2, [pc, #128]	; (8007278 <USBD_LL_Init+0x94>)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a1e      	ldr	r2, [pc, #120]	; (8007278 <USBD_LL_Init+0x94>)
 8007200:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007204:	4b1c      	ldr	r3, [pc, #112]	; (8007278 <USBD_LL_Init+0x94>)
 8007206:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800720a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800720c:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <USBD_LL_Init+0x94>)
 800720e:	2204      	movs	r2, #4
 8007210:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007212:	4b19      	ldr	r3, [pc, #100]	; (8007278 <USBD_LL_Init+0x94>)
 8007214:	2202      	movs	r2, #2
 8007216:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007218:	4b17      	ldr	r3, [pc, #92]	; (8007278 <USBD_LL_Init+0x94>)
 800721a:	2200      	movs	r2, #0
 800721c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800721e:	4b16      	ldr	r3, [pc, #88]	; (8007278 <USBD_LL_Init+0x94>)
 8007220:	2202      	movs	r2, #2
 8007222:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007224:	4b14      	ldr	r3, [pc, #80]	; (8007278 <USBD_LL_Init+0x94>)
 8007226:	2200      	movs	r2, #0
 8007228:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800722a:	4b13      	ldr	r3, [pc, #76]	; (8007278 <USBD_LL_Init+0x94>)
 800722c:	2200      	movs	r2, #0
 800722e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007230:	4b11      	ldr	r3, [pc, #68]	; (8007278 <USBD_LL_Init+0x94>)
 8007232:	2200      	movs	r2, #0
 8007234:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007236:	4b10      	ldr	r3, [pc, #64]	; (8007278 <USBD_LL_Init+0x94>)
 8007238:	2200      	movs	r2, #0
 800723a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800723c:	4b0e      	ldr	r3, [pc, #56]	; (8007278 <USBD_LL_Init+0x94>)
 800723e:	2200      	movs	r2, #0
 8007240:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007242:	480d      	ldr	r0, [pc, #52]	; (8007278 <USBD_LL_Init+0x94>)
 8007244:	f7fa fefc 	bl	8002040 <HAL_PCD_Init>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800724e:	f7f9 faef 	bl	8000830 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007252:	2180      	movs	r1, #128	; 0x80
 8007254:	4808      	ldr	r0, [pc, #32]	; (8007278 <USBD_LL_Init+0x94>)
 8007256:	f7fc f85a 	bl	800330e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800725a:	2240      	movs	r2, #64	; 0x40
 800725c:	2100      	movs	r1, #0
 800725e:	4806      	ldr	r0, [pc, #24]	; (8007278 <USBD_LL_Init+0x94>)
 8007260:	f7fc f80e 	bl	8003280 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007264:	2280      	movs	r2, #128	; 0x80
 8007266:	2101      	movs	r1, #1
 8007268:	4803      	ldr	r0, [pc, #12]	; (8007278 <USBD_LL_Init+0x94>)
 800726a:	f7fc f809 	bl	8003280 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	200039b0 	.word	0x200039b0

0800727c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007292:	4618      	mov	r0, r3
 8007294:	f7fa fff1 	bl	800227a <HAL_PCD_Start>
 8007298:	4603      	mov	r3, r0
 800729a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 f942 	bl	8007528 <USBD_Get_USB_Status>
 80072a4:	4603      	mov	r3, r0
 80072a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	4608      	mov	r0, r1
 80072bc:	4611      	mov	r1, r2
 80072be:	461a      	mov	r2, r3
 80072c0:	4603      	mov	r3, r0
 80072c2:	70fb      	strb	r3, [r7, #3]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70bb      	strb	r3, [r7, #2]
 80072c8:	4613      	mov	r3, r2
 80072ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80072da:	78bb      	ldrb	r3, [r7, #2]
 80072dc:	883a      	ldrh	r2, [r7, #0]
 80072de:	78f9      	ldrb	r1, [r7, #3]
 80072e0:	f7fb fbd5 	bl	8002a8e <HAL_PCD_EP_Open>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 f91c 	bl	8007528 <USBD_Get_USB_Status>
 80072f0:	4603      	mov	r3, r0
 80072f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007318:	78fa      	ldrb	r2, [r7, #3]
 800731a:	4611      	mov	r1, r2
 800731c:	4618      	mov	r0, r3
 800731e:	f7fb fc1e 	bl	8002b5e <HAL_PCD_EP_Close>
 8007322:	4603      	mov	r3, r0
 8007324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	4618      	mov	r0, r3
 800732a:	f000 f8fd 	bl	8007528 <USBD_Get_USB_Status>
 800732e:	4603      	mov	r3, r0
 8007330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007332:	7bbb      	ldrb	r3, [r7, #14]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007356:	78fa      	ldrb	r2, [r7, #3]
 8007358:	4611      	mov	r1, r2
 800735a:	4618      	mov	r0, r3
 800735c:	f7fb fcf6 	bl	8002d4c <HAL_PCD_EP_SetStall>
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	4618      	mov	r0, r3
 8007368:	f000 f8de 	bl	8007528 <USBD_Get_USB_Status>
 800736c:	4603      	mov	r3, r0
 800736e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007370:	7bbb      	ldrb	r3, [r7, #14]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	460b      	mov	r3, r1
 8007384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007394:	78fa      	ldrb	r2, [r7, #3]
 8007396:	4611      	mov	r1, r2
 8007398:	4618      	mov	r0, r3
 800739a:	f7fb fd3b 	bl	8002e14 <HAL_PCD_EP_ClrStall>
 800739e:	4603      	mov	r3, r0
 80073a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 f8bf 	bl	8007528 <USBD_Get_USB_Status>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80073cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	da0b      	bge.n	80073ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073da:	68f9      	ldr	r1, [r7, #12]
 80073dc:	4613      	mov	r3, r2
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	1a9b      	subs	r3, r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	440b      	add	r3, r1
 80073e6:	333e      	adds	r3, #62	; 0x3e
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	e00b      	b.n	8007404 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073ec:	78fb      	ldrb	r3, [r7, #3]
 80073ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073f2:	68f9      	ldr	r1, [r7, #12]
 80073f4:	4613      	mov	r3, r2
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	1a9b      	subs	r3, r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007402:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800742a:	78fa      	ldrb	r2, [r7, #3]
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f7fb fb08 	bl	8002a44 <HAL_PCD_SetAddress>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 f874 	bl	8007528 <USBD_Get_USB_Status>
 8007440:	4603      	mov	r3, r0
 8007442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007444:	7bbb      	ldrb	r3, [r7, #14]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b086      	sub	sp, #24
 8007452:	af00      	add	r7, sp, #0
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
 800745a:	460b      	mov	r3, r1
 800745c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800746c:	7af9      	ldrb	r1, [r7, #11]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	f7fb fc21 	bl	8002cb8 <HAL_PCD_EP_Transmit>
 8007476:	4603      	mov	r3, r0
 8007478:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800747a:	7dfb      	ldrb	r3, [r7, #23]
 800747c:	4618      	mov	r0, r3
 800747e:	f000 f853 	bl	8007528 <USBD_Get_USB_Status>
 8007482:	4603      	mov	r3, r0
 8007484:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007486:	7dbb      	ldrb	r3, [r7, #22]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3718      	adds	r7, #24
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	460b      	mov	r3, r1
 800749e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80074ae:	7af9      	ldrb	r1, [r7, #11]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	f7fb fb9d 	bl	8002bf2 <HAL_PCD_EP_Receive>
 80074b8:	4603      	mov	r3, r0
 80074ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074bc:	7dfb      	ldrb	r3, [r7, #23]
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 f832 	bl	8007528 <USBD_Get_USB_Status>
 80074c4:	4603      	mov	r3, r0
 80074c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80074c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b082      	sub	sp, #8
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	460b      	mov	r3, r1
 80074dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074e4:	78fa      	ldrb	r2, [r7, #3]
 80074e6:	4611      	mov	r1, r2
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fb fbcd 	bl	8002c88 <HAL_PCD_EP_GetRxCount>
 80074ee:	4603      	mov	r3, r0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007500:	4b03      	ldr	r3, [pc, #12]	; (8007510 <USBD_static_malloc+0x18>)
}
 8007502:	4618      	mov	r0, r3
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
 800750e:	bf00      	nop
 8007510:	2000020c 	.word	0x2000020c

08007514 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]

}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007536:	79fb      	ldrb	r3, [r7, #7]
 8007538:	2b03      	cmp	r3, #3
 800753a:	d817      	bhi.n	800756c <USBD_Get_USB_Status+0x44>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <USBD_Get_USB_Status+0x1c>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007555 	.word	0x08007555
 8007548:	0800755b 	.word	0x0800755b
 800754c:	08007561 	.word	0x08007561
 8007550:	08007567 	.word	0x08007567
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	73fb      	strb	r3, [r7, #15]
    break;
 8007558:	e00b      	b.n	8007572 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800755a:	2303      	movs	r3, #3
 800755c:	73fb      	strb	r3, [r7, #15]
    break;
 800755e:	e008      	b.n	8007572 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007560:	2301      	movs	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
    break;
 8007564:	e005      	b.n	8007572 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007566:	2303      	movs	r3, #3
 8007568:	73fb      	strb	r3, [r7, #15]
    break;
 800756a:	e002      	b.n	8007572 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800756c:	2303      	movs	r3, #3
 800756e:	73fb      	strb	r3, [r7, #15]
    break;
 8007570:	bf00      	nop
  }
  return usb_status;
 8007572:	7bfb      	ldrb	r3, [r7, #15]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <__errno>:
 8007580:	4b01      	ldr	r3, [pc, #4]	; (8007588 <__errno+0x8>)
 8007582:	6818      	ldr	r0, [r3, #0]
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	20000180 	.word	0x20000180

0800758c <__libc_init_array>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4d0d      	ldr	r5, [pc, #52]	; (80075c4 <__libc_init_array+0x38>)
 8007590:	4c0d      	ldr	r4, [pc, #52]	; (80075c8 <__libc_init_array+0x3c>)
 8007592:	1b64      	subs	r4, r4, r5
 8007594:	10a4      	asrs	r4, r4, #2
 8007596:	2600      	movs	r6, #0
 8007598:	42a6      	cmp	r6, r4
 800759a:	d109      	bne.n	80075b0 <__libc_init_array+0x24>
 800759c:	4d0b      	ldr	r5, [pc, #44]	; (80075cc <__libc_init_array+0x40>)
 800759e:	4c0c      	ldr	r4, [pc, #48]	; (80075d0 <__libc_init_array+0x44>)
 80075a0:	f000 fc4e 	bl	8007e40 <_init>
 80075a4:	1b64      	subs	r4, r4, r5
 80075a6:	10a4      	asrs	r4, r4, #2
 80075a8:	2600      	movs	r6, #0
 80075aa:	42a6      	cmp	r6, r4
 80075ac:	d105      	bne.n	80075ba <__libc_init_array+0x2e>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b4:	4798      	blx	r3
 80075b6:	3601      	adds	r6, #1
 80075b8:	e7ee      	b.n	8007598 <__libc_init_array+0xc>
 80075ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80075be:	4798      	blx	r3
 80075c0:	3601      	adds	r6, #1
 80075c2:	e7f2      	b.n	80075aa <__libc_init_array+0x1e>
 80075c4:	08007efc 	.word	0x08007efc
 80075c8:	08007efc 	.word	0x08007efc
 80075cc:	08007efc 	.word	0x08007efc
 80075d0:	08007f00 	.word	0x08007f00

080075d4 <memset>:
 80075d4:	4402      	add	r2, r0
 80075d6:	4603      	mov	r3, r0
 80075d8:	4293      	cmp	r3, r2
 80075da:	d100      	bne.n	80075de <memset+0xa>
 80075dc:	4770      	bx	lr
 80075de:	f803 1b01 	strb.w	r1, [r3], #1
 80075e2:	e7f9      	b.n	80075d8 <memset+0x4>

080075e4 <siprintf>:
 80075e4:	b40e      	push	{r1, r2, r3}
 80075e6:	b500      	push	{lr}
 80075e8:	b09c      	sub	sp, #112	; 0x70
 80075ea:	ab1d      	add	r3, sp, #116	; 0x74
 80075ec:	9002      	str	r0, [sp, #8]
 80075ee:	9006      	str	r0, [sp, #24]
 80075f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075f4:	4809      	ldr	r0, [pc, #36]	; (800761c <siprintf+0x38>)
 80075f6:	9107      	str	r1, [sp, #28]
 80075f8:	9104      	str	r1, [sp, #16]
 80075fa:	4909      	ldr	r1, [pc, #36]	; (8007620 <siprintf+0x3c>)
 80075fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007600:	9105      	str	r1, [sp, #20]
 8007602:	6800      	ldr	r0, [r0, #0]
 8007604:	9301      	str	r3, [sp, #4]
 8007606:	a902      	add	r1, sp, #8
 8007608:	f000 f868 	bl	80076dc <_svfiprintf_r>
 800760c:	9b02      	ldr	r3, [sp, #8]
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	b01c      	add	sp, #112	; 0x70
 8007614:	f85d eb04 	ldr.w	lr, [sp], #4
 8007618:	b003      	add	sp, #12
 800761a:	4770      	bx	lr
 800761c:	20000180 	.word	0x20000180
 8007620:	ffff0208 	.word	0xffff0208

08007624 <__ssputs_r>:
 8007624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007628:	688e      	ldr	r6, [r1, #8]
 800762a:	429e      	cmp	r6, r3
 800762c:	4682      	mov	sl, r0
 800762e:	460c      	mov	r4, r1
 8007630:	4690      	mov	r8, r2
 8007632:	461f      	mov	r7, r3
 8007634:	d838      	bhi.n	80076a8 <__ssputs_r+0x84>
 8007636:	898a      	ldrh	r2, [r1, #12]
 8007638:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800763c:	d032      	beq.n	80076a4 <__ssputs_r+0x80>
 800763e:	6825      	ldr	r5, [r4, #0]
 8007640:	6909      	ldr	r1, [r1, #16]
 8007642:	eba5 0901 	sub.w	r9, r5, r1
 8007646:	6965      	ldr	r5, [r4, #20]
 8007648:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800764c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007650:	3301      	adds	r3, #1
 8007652:	444b      	add	r3, r9
 8007654:	106d      	asrs	r5, r5, #1
 8007656:	429d      	cmp	r5, r3
 8007658:	bf38      	it	cc
 800765a:	461d      	movcc	r5, r3
 800765c:	0553      	lsls	r3, r2, #21
 800765e:	d531      	bpl.n	80076c4 <__ssputs_r+0xa0>
 8007660:	4629      	mov	r1, r5
 8007662:	f000 fb47 	bl	8007cf4 <_malloc_r>
 8007666:	4606      	mov	r6, r0
 8007668:	b950      	cbnz	r0, 8007680 <__ssputs_r+0x5c>
 800766a:	230c      	movs	r3, #12
 800766c:	f8ca 3000 	str.w	r3, [sl]
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007676:	81a3      	strh	r3, [r4, #12]
 8007678:	f04f 30ff 	mov.w	r0, #4294967295
 800767c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007680:	6921      	ldr	r1, [r4, #16]
 8007682:	464a      	mov	r2, r9
 8007684:	f000 fabe 	bl	8007c04 <memcpy>
 8007688:	89a3      	ldrh	r3, [r4, #12]
 800768a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800768e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007692:	81a3      	strh	r3, [r4, #12]
 8007694:	6126      	str	r6, [r4, #16]
 8007696:	6165      	str	r5, [r4, #20]
 8007698:	444e      	add	r6, r9
 800769a:	eba5 0509 	sub.w	r5, r5, r9
 800769e:	6026      	str	r6, [r4, #0]
 80076a0:	60a5      	str	r5, [r4, #8]
 80076a2:	463e      	mov	r6, r7
 80076a4:	42be      	cmp	r6, r7
 80076a6:	d900      	bls.n	80076aa <__ssputs_r+0x86>
 80076a8:	463e      	mov	r6, r7
 80076aa:	4632      	mov	r2, r6
 80076ac:	6820      	ldr	r0, [r4, #0]
 80076ae:	4641      	mov	r1, r8
 80076b0:	f000 fab6 	bl	8007c20 <memmove>
 80076b4:	68a3      	ldr	r3, [r4, #8]
 80076b6:	6822      	ldr	r2, [r4, #0]
 80076b8:	1b9b      	subs	r3, r3, r6
 80076ba:	4432      	add	r2, r6
 80076bc:	60a3      	str	r3, [r4, #8]
 80076be:	6022      	str	r2, [r4, #0]
 80076c0:	2000      	movs	r0, #0
 80076c2:	e7db      	b.n	800767c <__ssputs_r+0x58>
 80076c4:	462a      	mov	r2, r5
 80076c6:	f000 fb6f 	bl	8007da8 <_realloc_r>
 80076ca:	4606      	mov	r6, r0
 80076cc:	2800      	cmp	r0, #0
 80076ce:	d1e1      	bne.n	8007694 <__ssputs_r+0x70>
 80076d0:	6921      	ldr	r1, [r4, #16]
 80076d2:	4650      	mov	r0, sl
 80076d4:	f000 fabe 	bl	8007c54 <_free_r>
 80076d8:	e7c7      	b.n	800766a <__ssputs_r+0x46>
	...

080076dc <_svfiprintf_r>:
 80076dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e0:	4698      	mov	r8, r3
 80076e2:	898b      	ldrh	r3, [r1, #12]
 80076e4:	061b      	lsls	r3, r3, #24
 80076e6:	b09d      	sub	sp, #116	; 0x74
 80076e8:	4607      	mov	r7, r0
 80076ea:	460d      	mov	r5, r1
 80076ec:	4614      	mov	r4, r2
 80076ee:	d50e      	bpl.n	800770e <_svfiprintf_r+0x32>
 80076f0:	690b      	ldr	r3, [r1, #16]
 80076f2:	b963      	cbnz	r3, 800770e <_svfiprintf_r+0x32>
 80076f4:	2140      	movs	r1, #64	; 0x40
 80076f6:	f000 fafd 	bl	8007cf4 <_malloc_r>
 80076fa:	6028      	str	r0, [r5, #0]
 80076fc:	6128      	str	r0, [r5, #16]
 80076fe:	b920      	cbnz	r0, 800770a <_svfiprintf_r+0x2e>
 8007700:	230c      	movs	r3, #12
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	f04f 30ff 	mov.w	r0, #4294967295
 8007708:	e0d1      	b.n	80078ae <_svfiprintf_r+0x1d2>
 800770a:	2340      	movs	r3, #64	; 0x40
 800770c:	616b      	str	r3, [r5, #20]
 800770e:	2300      	movs	r3, #0
 8007710:	9309      	str	r3, [sp, #36]	; 0x24
 8007712:	2320      	movs	r3, #32
 8007714:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007718:	f8cd 800c 	str.w	r8, [sp, #12]
 800771c:	2330      	movs	r3, #48	; 0x30
 800771e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80078c8 <_svfiprintf_r+0x1ec>
 8007722:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007726:	f04f 0901 	mov.w	r9, #1
 800772a:	4623      	mov	r3, r4
 800772c:	469a      	mov	sl, r3
 800772e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007732:	b10a      	cbz	r2, 8007738 <_svfiprintf_r+0x5c>
 8007734:	2a25      	cmp	r2, #37	; 0x25
 8007736:	d1f9      	bne.n	800772c <_svfiprintf_r+0x50>
 8007738:	ebba 0b04 	subs.w	fp, sl, r4
 800773c:	d00b      	beq.n	8007756 <_svfiprintf_r+0x7a>
 800773e:	465b      	mov	r3, fp
 8007740:	4622      	mov	r2, r4
 8007742:	4629      	mov	r1, r5
 8007744:	4638      	mov	r0, r7
 8007746:	f7ff ff6d 	bl	8007624 <__ssputs_r>
 800774a:	3001      	adds	r0, #1
 800774c:	f000 80aa 	beq.w	80078a4 <_svfiprintf_r+0x1c8>
 8007750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007752:	445a      	add	r2, fp
 8007754:	9209      	str	r2, [sp, #36]	; 0x24
 8007756:	f89a 3000 	ldrb.w	r3, [sl]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 80a2 	beq.w	80078a4 <_svfiprintf_r+0x1c8>
 8007760:	2300      	movs	r3, #0
 8007762:	f04f 32ff 	mov.w	r2, #4294967295
 8007766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800776a:	f10a 0a01 	add.w	sl, sl, #1
 800776e:	9304      	str	r3, [sp, #16]
 8007770:	9307      	str	r3, [sp, #28]
 8007772:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007776:	931a      	str	r3, [sp, #104]	; 0x68
 8007778:	4654      	mov	r4, sl
 800777a:	2205      	movs	r2, #5
 800777c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007780:	4851      	ldr	r0, [pc, #324]	; (80078c8 <_svfiprintf_r+0x1ec>)
 8007782:	f7f8 fd2d 	bl	80001e0 <memchr>
 8007786:	9a04      	ldr	r2, [sp, #16]
 8007788:	b9d8      	cbnz	r0, 80077c2 <_svfiprintf_r+0xe6>
 800778a:	06d0      	lsls	r0, r2, #27
 800778c:	bf44      	itt	mi
 800778e:	2320      	movmi	r3, #32
 8007790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007794:	0711      	lsls	r1, r2, #28
 8007796:	bf44      	itt	mi
 8007798:	232b      	movmi	r3, #43	; 0x2b
 800779a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800779e:	f89a 3000 	ldrb.w	r3, [sl]
 80077a2:	2b2a      	cmp	r3, #42	; 0x2a
 80077a4:	d015      	beq.n	80077d2 <_svfiprintf_r+0xf6>
 80077a6:	9a07      	ldr	r2, [sp, #28]
 80077a8:	4654      	mov	r4, sl
 80077aa:	2000      	movs	r0, #0
 80077ac:	f04f 0c0a 	mov.w	ip, #10
 80077b0:	4621      	mov	r1, r4
 80077b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077b6:	3b30      	subs	r3, #48	; 0x30
 80077b8:	2b09      	cmp	r3, #9
 80077ba:	d94e      	bls.n	800785a <_svfiprintf_r+0x17e>
 80077bc:	b1b0      	cbz	r0, 80077ec <_svfiprintf_r+0x110>
 80077be:	9207      	str	r2, [sp, #28]
 80077c0:	e014      	b.n	80077ec <_svfiprintf_r+0x110>
 80077c2:	eba0 0308 	sub.w	r3, r0, r8
 80077c6:	fa09 f303 	lsl.w	r3, r9, r3
 80077ca:	4313      	orrs	r3, r2
 80077cc:	9304      	str	r3, [sp, #16]
 80077ce:	46a2      	mov	sl, r4
 80077d0:	e7d2      	b.n	8007778 <_svfiprintf_r+0x9c>
 80077d2:	9b03      	ldr	r3, [sp, #12]
 80077d4:	1d19      	adds	r1, r3, #4
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	9103      	str	r1, [sp, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	bfbb      	ittet	lt
 80077de:	425b      	neglt	r3, r3
 80077e0:	f042 0202 	orrlt.w	r2, r2, #2
 80077e4:	9307      	strge	r3, [sp, #28]
 80077e6:	9307      	strlt	r3, [sp, #28]
 80077e8:	bfb8      	it	lt
 80077ea:	9204      	strlt	r2, [sp, #16]
 80077ec:	7823      	ldrb	r3, [r4, #0]
 80077ee:	2b2e      	cmp	r3, #46	; 0x2e
 80077f0:	d10c      	bne.n	800780c <_svfiprintf_r+0x130>
 80077f2:	7863      	ldrb	r3, [r4, #1]
 80077f4:	2b2a      	cmp	r3, #42	; 0x2a
 80077f6:	d135      	bne.n	8007864 <_svfiprintf_r+0x188>
 80077f8:	9b03      	ldr	r3, [sp, #12]
 80077fa:	1d1a      	adds	r2, r3, #4
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	9203      	str	r2, [sp, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	bfb8      	it	lt
 8007804:	f04f 33ff 	movlt.w	r3, #4294967295
 8007808:	3402      	adds	r4, #2
 800780a:	9305      	str	r3, [sp, #20]
 800780c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80078d8 <_svfiprintf_r+0x1fc>
 8007810:	7821      	ldrb	r1, [r4, #0]
 8007812:	2203      	movs	r2, #3
 8007814:	4650      	mov	r0, sl
 8007816:	f7f8 fce3 	bl	80001e0 <memchr>
 800781a:	b140      	cbz	r0, 800782e <_svfiprintf_r+0x152>
 800781c:	2340      	movs	r3, #64	; 0x40
 800781e:	eba0 000a 	sub.w	r0, r0, sl
 8007822:	fa03 f000 	lsl.w	r0, r3, r0
 8007826:	9b04      	ldr	r3, [sp, #16]
 8007828:	4303      	orrs	r3, r0
 800782a:	3401      	adds	r4, #1
 800782c:	9304      	str	r3, [sp, #16]
 800782e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007832:	4826      	ldr	r0, [pc, #152]	; (80078cc <_svfiprintf_r+0x1f0>)
 8007834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007838:	2206      	movs	r2, #6
 800783a:	f7f8 fcd1 	bl	80001e0 <memchr>
 800783e:	2800      	cmp	r0, #0
 8007840:	d038      	beq.n	80078b4 <_svfiprintf_r+0x1d8>
 8007842:	4b23      	ldr	r3, [pc, #140]	; (80078d0 <_svfiprintf_r+0x1f4>)
 8007844:	bb1b      	cbnz	r3, 800788e <_svfiprintf_r+0x1b2>
 8007846:	9b03      	ldr	r3, [sp, #12]
 8007848:	3307      	adds	r3, #7
 800784a:	f023 0307 	bic.w	r3, r3, #7
 800784e:	3308      	adds	r3, #8
 8007850:	9303      	str	r3, [sp, #12]
 8007852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007854:	4433      	add	r3, r6
 8007856:	9309      	str	r3, [sp, #36]	; 0x24
 8007858:	e767      	b.n	800772a <_svfiprintf_r+0x4e>
 800785a:	fb0c 3202 	mla	r2, ip, r2, r3
 800785e:	460c      	mov	r4, r1
 8007860:	2001      	movs	r0, #1
 8007862:	e7a5      	b.n	80077b0 <_svfiprintf_r+0xd4>
 8007864:	2300      	movs	r3, #0
 8007866:	3401      	adds	r4, #1
 8007868:	9305      	str	r3, [sp, #20]
 800786a:	4619      	mov	r1, r3
 800786c:	f04f 0c0a 	mov.w	ip, #10
 8007870:	4620      	mov	r0, r4
 8007872:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007876:	3a30      	subs	r2, #48	; 0x30
 8007878:	2a09      	cmp	r2, #9
 800787a:	d903      	bls.n	8007884 <_svfiprintf_r+0x1a8>
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0c5      	beq.n	800780c <_svfiprintf_r+0x130>
 8007880:	9105      	str	r1, [sp, #20]
 8007882:	e7c3      	b.n	800780c <_svfiprintf_r+0x130>
 8007884:	fb0c 2101 	mla	r1, ip, r1, r2
 8007888:	4604      	mov	r4, r0
 800788a:	2301      	movs	r3, #1
 800788c:	e7f0      	b.n	8007870 <_svfiprintf_r+0x194>
 800788e:	ab03      	add	r3, sp, #12
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	462a      	mov	r2, r5
 8007894:	4b0f      	ldr	r3, [pc, #60]	; (80078d4 <_svfiprintf_r+0x1f8>)
 8007896:	a904      	add	r1, sp, #16
 8007898:	4638      	mov	r0, r7
 800789a:	f3af 8000 	nop.w
 800789e:	1c42      	adds	r2, r0, #1
 80078a0:	4606      	mov	r6, r0
 80078a2:	d1d6      	bne.n	8007852 <_svfiprintf_r+0x176>
 80078a4:	89ab      	ldrh	r3, [r5, #12]
 80078a6:	065b      	lsls	r3, r3, #25
 80078a8:	f53f af2c 	bmi.w	8007704 <_svfiprintf_r+0x28>
 80078ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078ae:	b01d      	add	sp, #116	; 0x74
 80078b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b4:	ab03      	add	r3, sp, #12
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	462a      	mov	r2, r5
 80078ba:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <_svfiprintf_r+0x1f8>)
 80078bc:	a904      	add	r1, sp, #16
 80078be:	4638      	mov	r0, r7
 80078c0:	f000 f87a 	bl	80079b8 <_printf_i>
 80078c4:	e7eb      	b.n	800789e <_svfiprintf_r+0x1c2>
 80078c6:	bf00      	nop
 80078c8:	08007ec0 	.word	0x08007ec0
 80078cc:	08007eca 	.word	0x08007eca
 80078d0:	00000000 	.word	0x00000000
 80078d4:	08007625 	.word	0x08007625
 80078d8:	08007ec6 	.word	0x08007ec6

080078dc <_printf_common>:
 80078dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e0:	4616      	mov	r6, r2
 80078e2:	4699      	mov	r9, r3
 80078e4:	688a      	ldr	r2, [r1, #8]
 80078e6:	690b      	ldr	r3, [r1, #16]
 80078e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078ec:	4293      	cmp	r3, r2
 80078ee:	bfb8      	it	lt
 80078f0:	4613      	movlt	r3, r2
 80078f2:	6033      	str	r3, [r6, #0]
 80078f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078f8:	4607      	mov	r7, r0
 80078fa:	460c      	mov	r4, r1
 80078fc:	b10a      	cbz	r2, 8007902 <_printf_common+0x26>
 80078fe:	3301      	adds	r3, #1
 8007900:	6033      	str	r3, [r6, #0]
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	0699      	lsls	r1, r3, #26
 8007906:	bf42      	ittt	mi
 8007908:	6833      	ldrmi	r3, [r6, #0]
 800790a:	3302      	addmi	r3, #2
 800790c:	6033      	strmi	r3, [r6, #0]
 800790e:	6825      	ldr	r5, [r4, #0]
 8007910:	f015 0506 	ands.w	r5, r5, #6
 8007914:	d106      	bne.n	8007924 <_printf_common+0x48>
 8007916:	f104 0a19 	add.w	sl, r4, #25
 800791a:	68e3      	ldr	r3, [r4, #12]
 800791c:	6832      	ldr	r2, [r6, #0]
 800791e:	1a9b      	subs	r3, r3, r2
 8007920:	42ab      	cmp	r3, r5
 8007922:	dc26      	bgt.n	8007972 <_printf_common+0x96>
 8007924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007928:	1e13      	subs	r3, r2, #0
 800792a:	6822      	ldr	r2, [r4, #0]
 800792c:	bf18      	it	ne
 800792e:	2301      	movne	r3, #1
 8007930:	0692      	lsls	r2, r2, #26
 8007932:	d42b      	bmi.n	800798c <_printf_common+0xb0>
 8007934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007938:	4649      	mov	r1, r9
 800793a:	4638      	mov	r0, r7
 800793c:	47c0      	blx	r8
 800793e:	3001      	adds	r0, #1
 8007940:	d01e      	beq.n	8007980 <_printf_common+0xa4>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	68e5      	ldr	r5, [r4, #12]
 8007946:	6832      	ldr	r2, [r6, #0]
 8007948:	f003 0306 	and.w	r3, r3, #6
 800794c:	2b04      	cmp	r3, #4
 800794e:	bf08      	it	eq
 8007950:	1aad      	subeq	r5, r5, r2
 8007952:	68a3      	ldr	r3, [r4, #8]
 8007954:	6922      	ldr	r2, [r4, #16]
 8007956:	bf0c      	ite	eq
 8007958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800795c:	2500      	movne	r5, #0
 800795e:	4293      	cmp	r3, r2
 8007960:	bfc4      	itt	gt
 8007962:	1a9b      	subgt	r3, r3, r2
 8007964:	18ed      	addgt	r5, r5, r3
 8007966:	2600      	movs	r6, #0
 8007968:	341a      	adds	r4, #26
 800796a:	42b5      	cmp	r5, r6
 800796c:	d11a      	bne.n	80079a4 <_printf_common+0xc8>
 800796e:	2000      	movs	r0, #0
 8007970:	e008      	b.n	8007984 <_printf_common+0xa8>
 8007972:	2301      	movs	r3, #1
 8007974:	4652      	mov	r2, sl
 8007976:	4649      	mov	r1, r9
 8007978:	4638      	mov	r0, r7
 800797a:	47c0      	blx	r8
 800797c:	3001      	adds	r0, #1
 800797e:	d103      	bne.n	8007988 <_printf_common+0xac>
 8007980:	f04f 30ff 	mov.w	r0, #4294967295
 8007984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007988:	3501      	adds	r5, #1
 800798a:	e7c6      	b.n	800791a <_printf_common+0x3e>
 800798c:	18e1      	adds	r1, r4, r3
 800798e:	1c5a      	adds	r2, r3, #1
 8007990:	2030      	movs	r0, #48	; 0x30
 8007992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007996:	4422      	add	r2, r4
 8007998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800799c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079a0:	3302      	adds	r3, #2
 80079a2:	e7c7      	b.n	8007934 <_printf_common+0x58>
 80079a4:	2301      	movs	r3, #1
 80079a6:	4622      	mov	r2, r4
 80079a8:	4649      	mov	r1, r9
 80079aa:	4638      	mov	r0, r7
 80079ac:	47c0      	blx	r8
 80079ae:	3001      	adds	r0, #1
 80079b0:	d0e6      	beq.n	8007980 <_printf_common+0xa4>
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7d9      	b.n	800796a <_printf_common+0x8e>
	...

080079b8 <_printf_i>:
 80079b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079bc:	460c      	mov	r4, r1
 80079be:	4691      	mov	r9, r2
 80079c0:	7e27      	ldrb	r7, [r4, #24]
 80079c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079c4:	2f78      	cmp	r7, #120	; 0x78
 80079c6:	4680      	mov	r8, r0
 80079c8:	469a      	mov	sl, r3
 80079ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079ce:	d807      	bhi.n	80079e0 <_printf_i+0x28>
 80079d0:	2f62      	cmp	r7, #98	; 0x62
 80079d2:	d80a      	bhi.n	80079ea <_printf_i+0x32>
 80079d4:	2f00      	cmp	r7, #0
 80079d6:	f000 80d8 	beq.w	8007b8a <_printf_i+0x1d2>
 80079da:	2f58      	cmp	r7, #88	; 0x58
 80079dc:	f000 80a3 	beq.w	8007b26 <_printf_i+0x16e>
 80079e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80079e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079e8:	e03a      	b.n	8007a60 <_printf_i+0xa8>
 80079ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079ee:	2b15      	cmp	r3, #21
 80079f0:	d8f6      	bhi.n	80079e0 <_printf_i+0x28>
 80079f2:	a001      	add	r0, pc, #4	; (adr r0, 80079f8 <_printf_i+0x40>)
 80079f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80079f8:	08007a51 	.word	0x08007a51
 80079fc:	08007a65 	.word	0x08007a65
 8007a00:	080079e1 	.word	0x080079e1
 8007a04:	080079e1 	.word	0x080079e1
 8007a08:	080079e1 	.word	0x080079e1
 8007a0c:	080079e1 	.word	0x080079e1
 8007a10:	08007a65 	.word	0x08007a65
 8007a14:	080079e1 	.word	0x080079e1
 8007a18:	080079e1 	.word	0x080079e1
 8007a1c:	080079e1 	.word	0x080079e1
 8007a20:	080079e1 	.word	0x080079e1
 8007a24:	08007b71 	.word	0x08007b71
 8007a28:	08007a95 	.word	0x08007a95
 8007a2c:	08007b53 	.word	0x08007b53
 8007a30:	080079e1 	.word	0x080079e1
 8007a34:	080079e1 	.word	0x080079e1
 8007a38:	08007b93 	.word	0x08007b93
 8007a3c:	080079e1 	.word	0x080079e1
 8007a40:	08007a95 	.word	0x08007a95
 8007a44:	080079e1 	.word	0x080079e1
 8007a48:	080079e1 	.word	0x080079e1
 8007a4c:	08007b5b 	.word	0x08007b5b
 8007a50:	680b      	ldr	r3, [r1, #0]
 8007a52:	1d1a      	adds	r2, r3, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	600a      	str	r2, [r1, #0]
 8007a58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a60:	2301      	movs	r3, #1
 8007a62:	e0a3      	b.n	8007bac <_printf_i+0x1f4>
 8007a64:	6825      	ldr	r5, [r4, #0]
 8007a66:	6808      	ldr	r0, [r1, #0]
 8007a68:	062e      	lsls	r6, r5, #24
 8007a6a:	f100 0304 	add.w	r3, r0, #4
 8007a6e:	d50a      	bpl.n	8007a86 <_printf_i+0xce>
 8007a70:	6805      	ldr	r5, [r0, #0]
 8007a72:	600b      	str	r3, [r1, #0]
 8007a74:	2d00      	cmp	r5, #0
 8007a76:	da03      	bge.n	8007a80 <_printf_i+0xc8>
 8007a78:	232d      	movs	r3, #45	; 0x2d
 8007a7a:	426d      	negs	r5, r5
 8007a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a80:	485e      	ldr	r0, [pc, #376]	; (8007bfc <_printf_i+0x244>)
 8007a82:	230a      	movs	r3, #10
 8007a84:	e019      	b.n	8007aba <_printf_i+0x102>
 8007a86:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007a8a:	6805      	ldr	r5, [r0, #0]
 8007a8c:	600b      	str	r3, [r1, #0]
 8007a8e:	bf18      	it	ne
 8007a90:	b22d      	sxthne	r5, r5
 8007a92:	e7ef      	b.n	8007a74 <_printf_i+0xbc>
 8007a94:	680b      	ldr	r3, [r1, #0]
 8007a96:	6825      	ldr	r5, [r4, #0]
 8007a98:	1d18      	adds	r0, r3, #4
 8007a9a:	6008      	str	r0, [r1, #0]
 8007a9c:	0628      	lsls	r0, r5, #24
 8007a9e:	d501      	bpl.n	8007aa4 <_printf_i+0xec>
 8007aa0:	681d      	ldr	r5, [r3, #0]
 8007aa2:	e002      	b.n	8007aaa <_printf_i+0xf2>
 8007aa4:	0669      	lsls	r1, r5, #25
 8007aa6:	d5fb      	bpl.n	8007aa0 <_printf_i+0xe8>
 8007aa8:	881d      	ldrh	r5, [r3, #0]
 8007aaa:	4854      	ldr	r0, [pc, #336]	; (8007bfc <_printf_i+0x244>)
 8007aac:	2f6f      	cmp	r7, #111	; 0x6f
 8007aae:	bf0c      	ite	eq
 8007ab0:	2308      	moveq	r3, #8
 8007ab2:	230a      	movne	r3, #10
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007aba:	6866      	ldr	r6, [r4, #4]
 8007abc:	60a6      	str	r6, [r4, #8]
 8007abe:	2e00      	cmp	r6, #0
 8007ac0:	bfa2      	ittt	ge
 8007ac2:	6821      	ldrge	r1, [r4, #0]
 8007ac4:	f021 0104 	bicge.w	r1, r1, #4
 8007ac8:	6021      	strge	r1, [r4, #0]
 8007aca:	b90d      	cbnz	r5, 8007ad0 <_printf_i+0x118>
 8007acc:	2e00      	cmp	r6, #0
 8007ace:	d04d      	beq.n	8007b6c <_printf_i+0x1b4>
 8007ad0:	4616      	mov	r6, r2
 8007ad2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ad6:	fb03 5711 	mls	r7, r3, r1, r5
 8007ada:	5dc7      	ldrb	r7, [r0, r7]
 8007adc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ae0:	462f      	mov	r7, r5
 8007ae2:	42bb      	cmp	r3, r7
 8007ae4:	460d      	mov	r5, r1
 8007ae6:	d9f4      	bls.n	8007ad2 <_printf_i+0x11a>
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d10b      	bne.n	8007b04 <_printf_i+0x14c>
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	07df      	lsls	r7, r3, #31
 8007af0:	d508      	bpl.n	8007b04 <_printf_i+0x14c>
 8007af2:	6923      	ldr	r3, [r4, #16]
 8007af4:	6861      	ldr	r1, [r4, #4]
 8007af6:	4299      	cmp	r1, r3
 8007af8:	bfde      	ittt	le
 8007afa:	2330      	movle	r3, #48	; 0x30
 8007afc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b04:	1b92      	subs	r2, r2, r6
 8007b06:	6122      	str	r2, [r4, #16]
 8007b08:	f8cd a000 	str.w	sl, [sp]
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	aa03      	add	r2, sp, #12
 8007b10:	4621      	mov	r1, r4
 8007b12:	4640      	mov	r0, r8
 8007b14:	f7ff fee2 	bl	80078dc <_printf_common>
 8007b18:	3001      	adds	r0, #1
 8007b1a:	d14c      	bne.n	8007bb6 <_printf_i+0x1fe>
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b20:	b004      	add	sp, #16
 8007b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b26:	4835      	ldr	r0, [pc, #212]	; (8007bfc <_printf_i+0x244>)
 8007b28:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	680e      	ldr	r6, [r1, #0]
 8007b30:	061f      	lsls	r7, r3, #24
 8007b32:	f856 5b04 	ldr.w	r5, [r6], #4
 8007b36:	600e      	str	r6, [r1, #0]
 8007b38:	d514      	bpl.n	8007b64 <_printf_i+0x1ac>
 8007b3a:	07d9      	lsls	r1, r3, #31
 8007b3c:	bf44      	itt	mi
 8007b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8007b42:	6023      	strmi	r3, [r4, #0]
 8007b44:	b91d      	cbnz	r5, 8007b4e <_printf_i+0x196>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	f023 0320 	bic.w	r3, r3, #32
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	2310      	movs	r3, #16
 8007b50:	e7b0      	b.n	8007ab4 <_printf_i+0xfc>
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	f043 0320 	orr.w	r3, r3, #32
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	2378      	movs	r3, #120	; 0x78
 8007b5c:	4828      	ldr	r0, [pc, #160]	; (8007c00 <_printf_i+0x248>)
 8007b5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b62:	e7e3      	b.n	8007b2c <_printf_i+0x174>
 8007b64:	065e      	lsls	r6, r3, #25
 8007b66:	bf48      	it	mi
 8007b68:	b2ad      	uxthmi	r5, r5
 8007b6a:	e7e6      	b.n	8007b3a <_printf_i+0x182>
 8007b6c:	4616      	mov	r6, r2
 8007b6e:	e7bb      	b.n	8007ae8 <_printf_i+0x130>
 8007b70:	680b      	ldr	r3, [r1, #0]
 8007b72:	6826      	ldr	r6, [r4, #0]
 8007b74:	6960      	ldr	r0, [r4, #20]
 8007b76:	1d1d      	adds	r5, r3, #4
 8007b78:	600d      	str	r5, [r1, #0]
 8007b7a:	0635      	lsls	r5, r6, #24
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	d501      	bpl.n	8007b84 <_printf_i+0x1cc>
 8007b80:	6018      	str	r0, [r3, #0]
 8007b82:	e002      	b.n	8007b8a <_printf_i+0x1d2>
 8007b84:	0671      	lsls	r1, r6, #25
 8007b86:	d5fb      	bpl.n	8007b80 <_printf_i+0x1c8>
 8007b88:	8018      	strh	r0, [r3, #0]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	6123      	str	r3, [r4, #16]
 8007b8e:	4616      	mov	r6, r2
 8007b90:	e7ba      	b.n	8007b08 <_printf_i+0x150>
 8007b92:	680b      	ldr	r3, [r1, #0]
 8007b94:	1d1a      	adds	r2, r3, #4
 8007b96:	600a      	str	r2, [r1, #0]
 8007b98:	681e      	ldr	r6, [r3, #0]
 8007b9a:	6862      	ldr	r2, [r4, #4]
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f7f8 fb1e 	bl	80001e0 <memchr>
 8007ba4:	b108      	cbz	r0, 8007baa <_printf_i+0x1f2>
 8007ba6:	1b80      	subs	r0, r0, r6
 8007ba8:	6060      	str	r0, [r4, #4]
 8007baa:	6863      	ldr	r3, [r4, #4]
 8007bac:	6123      	str	r3, [r4, #16]
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb4:	e7a8      	b.n	8007b08 <_printf_i+0x150>
 8007bb6:	6923      	ldr	r3, [r4, #16]
 8007bb8:	4632      	mov	r2, r6
 8007bba:	4649      	mov	r1, r9
 8007bbc:	4640      	mov	r0, r8
 8007bbe:	47d0      	blx	sl
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d0ab      	beq.n	8007b1c <_printf_i+0x164>
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	079b      	lsls	r3, r3, #30
 8007bc8:	d413      	bmi.n	8007bf2 <_printf_i+0x23a>
 8007bca:	68e0      	ldr	r0, [r4, #12]
 8007bcc:	9b03      	ldr	r3, [sp, #12]
 8007bce:	4298      	cmp	r0, r3
 8007bd0:	bfb8      	it	lt
 8007bd2:	4618      	movlt	r0, r3
 8007bd4:	e7a4      	b.n	8007b20 <_printf_i+0x168>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	4632      	mov	r2, r6
 8007bda:	4649      	mov	r1, r9
 8007bdc:	4640      	mov	r0, r8
 8007bde:	47d0      	blx	sl
 8007be0:	3001      	adds	r0, #1
 8007be2:	d09b      	beq.n	8007b1c <_printf_i+0x164>
 8007be4:	3501      	adds	r5, #1
 8007be6:	68e3      	ldr	r3, [r4, #12]
 8007be8:	9903      	ldr	r1, [sp, #12]
 8007bea:	1a5b      	subs	r3, r3, r1
 8007bec:	42ab      	cmp	r3, r5
 8007bee:	dcf2      	bgt.n	8007bd6 <_printf_i+0x21e>
 8007bf0:	e7eb      	b.n	8007bca <_printf_i+0x212>
 8007bf2:	2500      	movs	r5, #0
 8007bf4:	f104 0619 	add.w	r6, r4, #25
 8007bf8:	e7f5      	b.n	8007be6 <_printf_i+0x22e>
 8007bfa:	bf00      	nop
 8007bfc:	08007ed1 	.word	0x08007ed1
 8007c00:	08007ee2 	.word	0x08007ee2

08007c04 <memcpy>:
 8007c04:	440a      	add	r2, r1
 8007c06:	4291      	cmp	r1, r2
 8007c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c0c:	d100      	bne.n	8007c10 <memcpy+0xc>
 8007c0e:	4770      	bx	lr
 8007c10:	b510      	push	{r4, lr}
 8007c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c1a:	4291      	cmp	r1, r2
 8007c1c:	d1f9      	bne.n	8007c12 <memcpy+0xe>
 8007c1e:	bd10      	pop	{r4, pc}

08007c20 <memmove>:
 8007c20:	4288      	cmp	r0, r1
 8007c22:	b510      	push	{r4, lr}
 8007c24:	eb01 0402 	add.w	r4, r1, r2
 8007c28:	d902      	bls.n	8007c30 <memmove+0x10>
 8007c2a:	4284      	cmp	r4, r0
 8007c2c:	4623      	mov	r3, r4
 8007c2e:	d807      	bhi.n	8007c40 <memmove+0x20>
 8007c30:	1e43      	subs	r3, r0, #1
 8007c32:	42a1      	cmp	r1, r4
 8007c34:	d008      	beq.n	8007c48 <memmove+0x28>
 8007c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c3e:	e7f8      	b.n	8007c32 <memmove+0x12>
 8007c40:	4402      	add	r2, r0
 8007c42:	4601      	mov	r1, r0
 8007c44:	428a      	cmp	r2, r1
 8007c46:	d100      	bne.n	8007c4a <memmove+0x2a>
 8007c48:	bd10      	pop	{r4, pc}
 8007c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c52:	e7f7      	b.n	8007c44 <memmove+0x24>

08007c54 <_free_r>:
 8007c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c56:	2900      	cmp	r1, #0
 8007c58:	d048      	beq.n	8007cec <_free_r+0x98>
 8007c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c5e:	9001      	str	r0, [sp, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f1a1 0404 	sub.w	r4, r1, #4
 8007c66:	bfb8      	it	lt
 8007c68:	18e4      	addlt	r4, r4, r3
 8007c6a:	f000 f8d3 	bl	8007e14 <__malloc_lock>
 8007c6e:	4a20      	ldr	r2, [pc, #128]	; (8007cf0 <_free_r+0x9c>)
 8007c70:	9801      	ldr	r0, [sp, #4]
 8007c72:	6813      	ldr	r3, [r2, #0]
 8007c74:	4615      	mov	r5, r2
 8007c76:	b933      	cbnz	r3, 8007c86 <_free_r+0x32>
 8007c78:	6063      	str	r3, [r4, #4]
 8007c7a:	6014      	str	r4, [r2, #0]
 8007c7c:	b003      	add	sp, #12
 8007c7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c82:	f000 b8cd 	b.w	8007e20 <__malloc_unlock>
 8007c86:	42a3      	cmp	r3, r4
 8007c88:	d90b      	bls.n	8007ca2 <_free_r+0x4e>
 8007c8a:	6821      	ldr	r1, [r4, #0]
 8007c8c:	1862      	adds	r2, r4, r1
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	bf04      	itt	eq
 8007c92:	681a      	ldreq	r2, [r3, #0]
 8007c94:	685b      	ldreq	r3, [r3, #4]
 8007c96:	6063      	str	r3, [r4, #4]
 8007c98:	bf04      	itt	eq
 8007c9a:	1852      	addeq	r2, r2, r1
 8007c9c:	6022      	streq	r2, [r4, #0]
 8007c9e:	602c      	str	r4, [r5, #0]
 8007ca0:	e7ec      	b.n	8007c7c <_free_r+0x28>
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b10b      	cbz	r3, 8007cac <_free_r+0x58>
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	d9fa      	bls.n	8007ca2 <_free_r+0x4e>
 8007cac:	6811      	ldr	r1, [r2, #0]
 8007cae:	1855      	adds	r5, r2, r1
 8007cb0:	42a5      	cmp	r5, r4
 8007cb2:	d10b      	bne.n	8007ccc <_free_r+0x78>
 8007cb4:	6824      	ldr	r4, [r4, #0]
 8007cb6:	4421      	add	r1, r4
 8007cb8:	1854      	adds	r4, r2, r1
 8007cba:	42a3      	cmp	r3, r4
 8007cbc:	6011      	str	r1, [r2, #0]
 8007cbe:	d1dd      	bne.n	8007c7c <_free_r+0x28>
 8007cc0:	681c      	ldr	r4, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	6053      	str	r3, [r2, #4]
 8007cc6:	4421      	add	r1, r4
 8007cc8:	6011      	str	r1, [r2, #0]
 8007cca:	e7d7      	b.n	8007c7c <_free_r+0x28>
 8007ccc:	d902      	bls.n	8007cd4 <_free_r+0x80>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	6003      	str	r3, [r0, #0]
 8007cd2:	e7d3      	b.n	8007c7c <_free_r+0x28>
 8007cd4:	6825      	ldr	r5, [r4, #0]
 8007cd6:	1961      	adds	r1, r4, r5
 8007cd8:	428b      	cmp	r3, r1
 8007cda:	bf04      	itt	eq
 8007cdc:	6819      	ldreq	r1, [r3, #0]
 8007cde:	685b      	ldreq	r3, [r3, #4]
 8007ce0:	6063      	str	r3, [r4, #4]
 8007ce2:	bf04      	itt	eq
 8007ce4:	1949      	addeq	r1, r1, r5
 8007ce6:	6021      	streq	r1, [r4, #0]
 8007ce8:	6054      	str	r4, [r2, #4]
 8007cea:	e7c7      	b.n	8007c7c <_free_r+0x28>
 8007cec:	b003      	add	sp, #12
 8007cee:	bd30      	pop	{r4, r5, pc}
 8007cf0:	2000042c 	.word	0x2000042c

08007cf4 <_malloc_r>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	1ccd      	adds	r5, r1, #3
 8007cf8:	f025 0503 	bic.w	r5, r5, #3
 8007cfc:	3508      	adds	r5, #8
 8007cfe:	2d0c      	cmp	r5, #12
 8007d00:	bf38      	it	cc
 8007d02:	250c      	movcc	r5, #12
 8007d04:	2d00      	cmp	r5, #0
 8007d06:	4606      	mov	r6, r0
 8007d08:	db01      	blt.n	8007d0e <_malloc_r+0x1a>
 8007d0a:	42a9      	cmp	r1, r5
 8007d0c:	d903      	bls.n	8007d16 <_malloc_r+0x22>
 8007d0e:	230c      	movs	r3, #12
 8007d10:	6033      	str	r3, [r6, #0]
 8007d12:	2000      	movs	r0, #0
 8007d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d16:	f000 f87d 	bl	8007e14 <__malloc_lock>
 8007d1a:	4921      	ldr	r1, [pc, #132]	; (8007da0 <_malloc_r+0xac>)
 8007d1c:	680a      	ldr	r2, [r1, #0]
 8007d1e:	4614      	mov	r4, r2
 8007d20:	b99c      	cbnz	r4, 8007d4a <_malloc_r+0x56>
 8007d22:	4f20      	ldr	r7, [pc, #128]	; (8007da4 <_malloc_r+0xb0>)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	b923      	cbnz	r3, 8007d32 <_malloc_r+0x3e>
 8007d28:	4621      	mov	r1, r4
 8007d2a:	4630      	mov	r0, r6
 8007d2c:	f000 f862 	bl	8007df4 <_sbrk_r>
 8007d30:	6038      	str	r0, [r7, #0]
 8007d32:	4629      	mov	r1, r5
 8007d34:	4630      	mov	r0, r6
 8007d36:	f000 f85d 	bl	8007df4 <_sbrk_r>
 8007d3a:	1c43      	adds	r3, r0, #1
 8007d3c:	d123      	bne.n	8007d86 <_malloc_r+0x92>
 8007d3e:	230c      	movs	r3, #12
 8007d40:	6033      	str	r3, [r6, #0]
 8007d42:	4630      	mov	r0, r6
 8007d44:	f000 f86c 	bl	8007e20 <__malloc_unlock>
 8007d48:	e7e3      	b.n	8007d12 <_malloc_r+0x1e>
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	1b5b      	subs	r3, r3, r5
 8007d4e:	d417      	bmi.n	8007d80 <_malloc_r+0x8c>
 8007d50:	2b0b      	cmp	r3, #11
 8007d52:	d903      	bls.n	8007d5c <_malloc_r+0x68>
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	441c      	add	r4, r3
 8007d58:	6025      	str	r5, [r4, #0]
 8007d5a:	e004      	b.n	8007d66 <_malloc_r+0x72>
 8007d5c:	6863      	ldr	r3, [r4, #4]
 8007d5e:	42a2      	cmp	r2, r4
 8007d60:	bf0c      	ite	eq
 8007d62:	600b      	streq	r3, [r1, #0]
 8007d64:	6053      	strne	r3, [r2, #4]
 8007d66:	4630      	mov	r0, r6
 8007d68:	f000 f85a 	bl	8007e20 <__malloc_unlock>
 8007d6c:	f104 000b 	add.w	r0, r4, #11
 8007d70:	1d23      	adds	r3, r4, #4
 8007d72:	f020 0007 	bic.w	r0, r0, #7
 8007d76:	1ac2      	subs	r2, r0, r3
 8007d78:	d0cc      	beq.n	8007d14 <_malloc_r+0x20>
 8007d7a:	1a1b      	subs	r3, r3, r0
 8007d7c:	50a3      	str	r3, [r4, r2]
 8007d7e:	e7c9      	b.n	8007d14 <_malloc_r+0x20>
 8007d80:	4622      	mov	r2, r4
 8007d82:	6864      	ldr	r4, [r4, #4]
 8007d84:	e7cc      	b.n	8007d20 <_malloc_r+0x2c>
 8007d86:	1cc4      	adds	r4, r0, #3
 8007d88:	f024 0403 	bic.w	r4, r4, #3
 8007d8c:	42a0      	cmp	r0, r4
 8007d8e:	d0e3      	beq.n	8007d58 <_malloc_r+0x64>
 8007d90:	1a21      	subs	r1, r4, r0
 8007d92:	4630      	mov	r0, r6
 8007d94:	f000 f82e 	bl	8007df4 <_sbrk_r>
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d1dd      	bne.n	8007d58 <_malloc_r+0x64>
 8007d9c:	e7cf      	b.n	8007d3e <_malloc_r+0x4a>
 8007d9e:	bf00      	nop
 8007da0:	2000042c 	.word	0x2000042c
 8007da4:	20000430 	.word	0x20000430

08007da8 <_realloc_r>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	4607      	mov	r7, r0
 8007dac:	4614      	mov	r4, r2
 8007dae:	460e      	mov	r6, r1
 8007db0:	b921      	cbnz	r1, 8007dbc <_realloc_r+0x14>
 8007db2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007db6:	4611      	mov	r1, r2
 8007db8:	f7ff bf9c 	b.w	8007cf4 <_malloc_r>
 8007dbc:	b922      	cbnz	r2, 8007dc8 <_realloc_r+0x20>
 8007dbe:	f7ff ff49 	bl	8007c54 <_free_r>
 8007dc2:	4625      	mov	r5, r4
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc8:	f000 f830 	bl	8007e2c <_malloc_usable_size_r>
 8007dcc:	42a0      	cmp	r0, r4
 8007dce:	d20f      	bcs.n	8007df0 <_realloc_r+0x48>
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	f7ff ff8e 	bl	8007cf4 <_malloc_r>
 8007dd8:	4605      	mov	r5, r0
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d0f2      	beq.n	8007dc4 <_realloc_r+0x1c>
 8007dde:	4631      	mov	r1, r6
 8007de0:	4622      	mov	r2, r4
 8007de2:	f7ff ff0f 	bl	8007c04 <memcpy>
 8007de6:	4631      	mov	r1, r6
 8007de8:	4638      	mov	r0, r7
 8007dea:	f7ff ff33 	bl	8007c54 <_free_r>
 8007dee:	e7e9      	b.n	8007dc4 <_realloc_r+0x1c>
 8007df0:	4635      	mov	r5, r6
 8007df2:	e7e7      	b.n	8007dc4 <_realloc_r+0x1c>

08007df4 <_sbrk_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d06      	ldr	r5, [pc, #24]	; (8007e10 <_sbrk_r+0x1c>)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	602b      	str	r3, [r5, #0]
 8007e00:	f7f8 fdfa 	bl	80009f8 <_sbrk>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d102      	bne.n	8007e0e <_sbrk_r+0x1a>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	b103      	cbz	r3, 8007e0e <_sbrk_r+0x1a>
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	20003db8 	.word	0x20003db8

08007e14 <__malloc_lock>:
 8007e14:	4801      	ldr	r0, [pc, #4]	; (8007e1c <__malloc_lock+0x8>)
 8007e16:	f000 b811 	b.w	8007e3c <__retarget_lock_acquire_recursive>
 8007e1a:	bf00      	nop
 8007e1c:	20003dc0 	.word	0x20003dc0

08007e20 <__malloc_unlock>:
 8007e20:	4801      	ldr	r0, [pc, #4]	; (8007e28 <__malloc_unlock+0x8>)
 8007e22:	f000 b80c 	b.w	8007e3e <__retarget_lock_release_recursive>
 8007e26:	bf00      	nop
 8007e28:	20003dc0 	.word	0x20003dc0

08007e2c <_malloc_usable_size_r>:
 8007e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e30:	1f18      	subs	r0, r3, #4
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	bfbc      	itt	lt
 8007e36:	580b      	ldrlt	r3, [r1, r0]
 8007e38:	18c0      	addlt	r0, r0, r3
 8007e3a:	4770      	bx	lr

08007e3c <__retarget_lock_acquire_recursive>:
 8007e3c:	4770      	bx	lr

08007e3e <__retarget_lock_release_recursive>:
 8007e3e:	4770      	bx	lr

08007e40 <_init>:
 8007e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e42:	bf00      	nop
 8007e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e46:	bc08      	pop	{r3}
 8007e48:	469e      	mov	lr, r3
 8007e4a:	4770      	bx	lr

08007e4c <_fini>:
 8007e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4e:	bf00      	nop
 8007e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e52:	bc08      	pop	{r3}
 8007e54:	469e      	mov	lr, r3
 8007e56:	4770      	bx	lr
