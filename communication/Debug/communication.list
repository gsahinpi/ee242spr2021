
communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006458  08006458  00016458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c0  080064c0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064c8  080064c8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064c8  080064c8  000164c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064cc  080064cc  000164cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080064d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000190c  200001e8  080066b8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001af4  080066b8  00021af4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f47  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ac7  00000000  00000000  0003215f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b10  00000000  00000000  00034c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c8  00000000  00000000  00035738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d09  00000000  00000000  00036100  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c2b7  00000000  00000000  00058e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c399f  00000000  00000000  000650c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00128a5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cbc  00000000  00000000  00128adc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e8 	.word	0x200001e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006440 	.word	0x08006440

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001ec 	.word	0x200001ec
 80001c4:	08006440 	.word	0x08006440

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b598      	push	{r3, r4, r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 f984 	bl	80007e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f818 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f882 	bl	80005ec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e8:	f005 f9ae 	bl	8005848 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS(data, strlen(data));
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <main+0x38>)
 80004ee:	681c      	ldr	r4, [r3, #0]
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <main+0x38>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff fe67 	bl	80001c8 <strlen>
 80004fa:	4603      	mov	r3, r0
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	4619      	mov	r1, r3
 8000500:	4620      	mov	r0, r4
 8000502:	f005 fa5f 	bl	80059c4 <CDC_Transmit_FS>
	  HAL_Delay(500);
 8000506:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800050a:	f000 f9df 	bl	80008cc <HAL_Delay>
	  CDC_Transmit_FS(data, strlen(data));
 800050e:	e7ed      	b.n	80004ec <main+0x14>
 8000510:	20000000 	.word	0x20000000

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0320 	add.w	r3, r7, #32
 800051e:	2230      	movs	r2, #48	; 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f005 feca 	bl	80062bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 030c 	add.w	r3, r7, #12
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	4b29      	ldr	r3, [pc, #164]	; (80005e4 <SystemClock_Config+0xd0>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a28      	ldr	r2, [pc, #160]	; (80005e4 <SystemClock_Config+0xd0>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <SystemClock_Config+0xd0>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2300      	movs	r3, #0
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <SystemClock_Config+0xd4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a22      	ldr	r2, [pc, #136]	; (80005e8 <SystemClock_Config+0xd4>)
 800055e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <SystemClock_Config+0xd4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000570:	2303      	movs	r3, #3
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	2301      	movs	r3, #1
 800057c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800058c:	2304      	movs	r3, #4
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000590:	2348      	movs	r3, #72	; 0x48
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000598:	2303      	movs	r3, #3
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fde5 	bl	8002170 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005ac:	f000 f846 	bl	800063c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 f840 	bl	8002650 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005d6:	f000 f831 	bl	800063c <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_GPIO_Init+0x4c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a0f      	ldr	r2, [pc, #60]	; (8000638 <MX_GPIO_Init+0x4c>)
 80005fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_GPIO_Init+0x4c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_GPIO_Init+0x4c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a08      	ldr	r2, [pc, #32]	; (8000638 <MX_GPIO_Init+0x4c>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_GPIO_Init+0x4c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800

0800063c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000642:	e7fe      	b.n	8000642 <Error_Handler+0x6>

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <HAL_MspInit+0x4c>)
 8000650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000652:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <HAL_MspInit+0x4c>)
 8000654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000658:	6453      	str	r3, [r2, #68]	; 0x44
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <HAL_MspInit+0x4c>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_MspInit+0x4c>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <HAL_MspInit+0x4c>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	6413      	str	r3, [r2, #64]	; 0x40
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_MspInit+0x4c>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <NMI_Handler+0x4>

0800069a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <MemManage_Handler+0x4>

080006a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e0:	f000 f8d4 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <OTG_FS_IRQHandler+0x10>)
 80006ee:	f000 fd0b 	bl	8001108 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200016e8 	.word	0x200016e8

080006fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000704:	4a14      	ldr	r2, [pc, #80]	; (8000758 <_sbrk+0x5c>)
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <_sbrk+0x60>)
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000710:	4b13      	ldr	r3, [pc, #76]	; (8000760 <_sbrk+0x64>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d102      	bne.n	800071e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <_sbrk+0x64>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <_sbrk+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	429a      	cmp	r2, r3
 800072a:	d207      	bcs.n	800073c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800072c:	f005 fd8c 	bl	8006248 <__errno>
 8000730:	4602      	mov	r2, r0
 8000732:	230c      	movs	r3, #12
 8000734:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	e009      	b.n	8000750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <_sbrk+0x64>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <_sbrk+0x64>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	4a05      	ldr	r2, [pc, #20]	; (8000760 <_sbrk+0x64>)
 800074c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800074e:	68fb      	ldr	r3, [r7, #12]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20020000 	.word	0x20020000
 800075c:	00000400 	.word	0x00000400
 8000760:	20000204 	.word	0x20000204
 8000764:	20001af8 	.word	0x20001af8

08000768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <SystemInit+0x28>)
 800076e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000772:	4a07      	ldr	r2, [pc, #28]	; (8000790 <SystemInit+0x28>)
 8000774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SystemInit+0x28>)
 800077e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000782:	609a      	str	r2, [r3, #8]
#endif
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000798:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800079a:	e003      	b.n	80007a4 <LoopCopyDataInit>

0800079c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800079e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007a2:	3104      	adds	r1, #4

080007a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80007a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007ac:	d3f6      	bcc.n	800079c <CopyDataInit>
  ldr  r2, =_sbss
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80007b0:	e002      	b.n	80007b8 <LoopFillZerobss>

080007b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80007b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80007b4:	f842 3b04 	str.w	r3, [r2], #4

080007b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80007ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80007bc:	d3f9      	bcc.n	80007b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80007be:	f7ff ffd3 	bl	8000768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007c2:	f005 fd47 	bl	8006254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007c6:	f7ff fe87 	bl	80004d8 <main>
  bx  lr    
 80007ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80007d0:	080064d0 	.word	0x080064d0
  ldr  r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80007d8:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80007dc:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80007e0:	20001af4 	.word	0x20001af4

080007e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <ADC_IRQHandler>
	...

080007e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_Init+0x40>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <HAL_Init+0x40>)
 80007f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <HAL_Init+0x40>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0a      	ldr	r2, [pc, #40]	; (8000828 <HAL_Init+0x40>)
 80007fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000802:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_Init+0x40>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_Init+0x40>)
 800080a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800080e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f94d 	bl	8000ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f808 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800081c:	f7ff ff12 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023c00 	.word	0x40023c00

0800082c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x54>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_InitTick+0x58>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f965 	bl	8000b1a <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f92d 	bl	8000ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <HAL_InitTick+0x5c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000004 	.word	0x20000004
 8000884:	2000000c 	.word	0x2000000c
 8000888:	20000008 	.word	0x20000008

0800088c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x20>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_IncTick+0x24>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_IncTick+0x24>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	2000000c 	.word	0x2000000c
 80008b0:	20000214 	.word	0x20000214

080008b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_GetTick+0x14>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000214 	.word	0x20000214

080008cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d4:	f7ff ffee 	bl	80008b4 <HAL_GetTick>
 80008d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e4:	d005      	beq.n	80008f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_Delay+0x40>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	4413      	add	r3, r2
 80008f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008f2:	bf00      	nop
 80008f4:	f7ff ffde 	bl	80008b4 <HAL_GetTick>
 80008f8:	4602      	mov	r2, r0
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	1ad3      	subs	r3, r2, r3
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	429a      	cmp	r2, r3
 8000902:	d8f7      	bhi.n	80008f4 <HAL_Delay+0x28>
  {
  }
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2000000c 	.word	0x2000000c

08000910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800093c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <__NVIC_GetPriorityGrouping+0x18>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	f003 0307 	and.w	r3, r3, #7
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	2b00      	cmp	r3, #0
 8000984:	db0b      	blt.n	800099e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	f003 021f 	and.w	r2, r3, #31
 800098c:	4907      	ldr	r1, [pc, #28]	; (80009ac <__NVIC_EnableIRQ+0x38>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	095b      	lsrs	r3, r3, #5
 8000994:	2001      	movs	r0, #1
 8000996:	fa00 f202 	lsl.w	r2, r0, r2
 800099a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000e100 	.word	0xe000e100

080009b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	db0a      	blt.n	80009da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <__NVIC_SetPriority+0x4c>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	0112      	lsls	r2, r2, #4
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	440b      	add	r3, r1
 80009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d8:	e00a      	b.n	80009f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4908      	ldr	r1, [pc, #32]	; (8000a00 <__NVIC_SetPriority+0x50>)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	3b04      	subs	r3, #4
 80009e8:	0112      	lsls	r2, r2, #4
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	440b      	add	r3, r1
 80009ee:	761a      	strb	r2, [r3, #24]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f1c3 0307 	rsb	r3, r3, #7
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	bf28      	it	cs
 8000a22:	2304      	movcs	r3, #4
 8000a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d902      	bls.n	8000a34 <NVIC_EncodePriority+0x30>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3b03      	subs	r3, #3
 8000a32:	e000      	b.n	8000a36 <NVIC_EncodePriority+0x32>
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43da      	mvns	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	401a      	ands	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43d9      	mvns	r1, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	4313      	orrs	r3, r2
         );
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3724      	adds	r7, #36	; 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a7c:	d301      	bcc.n	8000a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00f      	b.n	8000aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <SysTick_Config+0x40>)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f7ff ff8e 	bl	80009b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <SysTick_Config+0x40>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9a:	4b04      	ldr	r3, [pc, #16]	; (8000aac <SysTick_Config+0x40>)
 8000a9c:	2207      	movs	r2, #7
 8000a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	e000e010 	.word	0xe000e010

08000ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ff29 	bl	8000910 <__NVIC_SetPriorityGrouping>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b086      	sub	sp, #24
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
 8000ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad8:	f7ff ff3e 	bl	8000958 <__NVIC_GetPriorityGrouping>
 8000adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	6978      	ldr	r0, [r7, #20]
 8000ae4:	f7ff ff8e 	bl	8000a04 <NVIC_EncodePriority>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff5d 	bl	80009b0 <__NVIC_SetPriority>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff31 	bl	8000974 <__NVIC_EnableIRQ>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff ffa2 	bl	8000a6c <SysTick_Config>
 8000b28:	4603      	mov	r3, r0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	e16b      	b.n	8000e28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b50:	2201      	movs	r2, #1
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	f040 815a 	bne.w	8000e22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d00b      	beq.n	8000b8e <HAL_GPIO_Init+0x5a>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d007      	beq.n	8000b8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b82:	2b11      	cmp	r3, #17
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d130      	bne.n	8000bf0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	091b      	lsrs	r3, r3, #4
 8000bda:	f003 0201 	and.w	r2, r3, #1
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_Init+0xfc>
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	2b12      	cmp	r3, #18
 8000c2e:	d123      	bne.n	8000c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	08da      	lsrs	r2, r3, #3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3208      	adds	r2, #8
 8000c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	f003 0307 	and.w	r3, r3, #7
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	220f      	movs	r2, #15
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	691a      	ldr	r2, [r3, #16]
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	08da      	lsrs	r2, r3, #3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3208      	adds	r2, #8
 8000c72:	69b9      	ldr	r1, [r7, #24]
 8000c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0203 	and.w	r2, r3, #3
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f000 80b4 	beq.w	8000e22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b5f      	ldr	r3, [pc, #380]	; (8000e3c <HAL_GPIO_Init+0x308>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a5e      	ldr	r2, [pc, #376]	; (8000e3c <HAL_GPIO_Init+0x308>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b5c      	ldr	r3, [pc, #368]	; (8000e3c <HAL_GPIO_Init+0x308>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cd6:	4a5a      	ldr	r2, [pc, #360]	; (8000e40 <HAL_GPIO_Init+0x30c>)
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	3302      	adds	r3, #2
 8000cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	220f      	movs	r2, #15
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a51      	ldr	r2, [pc, #324]	; (8000e44 <HAL_GPIO_Init+0x310>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d02b      	beq.n	8000d5a <HAL_GPIO_Init+0x226>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a50      	ldr	r2, [pc, #320]	; (8000e48 <HAL_GPIO_Init+0x314>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d025      	beq.n	8000d56 <HAL_GPIO_Init+0x222>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4f      	ldr	r2, [pc, #316]	; (8000e4c <HAL_GPIO_Init+0x318>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d01f      	beq.n	8000d52 <HAL_GPIO_Init+0x21e>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4e      	ldr	r2, [pc, #312]	; (8000e50 <HAL_GPIO_Init+0x31c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d019      	beq.n	8000d4e <HAL_GPIO_Init+0x21a>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a4d      	ldr	r2, [pc, #308]	; (8000e54 <HAL_GPIO_Init+0x320>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d013      	beq.n	8000d4a <HAL_GPIO_Init+0x216>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4c      	ldr	r2, [pc, #304]	; (8000e58 <HAL_GPIO_Init+0x324>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d00d      	beq.n	8000d46 <HAL_GPIO_Init+0x212>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a4b      	ldr	r2, [pc, #300]	; (8000e5c <HAL_GPIO_Init+0x328>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d007      	beq.n	8000d42 <HAL_GPIO_Init+0x20e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a4a      	ldr	r2, [pc, #296]	; (8000e60 <HAL_GPIO_Init+0x32c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d101      	bne.n	8000d3e <HAL_GPIO_Init+0x20a>
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	e00e      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d3e:	2308      	movs	r3, #8
 8000d40:	e00c      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d42:	2306      	movs	r3, #6
 8000d44:	e00a      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d46:	2305      	movs	r3, #5
 8000d48:	e008      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	e006      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e004      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d52:	2302      	movs	r3, #2
 8000d54:	e002      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e000      	b.n	8000d5c <HAL_GPIO_Init+0x228>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	69fa      	ldr	r2, [r7, #28]
 8000d5e:	f002 0203 	and.w	r2, r2, #3
 8000d62:	0092      	lsls	r2, r2, #2
 8000d64:	4093      	lsls	r3, r2
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d6c:	4934      	ldr	r1, [pc, #208]	; (8000e40 <HAL_GPIO_Init+0x30c>)
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	3302      	adds	r3, #2
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d7a:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <HAL_GPIO_Init+0x330>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d9e:	4a31      	ldr	r2, [pc, #196]	; (8000e64 <HAL_GPIO_Init+0x330>)
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000da4:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <HAL_GPIO_Init+0x330>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dc8:	4a26      	ldr	r2, [pc, #152]	; (8000e64 <HAL_GPIO_Init+0x330>)
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <HAL_GPIO_Init+0x330>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000df2:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <HAL_GPIO_Init+0x330>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df8:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <HAL_GPIO_Init+0x330>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e1c:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <HAL_GPIO_Init+0x330>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3301      	adds	r3, #1
 8000e26:	61fb      	str	r3, [r7, #28]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	2b0f      	cmp	r3, #15
 8000e2c:	f67f ae90 	bls.w	8000b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e30:	bf00      	nop
 8000e32:	3724      	adds	r7, #36	; 0x24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40013800 	.word	0x40013800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	40020c00 	.word	0x40020c00
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40021400 	.word	0x40021400
 8000e5c:	40021800 	.word	0x40021800
 8000e60:	40021c00 	.word	0x40021c00
 8000e64:	40013c00 	.word	0x40013c00

08000e68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6a:	b08f      	sub	sp, #60	; 0x3c
 8000e6c:	af0a      	add	r7, sp, #40	; 0x28
 8000e6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e10f      	b.n	800109a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d106      	bne.n	8000e9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f004 fedb 	bl	8005c50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d102      	bne.n	8000eb4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f001 fea8 	bl	8002c0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	687e      	ldr	r6, [r7, #4]
 8000ec6:	466d      	mov	r5, sp
 8000ec8:	f106 0410 	add.w	r4, r6, #16
 8000ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ed8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000edc:	1d33      	adds	r3, r6, #4
 8000ede:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ee0:	6838      	ldr	r0, [r7, #0]
 8000ee2:	f001 fd7f 	bl	80029e4 <USB_CoreInit>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d005      	beq.n	8000ef8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2202      	movs	r2, #2
 8000ef0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e0d0      	b.n	800109a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f001 fe96 	bl	8002c30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e04a      	b.n	8000fa0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	333d      	adds	r3, #61	; 0x3d
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	00db      	lsls	r3, r3, #3
 8000f26:	1a9b      	subs	r3, r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	333c      	adds	r3, #60	; 0x3c
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	b298      	uxth	r0, r3
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	1a9b      	subs	r3, r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	3342      	adds	r3, #66	; 0x42
 8000f46:	4602      	mov	r2, r0
 8000f48:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	1a9b      	subs	r3, r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	440b      	add	r3, r1
 8000f58:	333f      	adds	r3, #63	; 0x3f
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	1a9b      	subs	r3, r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3344      	adds	r3, #68	; 0x44
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	1a9b      	subs	r3, r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	3348      	adds	r3, #72	; 0x48
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	1a9b      	subs	r3, r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	3350      	adds	r3, #80	; 0x50
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d3af      	bcc.n	8000f0a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	e044      	b.n	800103a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fb0:	7bfa      	ldrb	r2, [r7, #15]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	1a9b      	subs	r3, r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	1a9b      	subs	r3, r3, r2
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	1a9b      	subs	r3, r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	440b      	add	r3, r1
 8001000:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4613      	mov	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	1a9b      	subs	r3, r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	1a9b      	subs	r3, r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	440b      	add	r3, r1
 800102c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	3301      	adds	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	429a      	cmp	r2, r3
 8001042:	d3b5      	bcc.n	8000fb0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	687e      	ldr	r6, [r7, #4]
 800104c:	466d      	mov	r5, sp
 800104e:	f106 0410 	add.w	r4, r6, #16
 8001052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800105a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800105e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001062:	1d33      	adds	r3, r6, #4
 8001064:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001066:	6838      	ldr	r0, [r7, #0]
 8001068:	f001 fe0c 	bl	8002c84 <USB_DevInit>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d005      	beq.n	800107e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2202      	movs	r2, #2
 8001076:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00d      	b.n	800109a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fe54 	bl	8003d40 <USB_DevDisconnect>

  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010a2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d101      	bne.n	80010be <HAL_PCD_Start+0x1c>
 80010ba:	2302      	movs	r3, #2
 80010bc:	e020      	b.n	8001100 <HAL_PCD_Start+0x5e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2201      	movs	r2, #1
 80010c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d109      	bne.n	80010e2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d005      	beq.n	80010e2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 fd80 	bl	8002bec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 fe04 	bl	8003cfe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b08d      	sub	sp, #52	; 0x34
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f002 fec2 	bl	8003ea8 <USB_GetMode>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	f040 839d 	bne.w	8001866 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f002 fe26 	bl	8003d82 <USB_ReadInterrupts>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 8393 	beq.w	8001864 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f002 fe1d 	bl	8003d82 <USB_ReadInterrupts>
 8001148:	4603      	mov	r3, r0
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	2b02      	cmp	r3, #2
 8001150:	d107      	bne.n	8001162 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	695a      	ldr	r2, [r3, #20]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f002 0202 	and.w	r2, r2, #2
 8001160:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f002 fe0b 	bl	8003d82 <USB_ReadInterrupts>
 800116c:	4603      	mov	r3, r0
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b10      	cmp	r3, #16
 8001174:	d161      	bne.n	800123a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0210 	bic.w	r2, r2, #16
 8001184:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	f003 020f 	and.w	r2, r3, #15
 8001192:	4613      	mov	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	1a9b      	subs	r3, r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	3304      	adds	r3, #4
 80011a4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	0c5b      	lsrs	r3, r3, #17
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d124      	bne.n	80011fc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d035      	beq.n	800122a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	6a38      	ldr	r0, [r7, #32]
 80011d2:	f002 fc71 	bl	8003ab8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011e2:	441a      	add	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	699a      	ldr	r2, [r3, #24]
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011f4:	441a      	add	r2, r3
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	619a      	str	r2, [r3, #24]
 80011fa:	e016      	b.n	800122a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	0c5b      	lsrs	r3, r3, #17
 8001200:	f003 030f 	and.w	r3, r3, #15
 8001204:	2b06      	cmp	r3, #6
 8001206:	d110      	bne.n	800122a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800120e:	2208      	movs	r2, #8
 8001210:	4619      	mov	r1, r3
 8001212:	6a38      	ldr	r0, [r7, #32]
 8001214:	f002 fc50 	bl	8003ab8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	699a      	ldr	r2, [r3, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	091b      	lsrs	r3, r3, #4
 8001220:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001224:	441a      	add	r2, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	699a      	ldr	r2, [r3, #24]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0210 	orr.w	r2, r2, #16
 8001238:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f002 fd9f 	bl	8003d82 <USB_ReadInterrupts>
 8001244:	4603      	mov	r3, r0
 8001246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800124a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800124e:	d16e      	bne.n	800132e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fda5 	bl	8003da8 <USB_ReadDevAllOutEpInterrupt>
 800125e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001260:	e062      	b.n	8001328 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b00      	cmp	r3, #0
 800126a:	d057      	beq.n	800131c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f002 fdca 	bl	8003e10 <USB_ReadDevOutEPInterrupt>
 800127c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00c      	beq.n	80012a2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	015a      	lsls	r2, r3, #5
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	4413      	add	r3, r2
 8001290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001294:	461a      	mov	r2, r3
 8001296:	2301      	movs	r3, #1
 8001298:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800129a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 fdb1 	bl	8001e04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00c      	beq.n	80012c6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	015a      	lsls	r2, r3, #5
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	4413      	add	r3, r2
 80012b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012b8:	461a      	mov	r2, r3
 80012ba:	2308      	movs	r3, #8
 80012bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 feab 	bl	800201c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d008      	beq.n	80012e2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	015a      	lsls	r2, r3, #5
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	4413      	add	r3, r2
 80012d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012dc:	461a      	mov	r2, r3
 80012de:	2310      	movs	r3, #16
 80012e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	f003 0320 	and.w	r3, r3, #32
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d008      	beq.n	80012fe <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ee:	015a      	lsls	r2, r3, #5
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	4413      	add	r3, r2
 80012f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f8:	461a      	mov	r2, r3
 80012fa:	2320      	movs	r3, #32
 80012fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d009      	beq.n	800131c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	015a      	lsls	r2, r3, #5
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	4413      	add	r3, r2
 8001310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001314:	461a      	mov	r2, r3
 8001316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800131a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	3301      	adds	r3, #1
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001324:	085b      	lsrs	r3, r3, #1
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132a:	2b00      	cmp	r3, #0
 800132c:	d199      	bne.n	8001262 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f002 fd25 	bl	8003d82 <USB_ReadInterrupts>
 8001338:	4603      	mov	r3, r0
 800133a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001342:	f040 80c0 	bne.w	80014c6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f002 fd46 	bl	8003ddc <USB_ReadDevAllInEpInterrupt>
 8001350:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001356:	e0b2      	b.n	80014be <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80a7 	beq.w	80014b2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	4611      	mov	r1, r2
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fd6c 	bl	8003e4c <USB_ReadDevInEPInterrupt>
 8001374:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d057      	beq.n	8001430 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	2201      	movs	r2, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43db      	mvns	r3, r3
 800139a:	69f9      	ldr	r1, [r7, #28]
 800139c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013a0:	4013      	ands	r3, r2
 80013a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	015a      	lsls	r2, r3, #5
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	4413      	add	r3, r2
 80013ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013b0:	461a      	mov	r2, r3
 80013b2:	2301      	movs	r3, #1
 80013b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d132      	bne.n	8001424 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c2:	4613      	mov	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	1a9b      	subs	r3, r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	440b      	add	r3, r1
 80013cc:	3348      	adds	r3, #72	; 0x48
 80013ce:	6819      	ldr	r1, [r3, #0]
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d4:	4613      	mov	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	1a9b      	subs	r3, r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4403      	add	r3, r0
 80013de:	3344      	adds	r3, #68	; 0x44
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4419      	add	r1, r3
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	1a9b      	subs	r3, r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4403      	add	r3, r0
 80013f2:	3348      	adds	r3, #72	; 0x48
 80013f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d113      	bne.n	8001424 <HAL_PCD_IRQHandler+0x31c>
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001400:	4613      	mov	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	440b      	add	r3, r1
 800140a:	3350      	adds	r3, #80	; 0x50
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d108      	bne.n	8001424 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800141c:	461a      	mov	r2, r3
 800141e:	2101      	movs	r1, #1
 8001420:	f002 fd74 	bl	8003f0c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4619      	mov	r1, r3
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f004 fc91 	bl	8005d52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d008      	beq.n	800144c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	015a      	lsls	r2, r3, #5
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	4413      	add	r3, r2
 8001442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001446:	461a      	mov	r2, r3
 8001448:	2308      	movs	r3, #8
 800144a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	2b00      	cmp	r3, #0
 8001454:	d008      	beq.n	8001468 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	015a      	lsls	r2, r3, #5
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	4413      	add	r3, r2
 800145e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001462:	461a      	mov	r2, r3
 8001464:	2310      	movs	r3, #16
 8001466:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800146e:	2b00      	cmp	r3, #0
 8001470:	d008      	beq.n	8001484 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	015a      	lsls	r2, r3, #5
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	4413      	add	r3, r2
 800147a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800147e:	461a      	mov	r2, r3
 8001480:	2340      	movs	r3, #64	; 0x40
 8001482:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d008      	beq.n	80014a0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	015a      	lsls	r2, r3, #5
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800149a:	461a      	mov	r2, r3
 800149c:	2302      	movs	r3, #2
 800149e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fc1b 	bl	8001ce8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	3301      	adds	r3, #1
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ba:	085b      	lsrs	r3, r3, #1
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f47f af49 	bne.w	8001358 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 fc59 	bl	8003d82 <USB_ReadInterrupts>
 80014d0:	4603      	mov	r3, r0
 80014d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014da:	d122      	bne.n	8001522 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d108      	bne.n	800150c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001502:	2100      	movs	r1, #0
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 fe27 	bl	8002158 <HAL_PCDEx_LPM_Callback>
 800150a:	e002      	b.n	8001512 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f004 fc97 	bl	8005e40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001520:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f002 fc2b 	bl	8003d82 <USB_ReadInterrupts>
 800152c:	4603      	mov	r3, r0
 800152e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001536:	d112      	bne.n	800155e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b01      	cmp	r3, #1
 8001546:	d102      	bne.n	800154e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f004 fc53 	bl	8005df4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800155c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f002 fc0d 	bl	8003d82 <USB_ReadInterrupts>
 8001568:	4603      	mov	r3, r0
 800156a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001572:	f040 80c7 	bne.w	8001704 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2110      	movs	r1, #16
 8001590:	4618      	mov	r0, r3
 8001592:	f001 fcdb 	bl	8002f4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159a:	e056      	b.n	800164a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800159c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159e:	015a      	lsls	r2, r3, #5
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	4413      	add	r3, r2
 80015a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a8:	461a      	mov	r2, r3
 80015aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b2:	015a      	lsls	r2, r3, #5
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c0:	0151      	lsls	r1, r2, #5
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	440a      	add	r2, r1
 80015c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015ce:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80015d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d2:	015a      	lsls	r2, r3, #5
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	4413      	add	r3, r2
 80015d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e0:	0151      	lsls	r1, r2, #5
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	440a      	add	r2, r1
 80015e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f2:	015a      	lsls	r2, r3, #5
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	4413      	add	r3, r2
 80015f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015fc:	461a      	mov	r2, r3
 80015fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001602:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001606:	015a      	lsls	r2, r3, #5
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	4413      	add	r3, r2
 800160c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001614:	0151      	lsls	r1, r2, #5
 8001616:	69fa      	ldr	r2, [r7, #28]
 8001618:	440a      	add	r2, r1
 800161a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800161e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001622:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001626:	015a      	lsls	r2, r3, #5
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	4413      	add	r3, r2
 800162c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001634:	0151      	lsls	r1, r2, #5
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	440a      	add	r2, r1
 800163a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800163e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001642:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001646:	3301      	adds	r3, #1
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001650:	429a      	cmp	r2, r3
 8001652:	d3a3      	bcc.n	800159c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001662:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001666:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	2b00      	cmp	r3, #0
 800166e:	d016      	beq.n	800169e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001680:	f043 030b 	orr.w	r3, r3, #11
 8001684:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001696:	f043 030b 	orr.w	r3, r3, #11
 800169a:	6453      	str	r3, [r2, #68]	; 0x44
 800169c:	e015      	b.n	80016ca <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016b0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016b4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c4:	f043 030b 	orr.w	r3, r3, #11
 80016c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016ee:	461a      	mov	r2, r3
 80016f0:	f002 fc0c 	bl	8003f0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001702:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fb3a 	bl	8003d82 <USB_ReadInterrupts>
 800170e:	4603      	mov	r3, r0
 8001710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001718:	d124      	bne.n	8001764 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f002 fbd0 	bl	8003ec4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f001 fc70 	bl	800300e <USB_GetDevSpeed>
 800172e:	4603      	mov	r3, r0
 8001730:	461a      	mov	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681c      	ldr	r4, [r3, #0]
 800173a:	f001 f947 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 800173e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	4620      	mov	r0, r4
 800174a:	f001 f9ad 	bl	8002aa8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f004 fb27 	bl	8005da2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001762:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f002 fb0a 	bl	8003d82 <USB_ReadInterrupts>
 800176e:	4603      	mov	r3, r0
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b08      	cmp	r3, #8
 8001776:	d10a      	bne.n	800178e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f004 fb04 	bl	8005d86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695a      	ldr	r2, [r3, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f002 0208 	and.w	r2, r2, #8
 800178c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f002 faf5 	bl	8003d82 <USB_ReadInterrupts>
 8001798:	4603      	mov	r3, r0
 800179a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017a2:	d10f      	bne.n	80017c4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f004 fb66 	bl	8005e80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80017c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 fada 	bl	8003d82 <USB_ReadInterrupts>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017d8:	d10f      	bne.n	80017fa <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	4619      	mov	r1, r3
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f004 fb39 	bl	8005e5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80017f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 fabf 	bl	8003d82 <USB_ReadInterrupts>
 8001804:	4603      	mov	r3, r0
 8001806:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800180a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180e:	d10a      	bne.n	8001826 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f004 fb47 	bl	8005ea4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f002 faa9 	bl	8003d82 <USB_ReadInterrupts>
 8001830:	4603      	mov	r3, r0
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b04      	cmp	r3, #4
 8001838:	d115      	bne.n	8001866 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d002      	beq.n	8001852 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f004 fb37 	bl	8005ec0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	430a      	orrs	r2, r1
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	e000      	b.n	8001866 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001864:	bf00      	nop
    }
  }
}
 8001866:	3734      	adds	r7, #52	; 0x34
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}

0800186c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_PCD_SetAddress+0x1a>
 8001882:	2302      	movs	r3, #2
 8001884:	e013      	b.n	80018ae <HAL_PCD_SetAddress+0x42>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 fa07 	bl	8003cb2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b084      	sub	sp, #16
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	4608      	mov	r0, r1
 80018c0:	4611      	mov	r1, r2
 80018c2:	461a      	mov	r2, r3
 80018c4:	4603      	mov	r3, r0
 80018c6:	70fb      	strb	r3, [r7, #3]
 80018c8:	460b      	mov	r3, r1
 80018ca:	803b      	strh	r3, [r7, #0]
 80018cc:	4613      	mov	r3, r2
 80018ce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	da0f      	bge.n	80018fc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	f003 020f 	and.w	r2, r3, #15
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	3338      	adds	r3, #56	; 0x38
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	4413      	add	r3, r2
 80018f0:	3304      	adds	r3, #4
 80018f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2201      	movs	r2, #1
 80018f8:	705a      	strb	r2, [r3, #1]
 80018fa:	e00f      	b.n	800191c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018fc:	78fb      	ldrb	r3, [r7, #3]
 80018fe:	f003 020f 	and.w	r2, r3, #15
 8001902:	4613      	mov	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	3304      	adds	r3, #4
 8001914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	b2da      	uxtb	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001928:	883a      	ldrh	r2, [r7, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	78ba      	ldrb	r2, [r7, #2]
 8001932:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	785b      	ldrb	r3, [r3, #1]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d004      	beq.n	8001946 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	b29a      	uxth	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001946:	78bb      	ldrb	r3, [r7, #2]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d102      	bne.n	8001952 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_PCD_EP_Open+0xaa>
 800195c:	2302      	movs	r3, #2
 800195e:	e00e      	b.n	800197e <HAL_PCD_EP_Open+0xc8>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68f9      	ldr	r1, [r7, #12]
 800196e:	4618      	mov	r0, r3
 8001970:	f001 fb72 	bl	8003058 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800197c:	7afb      	ldrb	r3, [r7, #11]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	460b      	mov	r3, r1
 8001990:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001996:	2b00      	cmp	r3, #0
 8001998:	da0f      	bge.n	80019ba <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	f003 020f 	and.w	r2, r3, #15
 80019a0:	4613      	mov	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	3338      	adds	r3, #56	; 0x38
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	3304      	adds	r3, #4
 80019b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2201      	movs	r2, #1
 80019b6:	705a      	strb	r2, [r3, #1]
 80019b8:	e00f      	b.n	80019da <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	f003 020f 	and.w	r2, r3, #15
 80019c0:	4613      	mov	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4413      	add	r3, r2
 80019d0:	3304      	adds	r3, #4
 80019d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_PCD_EP_Close+0x6e>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e00e      	b.n	8001a12 <HAL_PCD_EP_Close+0x8c>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68f9      	ldr	r1, [r7, #12]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f001 fbb0 	bl	8003168 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b086      	sub	sp, #24
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	60f8      	str	r0, [r7, #12]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	460b      	mov	r3, r1
 8001a28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a2a:	7afb      	ldrb	r3, [r7, #11]
 8001a2c:	f003 020f 	and.w	r2, r3, #15
 8001a30:	4613      	mov	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	1a9b      	subs	r3, r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	3304      	adds	r3, #4
 8001a42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a5c:	7afb      	ldrb	r3, [r7, #11]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d102      	bne.n	8001a76 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a76:	7afb      	ldrb	r3, [r7, #11]
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d109      	bne.n	8001a94 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	6979      	ldr	r1, [r7, #20]
 8001a8e:	f001 fe8b 	bl	80037a8 <USB_EP0StartXfer>
 8001a92:	e008      	b.n	8001aa6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	6979      	ldr	r1, [r7, #20]
 8001aa2:	f001 fc3d 	bl	8003320 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	f003 020f 	and.w	r2, r3, #15
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	1a9b      	subs	r3, r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	460b      	mov	r3, r1
 8001aee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001af0:	7afb      	ldrb	r3, [r7, #11]
 8001af2:	f003 020f 	and.w	r2, r3, #15
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	3338      	adds	r3, #56	; 0x38
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	3304      	adds	r3, #4
 8001b06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b20:	7afb      	ldrb	r3, [r7, #11]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d102      	bne.n	8001b3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d109      	bne.n	8001b58 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	461a      	mov	r2, r3
 8001b50:	6979      	ldr	r1, [r7, #20]
 8001b52:	f001 fe29 	bl	80037a8 <USB_EP0StartXfer>
 8001b56:	e008      	b.n	8001b6a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	6979      	ldr	r1, [r7, #20]
 8001b66:	f001 fbdb 	bl	8003320 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	f003 020f 	and.w	r2, r3, #15
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d901      	bls.n	8001b92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e050      	b.n	8001c34 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	da0f      	bge.n	8001bba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 020f 	and.w	r2, r3, #15
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	3338      	adds	r3, #56	; 0x38
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	3304      	adds	r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	705a      	strb	r2, [r3, #1]
 8001bb8:	e00d      	b.n	8001bd6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bba:	78fa      	ldrb	r2, [r7, #3]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	1a9b      	subs	r3, r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	3304      	adds	r3, #4
 8001bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d101      	bne.n	8001bf6 <HAL_PCD_EP_SetStall+0x82>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e01e      	b.n	8001c34 <HAL_PCD_EP_SetStall+0xc0>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68f9      	ldr	r1, [r7, #12]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 ff80 	bl	8003b0a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10a      	bne.n	8001c2a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	b2d9      	uxtb	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c24:	461a      	mov	r2, r3
 8001c26:	f002 f971 	bl	8003f0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	f003 020f 	and.w	r2, r3, #15
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d901      	bls.n	8001c5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e042      	b.n	8001ce0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	da0f      	bge.n	8001c82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	f003 020f 	and.w	r2, r3, #15
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	3338      	adds	r3, #56	; 0x38
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	3304      	adds	r3, #4
 8001c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	705a      	strb	r2, [r3, #1]
 8001c80:	e00f      	b.n	8001ca2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	f003 020f 	and.w	r2, r3, #15
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	3304      	adds	r3, #4
 8001c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_PCD_EP_ClrStall+0x86>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e00e      	b.n	8001ce0 <HAL_PCD_EP_ClrStall+0xa4>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68f9      	ldr	r1, [r7, #12]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 ff88 	bl	8003be6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	3338      	adds	r3, #56	; 0x38
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	699a      	ldr	r2, [r3, #24]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d901      	bls.n	8001d20 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e06c      	b.n	8001dfa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d902      	bls.n	8001d3c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	3303      	adds	r3, #3
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d44:	e02b      	b.n	8001d9e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d902      	bls.n	8001d62 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3303      	adds	r3, #3
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	68d9      	ldr	r1, [r3, #12]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	4603      	mov	r3, r0
 8001d80:	6978      	ldr	r0, [r7, #20]
 8001d82:	f001 fe64 	bl	8003a4e <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	441a      	add	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	441a      	add	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d809      	bhi.n	8001dc8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	699a      	ldr	r2, [r3, #24]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d203      	bcs.n	8001dc8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1be      	bne.n	8001d46 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	695a      	ldr	r2, [r3, #20]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d811      	bhi.n	8001df8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	2201      	movs	r2, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	6939      	ldr	r1, [r7, #16]
 8001df0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001df4:	4013      	ands	r3, r2
 8001df6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	333c      	adds	r3, #60	; 0x3c
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	f040 80a0 	bne.w	8001f7c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d015      	beq.n	8001e72 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4a72      	ldr	r2, [pc, #456]	; (8002014 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	f240 80dd 	bls.w	800200a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80d7 	beq.w	800200a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e6e:	6093      	str	r3, [r2, #8]
 8001e70:	e0cb      	b.n	800200a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d009      	beq.n	8001e90 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2320      	movs	r3, #32
 8001e8c:	6093      	str	r3, [r2, #8]
 8001e8e:	e0bc      	b.n	800200a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 80b7 	bne.w	800200a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4a5d      	ldr	r2, [pc, #372]	; (8002014 <PCD_EP_OutXfrComplete_int+0x210>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d90f      	bls.n	8001ec4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ec0:	6093      	str	r3, [r2, #8]
 8001ec2:	e0a2      	b.n	800200a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ed6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	0159      	lsls	r1, r3, #5
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	440b      	add	r3, r1
 8001ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001eea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	1a9b      	subs	r3, r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4403      	add	r3, r0
 8001efa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001efe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4403      	add	r3, r0
 8001f22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4419      	add	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4403      	add	r3, r0
 8001f38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f3c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d114      	bne.n	8001f6e <PCD_EP_OutXfrComplete_int+0x16a>
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d108      	bne.n	8001f6e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f66:	461a      	mov	r2, r3
 8001f68:	2101      	movs	r1, #1
 8001f6a:	f001 ffcf 	bl	8003f0c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	4619      	mov	r1, r3
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f003 fed1 	bl	8005d1c <HAL_PCD_DataOutStageCallback>
 8001f7a:	e046      	b.n	800200a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4a26      	ldr	r2, [pc, #152]	; (8002018 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d124      	bne.n	8001fce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00a      	beq.n	8001fa4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa0:	6093      	str	r3, [r2, #8]
 8001fa2:	e032      	b.n	800200a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d008      	beq.n	8001fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2320      	movs	r3, #32
 8001fbe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f003 fea8 	bl	8005d1c <HAL_PCD_DataOutStageCallback>
 8001fcc:	e01d      	b.n	800200a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d114      	bne.n	8001ffe <PCD_EP_OutXfrComplete_int+0x1fa>
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d108      	bne.n	8001ffe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	f001 ff87 	bl	8003f0c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	4619      	mov	r1, r3
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f003 fe89 	bl	8005d1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	4f54300a 	.word	0x4f54300a
 8002018:	4f54310a 	.word	0x4f54310a

0800201c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	333c      	adds	r3, #60	; 0x3c
 8002034:	3304      	adds	r3, #4
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d90e      	bls.n	8002070 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002058:	2b00      	cmp	r3, #0
 800205a:	d009      	beq.n	8002070 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002068:	461a      	mov	r2, r3
 800206a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800206e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f003 fe41 	bl	8005cf8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d90c      	bls.n	8002098 <PCD_EP_OutSetupPacket_int+0x7c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d108      	bne.n	8002098 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002090:	461a      	mov	r2, r3
 8002092:	2101      	movs	r1, #1
 8002094:	f001 ff3a 	bl	8003f0c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	4f54300a 	.word	0x4f54300a

080020a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	70fb      	strb	r3, [r7, #3]
 80020b4:	4613      	mov	r3, r2
 80020b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80020c6:	883b      	ldrh	r3, [r7, #0]
 80020c8:	0419      	lsls	r1, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28
 80020d4:	e028      	b.n	8002128 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	4413      	add	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
 80020e8:	e00d      	b.n	8002106 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	3340      	adds	r3, #64	; 0x40
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	4413      	add	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	3301      	adds	r3, #1
 8002104:	73fb      	strb	r3, [r7, #15]
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	3b01      	subs	r3, #1
 800210c:	429a      	cmp	r2, r3
 800210e:	d3ec      	bcc.n	80020ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002110:	883b      	ldrh	r3, [r7, #0]
 8002112:	0418      	lsls	r0, r3, #16
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6819      	ldr	r1, [r3, #0]
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	3b01      	subs	r3, #1
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	4302      	orrs	r2, r0
 8002120:	3340      	adds	r3, #64	; 0x40
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e25b      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d075      	beq.n	800227a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800218e:	4ba3      	ldr	r3, [pc, #652]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b04      	cmp	r3, #4
 8002198:	d00c      	beq.n	80021b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219a:	4ba0      	ldr	r3, [pc, #640]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d112      	bne.n	80021cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a6:	4b9d      	ldr	r3, [pc, #628]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021b2:	d10b      	bne.n	80021cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	4b99      	ldr	r3, [pc, #612]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d05b      	beq.n	8002278 <HAL_RCC_OscConfig+0x108>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d157      	bne.n	8002278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e236      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d4:	d106      	bne.n	80021e4 <HAL_RCC_OscConfig+0x74>
 80021d6:	4b91      	ldr	r3, [pc, #580]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a90      	ldr	r2, [pc, #576]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	e01d      	b.n	8002220 <HAL_RCC_OscConfig+0xb0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x98>
 80021ee:	4b8b      	ldr	r3, [pc, #556]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a8a      	ldr	r2, [pc, #552]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	4b88      	ldr	r3, [pc, #544]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a87      	ldr	r2, [pc, #540]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	e00b      	b.n	8002220 <HAL_RCC_OscConfig+0xb0>
 8002208:	4b84      	ldr	r3, [pc, #528]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a83      	ldr	r2, [pc, #524]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800220e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002212:	6013      	str	r3, [r2, #0]
 8002214:	4b81      	ldr	r3, [pc, #516]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a80      	ldr	r2, [pc, #512]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800221a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d013      	beq.n	8002250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002228:	f7fe fb44 	bl	80008b4 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002230:	f7fe fb40 	bl	80008b4 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	; 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e1fb      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	4b76      	ldr	r3, [pc, #472]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0xc0>
 800224e:	e014      	b.n	800227a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe fb30 	bl	80008b4 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002258:	f7fe fb2c 	bl	80008b4 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e1e7      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	4b6c      	ldr	r3, [pc, #432]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0xe8>
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d063      	beq.n	800234e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002286:	4b65      	ldr	r3, [pc, #404]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002292:	4b62      	ldr	r3, [pc, #392]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800229a:	2b08      	cmp	r3, #8
 800229c:	d11c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800229e:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d116      	bne.n	80022d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022aa:	4b5c      	ldr	r3, [pc, #368]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_RCC_OscConfig+0x152>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d001      	beq.n	80022c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e1bb      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c2:	4b56      	ldr	r3, [pc, #344]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4952      	ldr	r1, [pc, #328]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d6:	e03a      	b.n	800234e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e0:	4b4f      	ldr	r3, [pc, #316]	; (8002420 <HAL_RCC_OscConfig+0x2b0>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fae5 	bl	80008b4 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ee:	f7fe fae1 	bl	80008b4 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e19c      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	4b46      	ldr	r3, [pc, #280]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b43      	ldr	r3, [pc, #268]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4940      	ldr	r1, [pc, #256]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]
 8002320:	e015      	b.n	800234e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002322:	4b3f      	ldr	r3, [pc, #252]	; (8002420 <HAL_RCC_OscConfig+0x2b0>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fac4 	bl	80008b4 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002330:	f7fe fac0 	bl	80008b4 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e17b      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d030      	beq.n	80023bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d016      	beq.n	8002390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002362:	4b30      	ldr	r3, [pc, #192]	; (8002424 <HAL_RCC_OscConfig+0x2b4>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7fe faa4 	bl	80008b4 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002370:	f7fe faa0 	bl	80008b4 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e15b      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 8002384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x200>
 800238e:	e015      	b.n	80023bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002390:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_RCC_OscConfig+0x2b4>)
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002396:	f7fe fa8d 	bl	80008b4 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800239e:	f7fe fa89 	bl	80008b4 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e144      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80a0 	beq.w	800250a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10f      	bne.n	80023fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a0e      	ldr	r2, [pc, #56]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f6:	2301      	movs	r3, #1
 80023f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCC_OscConfig+0x2b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d121      	bne.n	800244a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_RCC_OscConfig+0x2b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a07      	ldr	r2, [pc, #28]	; (8002428 <HAL_RCC_OscConfig+0x2b8>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002412:	f7fe fa4f 	bl	80008b4 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002418:	e011      	b.n	800243e <HAL_RCC_OscConfig+0x2ce>
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	42470000 	.word	0x42470000
 8002424:	42470e80 	.word	0x42470e80
 8002428:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242c:	f7fe fa42 	bl	80008b4 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e0fd      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243e:	4b81      	ldr	r3, [pc, #516]	; (8002644 <HAL_RCC_OscConfig+0x4d4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d106      	bne.n	8002460 <HAL_RCC_OscConfig+0x2f0>
 8002452:	4b7d      	ldr	r3, [pc, #500]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	4a7c      	ldr	r2, [pc, #496]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6713      	str	r3, [r2, #112]	; 0x70
 800245e:	e01c      	b.n	800249a <HAL_RCC_OscConfig+0x32a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0x312>
 8002468:	4b77      	ldr	r3, [pc, #476]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 800246a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246c:	4a76      	ldr	r2, [pc, #472]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6713      	str	r3, [r2, #112]	; 0x70
 8002474:	4b74      	ldr	r3, [pc, #464]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002478:	4a73      	ldr	r2, [pc, #460]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6713      	str	r3, [r2, #112]	; 0x70
 8002480:	e00b      	b.n	800249a <HAL_RCC_OscConfig+0x32a>
 8002482:	4b71      	ldr	r3, [pc, #452]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a70      	ldr	r2, [pc, #448]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
 800248e:	4b6e      	ldr	r3, [pc, #440]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002492:	4a6d      	ldr	r2, [pc, #436]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d015      	beq.n	80024ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a2:	f7fe fa07 	bl	80008b4 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7fe fa03 	bl	80008b4 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0bc      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	4b61      	ldr	r3, [pc, #388]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ee      	beq.n	80024aa <HAL_RCC_OscConfig+0x33a>
 80024cc:	e014      	b.n	80024f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7fe f9f1 	bl	80008b4 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe f9ed 	bl	80008b4 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e0a6      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	4b56      	ldr	r3, [pc, #344]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 80024ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ee      	bne.n	80024d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d105      	bne.n	800250a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4b52      	ldr	r3, [pc, #328]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	4a51      	ldr	r2, [pc, #324]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002508:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8092 	beq.w	8002638 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002514:	4b4c      	ldr	r3, [pc, #304]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d05c      	beq.n	80025da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d141      	bne.n	80025ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b48      	ldr	r3, [pc, #288]	; (800264c <HAL_RCC_OscConfig+0x4dc>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe f9c1 	bl	80008b4 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe f9bd 	bl	80008b4 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e078      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002548:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69da      	ldr	r2, [r3, #28]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	019b      	lsls	r3, r3, #6
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	085b      	lsrs	r3, r3, #1
 800256c:	3b01      	subs	r3, #1
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	061b      	lsls	r3, r3, #24
 8002578:	4933      	ldr	r1, [pc, #204]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257e:	4b33      	ldr	r3, [pc, #204]	; (800264c <HAL_RCC_OscConfig+0x4dc>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fe f996 	bl	80008b4 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800258c:	f7fe f992 	bl	80008b4 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e04d      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x41c>
 80025aa:	e045      	b.n	8002638 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ac:	4b27      	ldr	r3, [pc, #156]	; (800264c <HAL_RCC_OscConfig+0x4dc>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b2:	f7fe f97f 	bl	80008b4 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ba:	f7fe f97b 	bl	80008b4 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e036      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025cc:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1f0      	bne.n	80025ba <HAL_RCC_OscConfig+0x44a>
 80025d8:	e02e      	b.n	8002638 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e029      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025e6:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_RCC_OscConfig+0x4d8>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d11c      	bne.n	8002634 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002604:	429a      	cmp	r2, r3
 8002606:	d115      	bne.n	8002634 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800260e:	4013      	ands	r3, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002614:	4293      	cmp	r3, r2
 8002616:	d10d      	bne.n	8002634 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d106      	bne.n	8002634 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d001      	beq.n	8002638 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40007000 	.word	0x40007000
 8002648:	40023800 	.word	0x40023800
 800264c:	42470060 	.word	0x42470060

08002650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0cc      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b68      	ldr	r3, [pc, #416]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d90c      	bls.n	800268c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b63      	ldr	r3, [pc, #396]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0b8      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	494d      	ldr	r1, [pc, #308]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d044      	beq.n	8002770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d119      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e07f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d003      	beq.n	800270e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270a:	2b03      	cmp	r3, #3
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e06f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271e:	4b3b      	ldr	r3, [pc, #236]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e067      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272e:	4b37      	ldr	r3, [pc, #220]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f023 0203 	bic.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4934      	ldr	r1, [pc, #208]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002740:	f7fe f8b8 	bl	80008b4 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	e00a      	b.n	800275e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002748:	f7fe f8b4 	bl	80008b4 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e04f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 020c 	and.w	r2, r3, #12
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	429a      	cmp	r2, r3
 800276e:	d1eb      	bne.n	8002748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d20c      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b22      	ldr	r3, [pc, #136]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e032      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4916      	ldr	r1, [pc, #88]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	490e      	ldr	r1, [pc, #56]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027d6:	f000 f821 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80027da:	4601      	mov	r1, r0
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	5cd3      	ldrb	r3, [r2, r3]
 80027ea:	fa21 f303 	lsr.w	r3, r1, r3
 80027ee:	4a09      	ldr	r2, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe f818 	bl	800082c <HAL_InitTick>

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00
 800280c:	40023800 	.word	0x40023800
 8002810:	080064b0 	.word	0x080064b0
 8002814:	20000004 	.word	0x20000004
 8002818:	20000008 	.word	0x20000008

0800281c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800281c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002822:	2300      	movs	r3, #0
 8002824:	607b      	str	r3, [r7, #4]
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	2300      	movs	r3, #0
 800282c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002832:	4b63      	ldr	r3, [pc, #396]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d007      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x32>
 800283e:	2b08      	cmp	r3, #8
 8002840:	d008      	beq.n	8002854 <HAL_RCC_GetSysClockFreq+0x38>
 8002842:	2b00      	cmp	r3, #0
 8002844:	f040 80b4 	bne.w	80029b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002848:	4b5e      	ldr	r3, [pc, #376]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800284a:	60bb      	str	r3, [r7, #8]
       break;
 800284c:	e0b3      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800284e:	4b5e      	ldr	r3, [pc, #376]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002850:	60bb      	str	r3, [r7, #8]
      break;
 8002852:	e0b0      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002854:	4b5a      	ldr	r3, [pc, #360]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800285c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800285e:	4b58      	ldr	r3, [pc, #352]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d04a      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800286a:	4b55      	ldr	r3, [pc, #340]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	099b      	lsrs	r3, r3, #6
 8002870:	f04f 0400 	mov.w	r4, #0
 8002874:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	ea03 0501 	and.w	r5, r3, r1
 8002880:	ea04 0602 	and.w	r6, r4, r2
 8002884:	4629      	mov	r1, r5
 8002886:	4632      	mov	r2, r6
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	f04f 0400 	mov.w	r4, #0
 8002890:	0154      	lsls	r4, r2, #5
 8002892:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002896:	014b      	lsls	r3, r1, #5
 8002898:	4619      	mov	r1, r3
 800289a:	4622      	mov	r2, r4
 800289c:	1b49      	subs	r1, r1, r5
 800289e:	eb62 0206 	sbc.w	r2, r2, r6
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	f04f 0400 	mov.w	r4, #0
 80028aa:	0194      	lsls	r4, r2, #6
 80028ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028b0:	018b      	lsls	r3, r1, #6
 80028b2:	1a5b      	subs	r3, r3, r1
 80028b4:	eb64 0402 	sbc.w	r4, r4, r2
 80028b8:	f04f 0100 	mov.w	r1, #0
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	00e2      	lsls	r2, r4, #3
 80028c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028c6:	00d9      	lsls	r1, r3, #3
 80028c8:	460b      	mov	r3, r1
 80028ca:	4614      	mov	r4, r2
 80028cc:	195b      	adds	r3, r3, r5
 80028ce:	eb44 0406 	adc.w	r4, r4, r6
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	0262      	lsls	r2, r4, #9
 80028dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80028e0:	0259      	lsls	r1, r3, #9
 80028e2:	460b      	mov	r3, r1
 80028e4:	4614      	mov	r4, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	4621      	mov	r1, r4
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f04f 0400 	mov.w	r4, #0
 80028f0:	461a      	mov	r2, r3
 80028f2:	4623      	mov	r3, r4
 80028f4:	f7fd fc70 	bl	80001d8 <__aeabi_uldivmod>
 80028f8:	4603      	mov	r3, r0
 80028fa:	460c      	mov	r4, r1
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e049      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002900:	4b2f      	ldr	r3, [pc, #188]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	f04f 0400 	mov.w	r4, #0
 800290a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	ea03 0501 	and.w	r5, r3, r1
 8002916:	ea04 0602 	and.w	r6, r4, r2
 800291a:	4629      	mov	r1, r5
 800291c:	4632      	mov	r2, r6
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	f04f 0400 	mov.w	r4, #0
 8002926:	0154      	lsls	r4, r2, #5
 8002928:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800292c:	014b      	lsls	r3, r1, #5
 800292e:	4619      	mov	r1, r3
 8002930:	4622      	mov	r2, r4
 8002932:	1b49      	subs	r1, r1, r5
 8002934:	eb62 0206 	sbc.w	r2, r2, r6
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	f04f 0400 	mov.w	r4, #0
 8002940:	0194      	lsls	r4, r2, #6
 8002942:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002946:	018b      	lsls	r3, r1, #6
 8002948:	1a5b      	subs	r3, r3, r1
 800294a:	eb64 0402 	sbc.w	r4, r4, r2
 800294e:	f04f 0100 	mov.w	r1, #0
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	00e2      	lsls	r2, r4, #3
 8002958:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800295c:	00d9      	lsls	r1, r3, #3
 800295e:	460b      	mov	r3, r1
 8002960:	4614      	mov	r4, r2
 8002962:	195b      	adds	r3, r3, r5
 8002964:	eb44 0406 	adc.w	r4, r4, r6
 8002968:	f04f 0100 	mov.w	r1, #0
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	02a2      	lsls	r2, r4, #10
 8002972:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002976:	0299      	lsls	r1, r3, #10
 8002978:	460b      	mov	r3, r1
 800297a:	4614      	mov	r4, r2
 800297c:	4618      	mov	r0, r3
 800297e:	4621      	mov	r1, r4
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f04f 0400 	mov.w	r4, #0
 8002986:	461a      	mov	r2, r3
 8002988:	4623      	mov	r3, r4
 800298a:	f7fd fc25 	bl	80001d8 <__aeabi_uldivmod>
 800298e:	4603      	mov	r3, r0
 8002990:	460c      	mov	r4, r1
 8002992:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	3301      	adds	r3, #1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	60bb      	str	r3, [r7, #8]
      break;
 80029ae:	e002      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029b2:	60bb      	str	r3, [r7, #8]
      break;
 80029b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b6:	68bb      	ldr	r3, [r7, #8]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	00f42400 	.word	0x00f42400
 80029c8:	007a1200 	.word	0x007a1200

080029cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000004 	.word	0x20000004

080029e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029e4:	b084      	sub	sp, #16
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	f107 001c 	add.w	r0, r7, #28
 80029f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d122      	bne.n	8002a42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d105      	bne.n	8002a36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f001 fac6 	bl	8003fc8 <USB_CoreReset>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	73fb      	strb	r3, [r7, #15]
 8002a40:	e01a      	b.n	8002a78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f001 faba 	bl	8003fc8 <USB_CoreReset>
 8002a54:	4603      	mov	r3, r0
 8002a56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38
 8002a6a:	e005      	b.n	8002a78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d10b      	bne.n	8002a96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f043 0206 	orr.w	r2, r3, #6
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002aa2:	b004      	add	sp, #16
 8002aa4:	4770      	bx	lr
	...

08002aa8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d165      	bne.n	8002b88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4a41      	ldr	r2, [pc, #260]	; (8002bc4 <USB_SetTurnaroundTime+0x11c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d906      	bls.n	8002ad2 <USB_SetTurnaroundTime+0x2a>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4a40      	ldr	r2, [pc, #256]	; (8002bc8 <USB_SetTurnaroundTime+0x120>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d802      	bhi.n	8002ad2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002acc:	230f      	movs	r3, #15
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	e062      	b.n	8002b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	4a3c      	ldr	r2, [pc, #240]	; (8002bc8 <USB_SetTurnaroundTime+0x120>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d906      	bls.n	8002ae8 <USB_SetTurnaroundTime+0x40>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	4a3b      	ldr	r2, [pc, #236]	; (8002bcc <USB_SetTurnaroundTime+0x124>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d802      	bhi.n	8002ae8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002ae2:	230e      	movs	r3, #14
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e057      	b.n	8002b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4a38      	ldr	r2, [pc, #224]	; (8002bcc <USB_SetTurnaroundTime+0x124>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d906      	bls.n	8002afe <USB_SetTurnaroundTime+0x56>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4a37      	ldr	r2, [pc, #220]	; (8002bd0 <USB_SetTurnaroundTime+0x128>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d802      	bhi.n	8002afe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002af8:	230d      	movs	r3, #13
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	e04c      	b.n	8002b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4a33      	ldr	r2, [pc, #204]	; (8002bd0 <USB_SetTurnaroundTime+0x128>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d906      	bls.n	8002b14 <USB_SetTurnaroundTime+0x6c>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4a32      	ldr	r2, [pc, #200]	; (8002bd4 <USB_SetTurnaroundTime+0x12c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d802      	bhi.n	8002b14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002b0e:	230c      	movs	r3, #12
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	e041      	b.n	8002b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4a2f      	ldr	r2, [pc, #188]	; (8002bd4 <USB_SetTurnaroundTime+0x12c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d906      	bls.n	8002b2a <USB_SetTurnaroundTime+0x82>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	4a2e      	ldr	r2, [pc, #184]	; (8002bd8 <USB_SetTurnaroundTime+0x130>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d802      	bhi.n	8002b2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002b24:	230b      	movs	r3, #11
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e036      	b.n	8002b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	4a2a      	ldr	r2, [pc, #168]	; (8002bd8 <USB_SetTurnaroundTime+0x130>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d906      	bls.n	8002b40 <USB_SetTurnaroundTime+0x98>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	4a29      	ldr	r2, [pc, #164]	; (8002bdc <USB_SetTurnaroundTime+0x134>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d802      	bhi.n	8002b40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002b3a:	230a      	movs	r3, #10
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	e02b      	b.n	8002b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <USB_SetTurnaroundTime+0x134>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d906      	bls.n	8002b56 <USB_SetTurnaroundTime+0xae>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <USB_SetTurnaroundTime+0x138>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d802      	bhi.n	8002b56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002b50:	2309      	movs	r3, #9
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	e020      	b.n	8002b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4a21      	ldr	r2, [pc, #132]	; (8002be0 <USB_SetTurnaroundTime+0x138>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d906      	bls.n	8002b6c <USB_SetTurnaroundTime+0xc4>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4a20      	ldr	r2, [pc, #128]	; (8002be4 <USB_SetTurnaroundTime+0x13c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d802      	bhi.n	8002b6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002b66:	2308      	movs	r3, #8
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	e015      	b.n	8002b98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	4a1d      	ldr	r2, [pc, #116]	; (8002be4 <USB_SetTurnaroundTime+0x13c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d906      	bls.n	8002b82 <USB_SetTurnaroundTime+0xda>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <USB_SetTurnaroundTime+0x140>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d802      	bhi.n	8002b82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002b7c:	2307      	movs	r3, #7
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	e00a      	b.n	8002b98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002b82:	2306      	movs	r3, #6
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e007      	b.n	8002b98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002b8e:	2309      	movs	r3, #9
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e001      	b.n	8002b98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002b94:	2309      	movs	r3, #9
 8002b96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	029b      	lsls	r3, r3, #10
 8002bac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	00d8acbf 	.word	0x00d8acbf
 8002bc8:	00e4e1bf 	.word	0x00e4e1bf
 8002bcc:	00f423ff 	.word	0x00f423ff
 8002bd0:	0106737f 	.word	0x0106737f
 8002bd4:	011a499f 	.word	0x011a499f
 8002bd8:	01312cff 	.word	0x01312cff
 8002bdc:	014ca43f 	.word	0x014ca43f
 8002be0:	016e35ff 	.word	0x016e35ff
 8002be4:	01a6ab1f 	.word	0x01a6ab1f
 8002be8:	01e847ff 	.word	0x01e847ff

08002bec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f043 0201 	orr.w	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f023 0201 	bic.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d106      	bne.n	8002c5c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	e00b      	b.n	8002c74 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	e001      	b.n	8002c74 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e003      	b.n	8002c7c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002c74:	2032      	movs	r0, #50	; 0x32
 8002c76:	f7fd fe29 	bl	80008cc <HAL_Delay>

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c84:	b084      	sub	sp, #16
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	e009      	b.n	8002cb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	3340      	adds	r3, #64	; 0x40
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2b0e      	cmp	r3, #14
 8002cbc:	d9f2      	bls.n	8002ca4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d11c      	bne.n	8002cfe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cd2:	f043 0302 	orr.w	r3, r3, #2
 8002cd6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38
 8002cfc:	e00b      	b.n	8002d16 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	2300      	movs	r3, #0
 8002d20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d28:	4619      	mov	r1, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d30:	461a      	mov	r2, r3
 8002d32:	680b      	ldr	r3, [r1, #0]
 8002d34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d10c      	bne.n	8002d56 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d104      	bne.n	8002d4c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d42:	2100      	movs	r1, #0
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f949 	bl	8002fdc <USB_SetDevSpeed>
 8002d4a:	e008      	b.n	8002d5e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f944 	bl	8002fdc <USB_SetDevSpeed>
 8002d54:	e003      	b.n	8002d5e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d56:	2103      	movs	r1, #3
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f93f 	bl	8002fdc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d5e:	2110      	movs	r1, #16
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8f3 	bl	8002f4c <USB_FlushTxFifo>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f911 	bl	8002f98 <USB_FlushRxFifo>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d86:	461a      	mov	r2, r3
 8002d88:	2300      	movs	r3, #0
 8002d8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d92:	461a      	mov	r2, r3
 8002d94:	2300      	movs	r3, #0
 8002d96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2300      	movs	r3, #0
 8002da2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	e043      	b.n	8002e32 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dc0:	d118      	bne.n	8002df4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	e013      	b.n	8002e06 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dea:	461a      	mov	r2, r3
 8002dec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e008      	b.n	8002e06 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e00:	461a      	mov	r2, r3
 8002e02:	2300      	movs	r3, #0
 8002e04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e12:	461a      	mov	r2, r3
 8002e14:	2300      	movs	r3, #0
 8002e16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e24:	461a      	mov	r2, r3
 8002e26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d3b7      	bcc.n	8002daa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	e043      	b.n	8002ec8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e56:	d118      	bne.n	8002e8a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10a      	bne.n	8002e74 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e013      	b.n	8002e9c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e80:	461a      	mov	r2, r3
 8002e82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	e008      	b.n	8002e9c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e96:	461a      	mov	r2, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2300      	movs	r3, #0
 8002eac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ec0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d3b7      	bcc.n	8002e40 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ee2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002ef0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f043 0210 	orr.w	r2, r3, #16
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	4b0f      	ldr	r3, [pc, #60]	; (8002f48 <USB_DevInit+0x2c4>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f043 0208 	orr.w	r2, r3, #8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d107      	bne.n	8002f38 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f44:	b004      	add	sp, #16
 8002f46:	4770      	bx	lr
 8002f48:	803c3800 	.word	0x803c3800

08002f4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	019b      	lsls	r3, r3, #6
 8002f5e:	f043 0220 	orr.w	r2, r3, #32
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <USB_FlushTxFifo+0x48>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e006      	b.n	8002f86 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d0f0      	beq.n	8002f66 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	00030d40 	.word	0x00030d40

08002f98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2210      	movs	r2, #16
 8002fa8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3301      	adds	r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4a09      	ldr	r2, [pc, #36]	; (8002fd8 <USB_FlushRxFifo+0x40>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e006      	b.n	8002fca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d0f0      	beq.n	8002faa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	00030d40 	.word	0x00030d40

08002fdc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	68f9      	ldr	r1, [r7, #12]
 8002ff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800300e:	b480      	push	{r7}
 8003010:	b087      	sub	sp, #28
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0306 	and.w	r3, r3, #6
 8003026:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800302e:	2300      	movs	r3, #0
 8003030:	75fb      	strb	r3, [r7, #23]
 8003032:	e00a      	b.n	800304a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d002      	beq.n	8003040 <USB_GetDevSpeed+0x32>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b06      	cmp	r3, #6
 800303e:	d102      	bne.n	8003046 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003040:	2302      	movs	r3, #2
 8003042:	75fb      	strb	r3, [r7, #23]
 8003044:	e001      	b.n	800304a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003046:	230f      	movs	r3, #15
 8003048:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800304a:	7dfb      	ldrb	r3, [r7, #23]
}
 800304c:	4618      	mov	r0, r3
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	785b      	ldrb	r3, [r3, #1]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d13a      	bne.n	80030ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	2101      	movs	r1, #1
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	b29b      	uxth	r3, r3
 800308c:	68f9      	ldr	r1, [r7, #12]
 800308e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003092:	4313      	orrs	r3, r2
 8003094:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d155      	bne.n	8003158 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	78db      	ldrb	r3, [r3, #3]
 80030c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	059b      	lsls	r3, r3, #22
 80030ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030d0:	4313      	orrs	r3, r2
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	0151      	lsls	r1, r2, #5
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	440a      	add	r2, r1
 80030da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	e036      	b.n	8003158 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f0:	69da      	ldr	r2, [r3, #28]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	2101      	movs	r1, #1
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	68f9      	ldr	r1, [r7, #12]
 8003104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003108:	4313      	orrs	r3, r2
 800310a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d11a      	bne.n	8003158 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4413      	add	r3, r2
 800312a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	78db      	ldrb	r3, [r3, #3]
 800313c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800313e:	430b      	orrs	r3, r1
 8003140:	4313      	orrs	r3, r2
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	0151      	lsls	r1, r2, #5
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	440a      	add	r2, r1
 800314a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003156:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	785b      	ldrb	r3, [r3, #1]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d161      	bne.n	8003248 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800319a:	d11f      	bne.n	80031dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	0151      	lsls	r1, r2, #5
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	440a      	add	r2, r1
 80031b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	0151      	lsls	r1, r2, #5
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	440a      	add	r2, r1
 80031d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	2101      	movs	r1, #1
 80031ee:	fa01 f303 	lsl.w	r3, r1, r3
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	68f9      	ldr	r1, [r7, #12]
 80031f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031fc:	4013      	ands	r3, r2
 80031fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	2101      	movs	r1, #1
 8003212:	fa01 f303 	lsl.w	r3, r1, r3
 8003216:	b29b      	uxth	r3, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003220:	4013      	ands	r3, r2
 8003222:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	0159      	lsls	r1, r3, #5
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	440b      	add	r3, r1
 800323a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323e:	4619      	mov	r1, r3
 8003240:	4b35      	ldr	r3, [pc, #212]	; (8003318 <USB_DeactivateEndpoint+0x1b0>)
 8003242:	4013      	ands	r3, r2
 8003244:	600b      	str	r3, [r1, #0]
 8003246:	e060      	b.n	800330a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800325a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800325e:	d11f      	bne.n	80032a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	0151      	lsls	r1, r2, #5
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	440a      	add	r2, r1
 8003276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800327a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800327e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	0151      	lsls	r1, r2, #5
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	440a      	add	r2, r1
 8003296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800329a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800329e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	2101      	movs	r1, #1
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	041b      	lsls	r3, r3, #16
 80032b8:	43db      	mvns	r3, r3
 80032ba:	68f9      	ldr	r1, [r7, #12]
 80032bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032c0:	4013      	ands	r3, r2
 80032c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	2101      	movs	r1, #1
 80032d6:	fa01 f303 	lsl.w	r3, r1, r3
 80032da:	041b      	lsls	r3, r3, #16
 80032dc:	43db      	mvns	r3, r3
 80032de:	68f9      	ldr	r1, [r7, #12]
 80032e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032e4:	4013      	ands	r3, r2
 80032e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	0159      	lsls	r1, r3, #5
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	440b      	add	r3, r1
 80032fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003302:	4619      	mov	r1, r3
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <USB_DeactivateEndpoint+0x1b4>)
 8003306:	4013      	ands	r3, r2
 8003308:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	ec337800 	.word	0xec337800
 800331c:	eff37800 	.word	0xeff37800

08003320 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	; 0x28
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	4613      	mov	r3, r2
 800332c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	2b01      	cmp	r3, #1
 800333e:	f040 815c 	bne.w	80035fa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d132      	bne.n	80033b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4413      	add	r3, r2
 8003352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	0151      	lsls	r1, r2, #5
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	440a      	add	r2, r1
 8003360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003364:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003368:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800336c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	4413      	add	r3, r2
 8003376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	0151      	lsls	r1, r2, #5
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	440a      	add	r2, r1
 8003384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003388:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800338c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	0151      	lsls	r1, r2, #5
 80033a0:	69fa      	ldr	r2, [r7, #28]
 80033a2:	440a      	add	r2, r1
 80033a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033a8:	0cdb      	lsrs	r3, r3, #19
 80033aa:	04db      	lsls	r3, r3, #19
 80033ac:	6113      	str	r3, [r2, #16]
 80033ae:	e074      	b.n	800349a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	0151      	lsls	r1, r2, #5
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	440a      	add	r2, r1
 80033c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033ca:	0cdb      	lsrs	r3, r3, #19
 80033cc:	04db      	lsls	r3, r3, #19
 80033ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	0151      	lsls	r1, r2, #5
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	440a      	add	r2, r1
 80033e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6959      	ldr	r1, [r3, #20]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	440b      	add	r3, r1
 800340c:	1e59      	subs	r1, r3, #1
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	fbb1 f3f3 	udiv	r3, r1, r3
 8003416:	04d9      	lsls	r1, r3, #19
 8003418:	4b9d      	ldr	r3, [pc, #628]	; (8003690 <USB_EPStartXfer+0x370>)
 800341a:	400b      	ands	r3, r1
 800341c:	69b9      	ldr	r1, [r7, #24]
 800341e:	0148      	lsls	r0, r1, #5
 8003420:	69f9      	ldr	r1, [r7, #28]
 8003422:	4401      	add	r1, r0
 8003424:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003428:	4313      	orrs	r3, r2
 800342a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003442:	69b9      	ldr	r1, [r7, #24]
 8003444:	0148      	lsls	r0, r1, #5
 8003446:	69f9      	ldr	r1, [r7, #28]
 8003448:	4401      	add	r1, r0
 800344a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800344e:	4313      	orrs	r3, r2
 8003450:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	78db      	ldrb	r3, [r3, #3]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d11f      	bne.n	800349a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	015a      	lsls	r2, r3, #5
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	4413      	add	r3, r2
 8003462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	0151      	lsls	r1, r2, #5
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	440a      	add	r2, r1
 8003470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003474:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003478:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	0151      	lsls	r1, r2, #5
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	440a      	add	r2, r1
 8003490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003494:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003498:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d14b      	bne.n	8003538 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d009      	beq.n	80034bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	78db      	ldrb	r3, [r3, #3]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d128      	bne.n	8003516 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d110      	bne.n	80034f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	0151      	lsls	r1, r2, #5
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	440a      	add	r2, r1
 80034ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	e00f      	b.n	8003516 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	0151      	lsls	r1, r2, #5
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	440a      	add	r2, r1
 800350c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003514:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	4413      	add	r3, r2
 800351e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	0151      	lsls	r1, r2, #5
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	440a      	add	r2, r1
 800352c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003530:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e12f      	b.n	8003798 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	0151      	lsls	r1, r2, #5
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	440a      	add	r2, r1
 800354e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003552:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003556:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	78db      	ldrb	r3, [r3, #3]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d015      	beq.n	800358c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8117 	beq.w	8003798 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	2101      	movs	r1, #1
 800357c:	fa01 f303 	lsl.w	r3, r1, r3
 8003580:	69f9      	ldr	r1, [r7, #28]
 8003582:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003586:	4313      	orrs	r3, r2
 8003588:	634b      	str	r3, [r1, #52]	; 0x34
 800358a:	e105      	b.n	8003798 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d110      	bne.n	80035be <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	0151      	lsls	r1, r2, #5
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	440a      	add	r2, r1
 80035b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	e00f      	b.n	80035de <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	0151      	lsls	r1, r2, #5
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	440a      	add	r2, r1
 80035d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	68d9      	ldr	r1, [r3, #12]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	b298      	uxth	r0, r3
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	4603      	mov	r3, r0
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 fa2b 	bl	8003a4e <USB_WritePacket>
 80035f8:	e0ce      	b.n	8003798 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	0151      	lsls	r1, r2, #5
 800360c:	69fa      	ldr	r2, [r7, #28]
 800360e:	440a      	add	r2, r1
 8003610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003614:	0cdb      	lsrs	r3, r3, #19
 8003616:	04db      	lsls	r3, r3, #19
 8003618:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	0151      	lsls	r1, r2, #5
 800362c:	69fa      	ldr	r2, [r7, #28]
 800362e:	440a      	add	r2, r1
 8003630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003634:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003638:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800363c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d126      	bne.n	8003694 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365c:	69b9      	ldr	r1, [r7, #24]
 800365e:	0148      	lsls	r0, r1, #5
 8003660:	69f9      	ldr	r1, [r7, #28]
 8003662:	4401      	add	r1, r0
 8003664:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003668:	4313      	orrs	r3, r2
 800366a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	015a      	lsls	r2, r3, #5
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	4413      	add	r3, r2
 8003674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	0151      	lsls	r1, r2, #5
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	440a      	add	r2, r1
 8003682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003686:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800368a:	6113      	str	r3, [r2, #16]
 800368c:	e036      	b.n	80036fc <USB_EPStartXfer+0x3dc>
 800368e:	bf00      	nop
 8003690:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	695a      	ldr	r2, [r3, #20]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4413      	add	r3, r2
 800369e:	1e5a      	subs	r2, r3, #1
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	8afb      	ldrh	r3, [r7, #22]
 80036ba:	04d9      	lsls	r1, r3, #19
 80036bc:	4b39      	ldr	r3, [pc, #228]	; (80037a4 <USB_EPStartXfer+0x484>)
 80036be:	400b      	ands	r3, r1
 80036c0:	69b9      	ldr	r1, [r7, #24]
 80036c2:	0148      	lsls	r0, r1, #5
 80036c4:	69f9      	ldr	r1, [r7, #28]
 80036c6:	4401      	add	r1, r0
 80036c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036cc:	4313      	orrs	r3, r2
 80036ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	8af9      	ldrh	r1, [r7, #22]
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ec:	69b9      	ldr	r1, [r7, #24]
 80036ee:	0148      	lsls	r0, r1, #5
 80036f0:	69f9      	ldr	r1, [r7, #28]
 80036f2:	4401      	add	r1, r0
 80036f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036f8:	4313      	orrs	r3, r2
 80036fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80036fc:	79fb      	ldrb	r3, [r7, #7]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d10d      	bne.n	800371e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d009      	beq.n	800371e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	68d9      	ldr	r1, [r3, #12]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371a:	460a      	mov	r2, r1
 800371c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	78db      	ldrb	r3, [r3, #3]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d128      	bne.n	8003778 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d110      	bne.n	8003758 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	0151      	lsls	r1, r2, #5
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	440a      	add	r2, r1
 800374c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003750:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e00f      	b.n	8003778 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	0151      	lsls	r1, r2, #5
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	440a      	add	r2, r1
 800376e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003776:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	0151      	lsls	r1, r2, #5
 800378a:	69fa      	ldr	r2, [r7, #28]
 800378c:	440a      	add	r2, r1
 800378e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003792:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003796:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3720      	adds	r7, #32
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	1ff80000 	.word	0x1ff80000

080037a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	4613      	mov	r3, r2
 80037b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	785b      	ldrb	r3, [r3, #1]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	f040 80cd 	bne.w	8003964 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d132      	bne.n	8003838 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	0151      	lsls	r1, r2, #5
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	440a      	add	r2, r1
 80037e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	0151      	lsls	r1, r2, #5
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	440a      	add	r2, r1
 800380c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	4413      	add	r3, r2
 800381e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	0151      	lsls	r1, r2, #5
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	440a      	add	r2, r1
 800382c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003830:	0cdb      	lsrs	r3, r3, #19
 8003832:	04db      	lsls	r3, r3, #19
 8003834:	6113      	str	r3, [r2, #16]
 8003836:	e04e      	b.n	80038d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	0151      	lsls	r1, r2, #5
 800384a:	697a      	ldr	r2, [r7, #20]
 800384c:	440a      	add	r2, r1
 800384e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003852:	0cdb      	lsrs	r3, r3, #19
 8003854:	04db      	lsls	r3, r3, #19
 8003856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	0151      	lsls	r1, r2, #5
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	440a      	add	r2, r1
 800386e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003872:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003876:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800387a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	695a      	ldr	r2, [r3, #20]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	429a      	cmp	r2, r3
 8003886:	d903      	bls.n	8003890 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	0151      	lsls	r1, r2, #5
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	440a      	add	r2, r1
 80038a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038c6:	6939      	ldr	r1, [r7, #16]
 80038c8:	0148      	lsls	r0, r1, #5
 80038ca:	6979      	ldr	r1, [r7, #20]
 80038cc:	4401      	add	r1, r0
 80038ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038d2:	4313      	orrs	r3, r2
 80038d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d11e      	bne.n	800391a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d009      	beq.n	80038f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f0:	461a      	mov	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	0151      	lsls	r1, r2, #5
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	440a      	add	r2, r1
 800390e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003912:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	e092      	b.n	8003a40 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	0151      	lsls	r1, r2, #5
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	440a      	add	r2, r1
 8003930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003934:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003938:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d07e      	beq.n	8003a40 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003948:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	2101      	movs	r1, #1
 8003954:	fa01 f303 	lsl.w	r3, r1, r3
 8003958:	6979      	ldr	r1, [r7, #20]
 800395a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800395e:	4313      	orrs	r3, r2
 8003960:	634b      	str	r3, [r1, #52]	; 0x34
 8003962:	e06d      	b.n	8003a40 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	0151      	lsls	r1, r2, #5
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	440a      	add	r2, r1
 800397a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800397e:	0cdb      	lsrs	r3, r3, #19
 8003980:	04db      	lsls	r3, r3, #19
 8003982:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	0151      	lsls	r1, r2, #5
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	440a      	add	r2, r1
 800399a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800399e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039a6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	0151      	lsls	r1, r2, #5
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	440a      	add	r2, r1
 80039ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ee:	6939      	ldr	r1, [r7, #16]
 80039f0:	0148      	lsls	r0, r1, #5
 80039f2:	6979      	ldr	r1, [r7, #20]
 80039f4:	4401      	add	r1, r0
 80039f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039fa:	4313      	orrs	r3, r2
 80039fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80039fe:	79fb      	ldrb	r3, [r7, #7]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d10d      	bne.n	8003a20 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	68d9      	ldr	r1, [r3, #12]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1c:	460a      	mov	r2, r1
 8003a1e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	0151      	lsls	r1, r2, #5
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	440a      	add	r2, r1
 8003a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b089      	sub	sp, #36	; 0x24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	4611      	mov	r1, r2
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	71fb      	strb	r3, [r7, #7]
 8003a60:	4613      	mov	r3, r2
 8003a62:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003a6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d11a      	bne.n	8003aaa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a74:	88bb      	ldrh	r3, [r7, #4]
 8003a76:	3303      	adds	r3, #3
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	e00f      	b.n	8003aa2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	031a      	lsls	r2, r3, #12
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8e:	461a      	mov	r2, r3
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	61bb      	str	r3, [r7, #24]
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d3eb      	bcc.n	8003a82 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3724      	adds	r7, #36	; 0x24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b089      	sub	sp, #36	; 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	3303      	adds	r3, #3
 8003ad2:	089b      	lsrs	r3, r3, #2
 8003ad4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	e00b      	b.n	8003af4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	3304      	adds	r3, #4
 8003aec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	3301      	adds	r3, #1
 8003af2:	61bb      	str	r3, [r7, #24]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d3ef      	bcc.n	8003adc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003afc:	69fb      	ldr	r3, [r7, #28]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3724      	adds	r7, #36	; 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
 8003b12:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	785b      	ldrb	r3, [r3, #1]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d12c      	bne.n	8003b80 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	db12      	blt.n	8003b5e <USB_EPSetStall+0x54>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00f      	beq.n	8003b5e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	0151      	lsls	r1, r2, #5
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	440a      	add	r2, r1
 8003b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b5c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	0151      	lsls	r1, r2, #5
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	440a      	add	r2, r1
 8003b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e02b      	b.n	8003bd8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	db12      	blt.n	8003bb8 <USB_EPSetStall+0xae>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00f      	beq.n	8003bb8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	0151      	lsls	r1, r2, #5
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	440a      	add	r2, r1
 8003bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bb6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	0151      	lsls	r1, r2, #5
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	440a      	add	r2, r1
 8003bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b085      	sub	sp, #20
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	785b      	ldrb	r3, [r3, #1]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d128      	bne.n	8003c54 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	0151      	lsls	r1, r2, #5
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	440a      	add	r2, r1
 8003c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c20:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	78db      	ldrb	r3, [r3, #3]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d003      	beq.n	8003c32 <USB_EPClearStall+0x4c>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	78db      	ldrb	r3, [r3, #3]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d138      	bne.n	8003ca4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	0151      	lsls	r1, r2, #5
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	440a      	add	r2, r1
 8003c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	e027      	b.n	8003ca4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	0151      	lsls	r1, r2, #5
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	440a      	add	r2, r1
 8003c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	78db      	ldrb	r3, [r3, #3]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d003      	beq.n	8003c84 <USB_EPClearStall+0x9e>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	78db      	ldrb	r3, [r3, #3]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d10f      	bne.n	8003ca4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	0151      	lsls	r1, r2, #5
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	440a      	add	r2, r1
 8003c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b085      	sub	sp, #20
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cd4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003ce6:	68f9      	ldr	r1, [r7, #12]
 8003ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cec:	4313      	orrs	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d18:	f023 0303 	bic.w	r3, r3, #3
 8003d1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2c:	f023 0302 	bic.w	r3, r3, #2
 8003d30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d6e:	f043 0302 	orr.w	r3, r3, #2
 8003d72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b085      	sub	sp, #20
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4013      	ands	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	0c1b      	lsrs	r3, r3, #16
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	b29b      	uxth	r3, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7c:	01db      	lsls	r3, r3, #7
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ede:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ee2:	f023 0307 	bic.w	r3, r3, #7
 8003ee6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	460b      	mov	r3, r1
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	333c      	adds	r3, #60	; 0x3c
 8003f22:	3304      	adds	r3, #4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4a26      	ldr	r2, [pc, #152]	; (8003fc4 <USB_EP0_OutStart+0xb8>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d90a      	bls.n	8003f46 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f40:	d101      	bne.n	8003f46 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e037      	b.n	8003fb6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2300      	movs	r3, #0
 8003f50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f74:	f043 0318 	orr.w	r3, r3, #24
 8003f78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f88:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003f8c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003f8e:	7afb      	ldrb	r3, [r7, #11]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d10f      	bne.n	8003fb4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003fb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	4f54300a 	.word	0x4f54300a

08003fc8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a13      	ldr	r2, [pc, #76]	; (800402c <USB_CoreReset+0x64>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e01b      	b.n	800401e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	daf2      	bge.n	8003fd4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3301      	adds	r3, #1
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a09      	ldr	r2, [pc, #36]	; (800402c <USB_CoreReset+0x64>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e006      	b.n	800401e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b01      	cmp	r3, #1
 800401a:	d0f0      	beq.n	8003ffe <USB_CoreReset+0x36>

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	00030d40 	.word	0x00030d40

08004030 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800403c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004040:	f002 f92c 	bl	800629c <malloc>
 8004044:	4603      	mov	r3, r0
 8004046:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d105      	bne.n	800405a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004056:	2302      	movs	r3, #2
 8004058:	e066      	b.n	8004128 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	7c1b      	ldrb	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d119      	bne.n	800409e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800406a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800406e:	2202      	movs	r2, #2
 8004070:	2181      	movs	r1, #129	; 0x81
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f001 ff99 	bl	8005faa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800407e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004082:	2202      	movs	r2, #2
 8004084:	2101      	movs	r1, #1
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f001 ff8f 	bl	8005faa <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2210      	movs	r2, #16
 8004098:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800409c:	e016      	b.n	80040cc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800409e:	2340      	movs	r3, #64	; 0x40
 80040a0:	2202      	movs	r2, #2
 80040a2:	2181      	movs	r1, #129	; 0x81
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f001 ff80 	bl	8005faa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80040b0:	2340      	movs	r3, #64	; 0x40
 80040b2:	2202      	movs	r2, #2
 80040b4:	2101      	movs	r1, #1
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f001 ff77 	bl	8005faa <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2210      	movs	r2, #16
 80040c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80040cc:	2308      	movs	r3, #8
 80040ce:	2203      	movs	r2, #3
 80040d0:	2182      	movs	r1, #130	; 0x82
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f001 ff69 	bl	8005faa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	7c1b      	ldrb	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800410c:	2101      	movs	r1, #1
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f002 f83a 	bl	8006188 <USBD_LL_PrepareReceive>
 8004114:	e007      	b.n	8004126 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800411c:	2340      	movs	r3, #64	; 0x40
 800411e:	2101      	movs	r1, #1
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f002 f831 	bl	8006188 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004140:	2181      	movs	r1, #129	; 0x81
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f001 ff57 	bl	8005ff6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800414e:	2101      	movs	r1, #1
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f001 ff50 	bl	8005ff6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800415e:	2182      	movs	r1, #130	; 0x82
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f001 ff48 	bl	8005ff6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00e      	beq.n	800419e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004190:	4618      	mov	r0, r3
 8004192:	f002 f88b 	bl	80062ac <free>
    pdev->pClassData = NULL;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800419e:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041b8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d03a      	beq.n	8004248 <USBD_CDC_Setup+0xa0>
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	f040 8097 	bne.w	8004306 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	88db      	ldrh	r3, [r3, #6]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d029      	beq.n	8004234 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	b25b      	sxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da11      	bge.n	800420e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80041f6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	88d2      	ldrh	r2, [r2, #6]
 80041fc:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80041fe:	6939      	ldr	r1, [r7, #16]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	88db      	ldrh	r3, [r3, #6]
 8004204:	461a      	mov	r2, r3
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f001 fa9d 	bl	8005746 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800420c:	e082      	b.n	8004314 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	785a      	ldrb	r2, [r3, #1]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	88db      	ldrh	r3, [r3, #6]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004224:	6939      	ldr	r1, [r7, #16]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	88db      	ldrh	r3, [r3, #6]
 800422a:	461a      	mov	r2, r3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f001 fab6 	bl	800579e <USBD_CtlPrepareRx>
    break;
 8004232:	e06f      	b.n	8004314 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	7850      	ldrb	r0, [r2, #1]
 8004240:	2200      	movs	r2, #0
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	4798      	blx	r3
    break;
 8004246:	e065      	b.n	8004314 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	785b      	ldrb	r3, [r3, #1]
 800424c:	2b0b      	cmp	r3, #11
 800424e:	d84f      	bhi.n	80042f0 <USBD_CDC_Setup+0x148>
 8004250:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <USBD_CDC_Setup+0xb0>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	08004289 	.word	0x08004289
 800425c:	080042ff 	.word	0x080042ff
 8004260:	080042f1 	.word	0x080042f1
 8004264:	080042f1 	.word	0x080042f1
 8004268:	080042f1 	.word	0x080042f1
 800426c:	080042f1 	.word	0x080042f1
 8004270:	080042f1 	.word	0x080042f1
 8004274:	080042f1 	.word	0x080042f1
 8004278:	080042f1 	.word	0x080042f1
 800427c:	080042f1 	.word	0x080042f1
 8004280:	080042b1 	.word	0x080042b1
 8004284:	080042d9 	.word	0x080042d9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800428e:	2b03      	cmp	r3, #3
 8004290:	d107      	bne.n	80042a2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004292:	f107 030c 	add.w	r3, r7, #12
 8004296:	2202      	movs	r2, #2
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f001 fa53 	bl	8005746 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80042a0:	e030      	b.n	8004304 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80042a2:	6839      	ldr	r1, [r7, #0]
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f001 f9dd 	bl	8005664 <USBD_CtlError>
        ret = USBD_FAIL;
 80042aa:	2303      	movs	r3, #3
 80042ac:	75fb      	strb	r3, [r7, #23]
      break;
 80042ae:	e029      	b.n	8004304 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d107      	bne.n	80042ca <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80042ba:	f107 030f 	add.w	r3, r7, #15
 80042be:	2201      	movs	r2, #1
 80042c0:	4619      	mov	r1, r3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f001 fa3f 	bl	8005746 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80042c8:	e01c      	b.n	8004304 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80042ca:	6839      	ldr	r1, [r7, #0]
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f001 f9c9 	bl	8005664 <USBD_CtlError>
        ret = USBD_FAIL;
 80042d2:	2303      	movs	r3, #3
 80042d4:	75fb      	strb	r3, [r7, #23]
      break;
 80042d6:	e015      	b.n	8004304 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d00f      	beq.n	8004302 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80042e2:	6839      	ldr	r1, [r7, #0]
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f001 f9bd 	bl	8005664 <USBD_CtlError>
        ret = USBD_FAIL;
 80042ea:	2303      	movs	r3, #3
 80042ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80042ee:	e008      	b.n	8004302 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80042f0:	6839      	ldr	r1, [r7, #0]
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f001 f9b6 	bl	8005664 <USBD_CtlError>
      ret = USBD_FAIL;
 80042f8:	2303      	movs	r3, #3
 80042fa:	75fb      	strb	r3, [r7, #23]
      break;
 80042fc:	e002      	b.n	8004304 <USBD_CDC_Setup+0x15c>
      break;
 80042fe:	bf00      	nop
 8004300:	e008      	b.n	8004314 <USBD_CDC_Setup+0x16c>
      break;
 8004302:	bf00      	nop
    }
    break;
 8004304:	e006      	b.n	8004314 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004306:	6839      	ldr	r1, [r7, #0]
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f001 f9ab 	bl	8005664 <USBD_CtlError>
    ret = USBD_FAIL;
 800430e:	2303      	movs	r3, #3
 8004310:	75fb      	strb	r3, [r7, #23]
    break;
 8004312:	bf00      	nop
  }

  return (uint8_t)ret;
 8004314:	7dfb      	ldrb	r3, [r7, #23]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop

08004320 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004332:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800433e:	2303      	movs	r3, #3
 8004340:	e049      	b.n	80043d6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004348:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	3318      	adds	r3, #24
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d029      	beq.n	80043b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004360:	78fa      	ldrb	r2, [r7, #3]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	3318      	adds	r3, #24
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	78f9      	ldrb	r1, [r7, #3]
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	460b      	mov	r3, r1
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	1a5b      	subs	r3, r3, r1
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4403      	add	r3, r0
 8004380:	3344      	adds	r3, #68	; 0x44
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	fbb2 f1f3 	udiv	r1, r2, r3
 8004388:	fb03 f301 	mul.w	r3, r3, r1
 800438c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800438e:	2b00      	cmp	r3, #0
 8004390:	d110      	bne.n	80043b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004392:	78fa      	ldrb	r2, [r7, #3]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	3318      	adds	r3, #24
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80043a6:	78f9      	ldrb	r1, [r7, #3]
 80043a8:	2300      	movs	r3, #0
 80043aa:	2200      	movs	r2, #0
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f001 feca 	bl	8006146 <USBD_LL_Transmit>
 80043b2:	e00f      	b.n	80043d4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043f0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e015      	b.n	800442c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	4619      	mov	r1, r3
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f001 fee0 	bl	80061ca <USBD_LL_GetRxDataSize>
 800440a:	4602      	mov	r2, r0
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004426:	4611      	mov	r1, r2
 8004428:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004442:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d015      	beq.n	800447a <USBD_CDC_EP0_RxReady+0x46>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004454:	2bff      	cmp	r3, #255	; 0xff
 8004456:	d010      	beq.n	800447a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004466:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800446e:	b292      	uxth	r2, r2
 8004470:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	22ff      	movs	r2, #255	; 0xff
 8004476:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2243      	movs	r2, #67	; 0x43
 8004490:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004492:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	20000098 	.word	0x20000098

080044a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2243      	movs	r2, #67	; 0x43
 80044b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80044b2:	4b03      	ldr	r3, [pc, #12]	; (80044c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	20000054 	.word	0x20000054

080044c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2243      	movs	r2, #67	; 0x43
 80044d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80044d2:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	200000dc 	.word	0x200000dc

080044e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	220a      	movs	r2, #10
 80044f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80044f2:	4b03      	ldr	r3, [pc, #12]	; (8004500 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	20000010 	.word	0x20000010

08004504 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004514:	2303      	movs	r3, #3
 8004516:	e004      	b.n	8004522 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800452e:	b480      	push	{r7}
 8004530:	b087      	sub	sp, #28
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004540:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004570:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004596:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004598:	2301      	movs	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e01a      	b.n	80045e0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d114      	bne.n	80045de <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80045d2:	2181      	movs	r1, #129	; 0x81
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f001 fdb6 	bl	8006146 <USBD_LL_Transmit>

    ret = USBD_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80045de:	7bfb      	ldrb	r3, [r7, #15]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004602:	2303      	movs	r3, #3
 8004604:	e016      	b.n	8004634 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	7c1b      	ldrb	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004618:	2101      	movs	r1, #1
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f001 fdb4 	bl	8006188 <USBD_LL_PrepareReceive>
 8004620:	e007      	b.n	8004632 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004628:	2340      	movs	r3, #64	; 0x40
 800462a:	2101      	movs	r1, #1
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f001 fdab 	bl	8006188 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	4613      	mov	r3, r2
 8004648:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004650:	2303      	movs	r3, #3
 8004652:	e025      	b.n	80046a0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	79fa      	ldrb	r2, [r7, #7]
 8004692:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f001 fc21 	bl	8005edc <USBD_LL_Init>
 800469a:	4603      	mov	r3, r0
 800469c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800469e:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80046bc:	2303      	movs	r3, #3
 80046be:	e010      	b.n	80046e2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	f107 020e 	add.w	r2, r7, #14
 80046d4:	4610      	mov	r0, r2
 80046d6:	4798      	blx	r3
 80046d8:	4602      	mov	r2, r0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f001 fc3e 	bl	8005f74 <USBD_LL_Start>
 80046f8:	4603      	mov	r3, r0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	460b      	mov	r3, r1
 8004722:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004724:	2303      	movs	r3, #3
 8004726:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	78fa      	ldrb	r2, [r7, #3]
 800473c:	4611      	mov	r1, r2
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	4798      	blx	r3
 8004742:	4603      	mov	r3, r0
 8004744:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004746:	7bfb      	ldrb	r3, [r7, #15]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	78fa      	ldrb	r2, [r7, #3]
 8004770:	4611      	mov	r1, r2
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	4798      	blx	r3
  }

  return USBD_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004790:	6839      	ldr	r1, [r7, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 ff2c 	bl	80055f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80047a6:	461a      	mov	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d00e      	beq.n	80047da <USBD_LL_SetupStage+0x5a>
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d302      	bcc.n	80047c6 <USBD_LL_SetupStage+0x46>
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d014      	beq.n	80047ee <USBD_LL_SetupStage+0x6e>
 80047c4:	e01d      	b.n	8004802 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047cc:	4619      	mov	r1, r3
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fa18 	bl	8004c04 <USBD_StdDevReq>
 80047d4:	4603      	mov	r3, r0
 80047d6:	73fb      	strb	r3, [r7, #15]
      break;
 80047d8:	e020      	b.n	800481c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047e0:	4619      	mov	r1, r3
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fa7c 	bl	8004ce0 <USBD_StdItfReq>
 80047e8:	4603      	mov	r3, r0
 80047ea:	73fb      	strb	r3, [r7, #15]
      break;
 80047ec:	e016      	b.n	800481c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fab8 	bl	8004d6c <USBD_StdEPReq>
 80047fc:	4603      	mov	r3, r0
 80047fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004800:	e00c      	b.n	800481c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004808:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800480c:	b2db      	uxtb	r3, r3
 800480e:	4619      	mov	r1, r3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f001 fc0f 	bl	8006034 <USBD_LL_StallEP>
 8004816:	4603      	mov	r3, r0
 8004818:	73fb      	strb	r3, [r7, #15]
      break;
 800481a:	bf00      	nop
  }

  return ret;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b086      	sub	sp, #24
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	460b      	mov	r3, r1
 8004830:	607a      	str	r2, [r7, #4]
 8004832:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004834:	7afb      	ldrb	r3, [r7, #11]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d137      	bne.n	80048aa <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004840:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004848:	2b03      	cmp	r3, #3
 800484a:	d14a      	bne.n	80048e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	429a      	cmp	r2, r3
 8004856:	d913      	bls.n	8004880 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	1ad2      	subs	r2, r2, r3
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	4293      	cmp	r3, r2
 8004870:	bf28      	it	cs
 8004872:	4613      	movcs	r3, r2
 8004874:	461a      	mov	r2, r3
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 ffad 	bl	80057d8 <USBD_CtlContinueRx>
 800487e:	e030      	b.n	80048e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004892:	2b03      	cmp	r3, #3
 8004894:	d105      	bne.n	80048a2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 ffa9 	bl	80057fa <USBD_CtlSendStatus>
 80048a8:	e01b      	b.n	80048e2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d013      	beq.n	80048de <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d10e      	bne.n	80048de <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	7afa      	ldrb	r2, [r7, #11]
 80048ca:	4611      	mov	r1, r2
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	4798      	blx	r3
 80048d0:	4603      	mov	r3, r0
 80048d2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80048da:	7dfb      	ldrb	r3, [r7, #23]
 80048dc:	e002      	b.n	80048e4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80048de:	2303      	movs	r3, #3
 80048e0:	e000      	b.n	80048e4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3718      	adds	r7, #24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	460b      	mov	r3, r1
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80048fa:	7afb      	ldrb	r3, [r7, #11]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d16a      	bne.n	80049d6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	3314      	adds	r3, #20
 8004904:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800490c:	2b02      	cmp	r3, #2
 800490e:	d155      	bne.n	80049bc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	429a      	cmp	r2, r3
 800491a:	d914      	bls.n	8004946 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	1ad2      	subs	r2, r2, r3
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	461a      	mov	r2, r3
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 ff22 	bl	800577c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004938:	2300      	movs	r3, #0
 800493a:	2200      	movs	r2, #0
 800493c:	2100      	movs	r1, #0
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f001 fc22 	bl	8006188 <USBD_LL_PrepareReceive>
 8004944:	e03a      	b.n	80049bc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	429a      	cmp	r2, r3
 8004950:	d11c      	bne.n	800498c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800495a:	429a      	cmp	r2, r3
 800495c:	d316      	bcc.n	800498c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004968:	429a      	cmp	r2, r3
 800496a:	d20f      	bcs.n	800498c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800496c:	2200      	movs	r2, #0
 800496e:	2100      	movs	r1, #0
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 ff03 	bl	800577c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800497e:	2300      	movs	r3, #0
 8004980:	2200      	movs	r2, #0
 8004982:	2100      	movs	r1, #0
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f001 fbff 	bl	8006188 <USBD_LL_PrepareReceive>
 800498a:	e017      	b.n	80049bc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d105      	bne.n	80049ae <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80049ae:	2180      	movs	r1, #128	; 0x80
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f001 fb3f 	bl	8006034 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 ff32 	bl	8005820 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d123      	bne.n	8004a0e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f7ff fe9b 	bl	8004702 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80049d4:	e01b      	b.n	8004a0e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d013      	beq.n	8004a0a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d10e      	bne.n	8004a0a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	7afa      	ldrb	r2, [r7, #11]
 80049f6:	4611      	mov	r1, r2
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	4798      	blx	r3
 80049fc:	4603      	mov	r3, r0
 80049fe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004a00:	7dfb      	ldrb	r3, [r7, #23]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8004a06:	7dfb      	ldrb	r3, [r7, #23]
 8004a08:	e002      	b.n	8004a10 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e000      	b.n	8004a10 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d009      	beq.n	8004a5c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6852      	ldr	r2, [r2, #4]
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	4611      	mov	r1, r2
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004a5c:	2340      	movs	r3, #64	; 0x40
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2100      	movs	r1, #0
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f001 faa1 	bl	8005faa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2240      	movs	r2, #64	; 0x40
 8004a74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004a78:	2340      	movs	r3, #64	; 0x40
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2180      	movs	r1, #128	; 0x80
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f001 fa93 	bl	8005faa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2240      	movs	r2, #64	; 0x40
 8004a8e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	78fa      	ldrb	r2, [r7, #3]
 8004aaa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d105      	bne.n	8004b02 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d10b      	bne.n	8004b3a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	460b      	mov	r3, r1
 8004b68:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d009      	beq.n	8004bbc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6852      	ldr	r2, [r2, #4]
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	4798      	blx	r3
  }

  return USBD_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b087      	sub	sp, #28
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004be4:	8a3b      	ldrh	r3, [r7, #16]
 8004be6:	021b      	lsls	r3, r3, #8
 8004be8:	b21a      	sxth	r2, r3
 8004bea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	b21b      	sxth	r3, r3
 8004bf2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004bf4:	89fb      	ldrh	r3, [r7, #14]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
	...

08004c04 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	d004      	beq.n	8004c28 <USBD_StdDevReq+0x24>
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	d002      	beq.n	8004c28 <USBD_StdDevReq+0x24>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <USBD_StdDevReq+0x38>
 8004c26:	e050      	b.n	8004cca <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
 8004c36:	4603      	mov	r3, r0
 8004c38:	73fb      	strb	r3, [r7, #15]
    break;
 8004c3a:	e04b      	b.n	8004cd4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	785b      	ldrb	r3, [r3, #1]
 8004c40:	2b09      	cmp	r3, #9
 8004c42:	d83c      	bhi.n	8004cbe <USBD_StdDevReq+0xba>
 8004c44:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <USBD_StdDevReq+0x48>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004ca1 	.word	0x08004ca1
 8004c50:	08004cb5 	.word	0x08004cb5
 8004c54:	08004cbf 	.word	0x08004cbf
 8004c58:	08004cab 	.word	0x08004cab
 8004c5c:	08004cbf 	.word	0x08004cbf
 8004c60:	08004c7f 	.word	0x08004c7f
 8004c64:	08004c75 	.word	0x08004c75
 8004c68:	08004cbf 	.word	0x08004cbf
 8004c6c:	08004c97 	.word	0x08004c97
 8004c70:	08004c89 	.word	0x08004c89
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8004c74:	6839      	ldr	r1, [r7, #0]
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f9ce 	bl	8005018 <USBD_GetDescriptor>
      break;
 8004c7c:	e024      	b.n	8004cc8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8004c7e:	6839      	ldr	r1, [r7, #0]
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fb33 	bl	80052ec <USBD_SetAddress>
      break;
 8004c86:	e01f      	b.n	8004cc8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8004c88:	6839      	ldr	r1, [r7, #0]
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fb70 	bl	8005370 <USBD_SetConfig>
 8004c90:	4603      	mov	r3, r0
 8004c92:	73fb      	strb	r3, [r7, #15]
      break;
 8004c94:	e018      	b.n	8004cc8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fc0d 	bl	80054b8 <USBD_GetConfig>
      break;
 8004c9e:	e013      	b.n	8004cc8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8004ca0:	6839      	ldr	r1, [r7, #0]
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fc3c 	bl	8005520 <USBD_GetStatus>
      break;
 8004ca8:	e00e      	b.n	8004cc8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8004caa:	6839      	ldr	r1, [r7, #0]
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fc6a 	bl	8005586 <USBD_SetFeature>
      break;
 8004cb2:	e009      	b.n	8004cc8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8004cb4:	6839      	ldr	r1, [r7, #0]
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fc79 	bl	80055ae <USBD_ClrFeature>
      break;
 8004cbc:	e004      	b.n	8004cc8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8004cbe:	6839      	ldr	r1, [r7, #0]
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fccf 	bl	8005664 <USBD_CtlError>
      break;
 8004cc6:	bf00      	nop
    }
    break;
 8004cc8:	e004      	b.n	8004cd4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fcc9 	bl	8005664 <USBD_CtlError>
    break;
 8004cd2:	bf00      	nop
  }

  return ret;
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop

08004ce0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d003      	beq.n	8004d02 <USBD_StdItfReq+0x22>
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d001      	beq.n	8004d02 <USBD_StdItfReq+0x22>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d12a      	bne.n	8004d58 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d81d      	bhi.n	8004d4a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	889b      	ldrh	r3, [r3, #4]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d813      	bhi.n	8004d40 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	6839      	ldr	r1, [r7, #0]
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
 8004d26:	4603      	mov	r3, r0
 8004d28:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	88db      	ldrh	r3, [r3, #6]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d110      	bne.n	8004d54 <USBD_StdItfReq+0x74>
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10d      	bne.n	8004d54 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fd5e 	bl	80057fa <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004d3e:	e009      	b.n	8004d54 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8004d40:	6839      	ldr	r1, [r7, #0]
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 fc8e 	bl	8005664 <USBD_CtlError>
      break;
 8004d48:	e004      	b.n	8004d54 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004d4a:	6839      	ldr	r1, [r7, #0]
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fc89 	bl	8005664 <USBD_CtlError>
      break;
 8004d52:	e000      	b.n	8004d56 <USBD_StdItfReq+0x76>
      break;
 8004d54:	bf00      	nop
    }
    break;
 8004d56:	e004      	b.n	8004d62 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004d58:	6839      	ldr	r1, [r7, #0]
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fc82 	bl	8005664 <USBD_CtlError>
    break;
 8004d60:	bf00      	nop
  }

  return ret;
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	889b      	ldrh	r3, [r3, #4]
 8004d7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d004      	beq.n	8004d96 <USBD_StdEPReq+0x2a>
 8004d8c:	2b40      	cmp	r3, #64	; 0x40
 8004d8e:	d002      	beq.n	8004d96 <USBD_StdEPReq+0x2a>
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <USBD_StdEPReq+0x3e>
 8004d94:	e135      	b.n	8005002 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	6839      	ldr	r1, [r7, #0]
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	4798      	blx	r3
 8004da4:	4603      	mov	r3, r0
 8004da6:	73fb      	strb	r3, [r7, #15]
    break;
 8004da8:	e130      	b.n	800500c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d03e      	beq.n	8004e30 <USBD_StdEPReq+0xc4>
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d002      	beq.n	8004dbc <USBD_StdEPReq+0x50>
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d077      	beq.n	8004eaa <USBD_StdEPReq+0x13e>
 8004dba:	e11c      	b.n	8004ff6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d002      	beq.n	8004dcc <USBD_StdEPReq+0x60>
 8004dc6:	2b03      	cmp	r3, #3
 8004dc8:	d015      	beq.n	8004df6 <USBD_StdEPReq+0x8a>
 8004dca:	e02b      	b.n	8004e24 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004dcc:	7bbb      	ldrb	r3, [r7, #14]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00c      	beq.n	8004dec <USBD_StdEPReq+0x80>
 8004dd2:	7bbb      	ldrb	r3, [r7, #14]
 8004dd4:	2b80      	cmp	r3, #128	; 0x80
 8004dd6:	d009      	beq.n	8004dec <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004dd8:	7bbb      	ldrb	r3, [r7, #14]
 8004dda:	4619      	mov	r1, r3
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f001 f929 	bl	8006034 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004de2:	2180      	movs	r1, #128	; 0x80
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f001 f925 	bl	8006034 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004dea:	e020      	b.n	8004e2e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8004dec:	6839      	ldr	r1, [r7, #0]
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fc38 	bl	8005664 <USBD_CtlError>
        break;
 8004df4:	e01b      	b.n	8004e2e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	885b      	ldrh	r3, [r3, #2]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10e      	bne.n	8004e1c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004dfe:	7bbb      	ldrb	r3, [r7, #14]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00b      	beq.n	8004e1c <USBD_StdEPReq+0xb0>
 8004e04:	7bbb      	ldrb	r3, [r7, #14]
 8004e06:	2b80      	cmp	r3, #128	; 0x80
 8004e08:	d008      	beq.n	8004e1c <USBD_StdEPReq+0xb0>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	88db      	ldrh	r3, [r3, #6]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d104      	bne.n	8004e1c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e12:	7bbb      	ldrb	r3, [r7, #14]
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f001 f90c 	bl	8006034 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 fcec 	bl	80057fa <USBD_CtlSendStatus>

        break;
 8004e22:	e004      	b.n	8004e2e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8004e24:	6839      	ldr	r1, [r7, #0]
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fc1c 	bl	8005664 <USBD_CtlError>
        break;
 8004e2c:	bf00      	nop
      }
      break;
 8004e2e:	e0e7      	b.n	8005000 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d002      	beq.n	8004e40 <USBD_StdEPReq+0xd4>
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d015      	beq.n	8004e6a <USBD_StdEPReq+0xfe>
 8004e3e:	e02d      	b.n	8004e9c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e40:	7bbb      	ldrb	r3, [r7, #14]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00c      	beq.n	8004e60 <USBD_StdEPReq+0xf4>
 8004e46:	7bbb      	ldrb	r3, [r7, #14]
 8004e48:	2b80      	cmp	r3, #128	; 0x80
 8004e4a:	d009      	beq.n	8004e60 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004e4c:	7bbb      	ldrb	r3, [r7, #14]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f001 f8ef 	bl	8006034 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e56:	2180      	movs	r1, #128	; 0x80
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 f8eb 	bl	8006034 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004e5e:	e023      	b.n	8004ea8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8004e60:	6839      	ldr	r1, [r7, #0]
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 fbfe 	bl	8005664 <USBD_CtlError>
        break;
 8004e68:	e01e      	b.n	8004ea8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	885b      	ldrh	r3, [r3, #2]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d119      	bne.n	8004ea6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004e72:	7bbb      	ldrb	r3, [r7, #14]
 8004e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d004      	beq.n	8004e86 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004e7c:	7bbb      	ldrb	r3, [r7, #14]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f001 f8f6 	bl	8006072 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fcb7 	bl	80057fa <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	4798      	blx	r3
        }
        break;
 8004e9a:	e004      	b.n	8004ea6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8004e9c:	6839      	ldr	r1, [r7, #0]
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fbe0 	bl	8005664 <USBD_CtlError>
        break;
 8004ea4:	e000      	b.n	8004ea8 <USBD_StdEPReq+0x13c>
        break;
 8004ea6:	bf00      	nop
      }
      break;
 8004ea8:	e0aa      	b.n	8005000 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d002      	beq.n	8004eba <USBD_StdEPReq+0x14e>
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d032      	beq.n	8004f1e <USBD_StdEPReq+0x1b2>
 8004eb8:	e097      	b.n	8004fea <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004eba:	7bbb      	ldrb	r3, [r7, #14]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d007      	beq.n	8004ed0 <USBD_StdEPReq+0x164>
 8004ec0:	7bbb      	ldrb	r3, [r7, #14]
 8004ec2:	2b80      	cmp	r3, #128	; 0x80
 8004ec4:	d004      	beq.n	8004ed0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8004ec6:	6839      	ldr	r1, [r7, #0]
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fbcb 	bl	8005664 <USBD_CtlError>
          break;
 8004ece:	e091      	b.n	8004ff4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	da0b      	bge.n	8004ef0 <USBD_StdEPReq+0x184>
 8004ed8:	7bbb      	ldrb	r3, [r7, #14]
 8004eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	3310      	adds	r3, #16
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	4413      	add	r3, r2
 8004eec:	3304      	adds	r3, #4
 8004eee:	e00b      	b.n	8004f08 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004ef0:	7bbb      	ldrb	r3, [r7, #14]
 8004ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	4413      	add	r3, r2
 8004f06:	3304      	adds	r3, #4
 8004f08:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2202      	movs	r2, #2
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fc15 	bl	8005746 <USBD_CtlSendData>
        break;
 8004f1c:	e06a      	b.n	8004ff4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8004f1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	da11      	bge.n	8004f4a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004f26:	7bbb      	ldrb	r3, [r7, #14]
 8004f28:	f003 020f 	and.w	r2, r3, #15
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	3324      	adds	r3, #36	; 0x24
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d117      	bne.n	8004f70 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8004f40:	6839      	ldr	r1, [r7, #0]
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fb8e 	bl	8005664 <USBD_CtlError>
            break;
 8004f48:	e054      	b.n	8004ff4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004f4a:	7bbb      	ldrb	r3, [r7, #14]
 8004f4c:	f003 020f 	and.w	r2, r3, #15
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d104      	bne.n	8004f70 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8004f66:	6839      	ldr	r1, [r7, #0]
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fb7b 	bl	8005664 <USBD_CtlError>
            break;
 8004f6e:	e041      	b.n	8004ff4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	da0b      	bge.n	8004f90 <USBD_StdEPReq+0x224>
 8004f78:	7bbb      	ldrb	r3, [r7, #14]
 8004f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f7e:	4613      	mov	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	3310      	adds	r3, #16
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	e00b      	b.n	8004fa8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004f90:	7bbb      	ldrb	r3, [r7, #14]
 8004f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004faa:	7bbb      	ldrb	r3, [r7, #14]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <USBD_StdEPReq+0x24a>
 8004fb0:	7bbb      	ldrb	r3, [r7, #14]
 8004fb2:	2b80      	cmp	r3, #128	; 0x80
 8004fb4:	d103      	bne.n	8004fbe <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	e00e      	b.n	8004fdc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004fbe:	7bbb      	ldrb	r3, [r7, #14]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f001 f874 	bl	80060b0 <USBD_LL_IsStallEP>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e002      	b.n	8004fdc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fbaf 	bl	8005746 <USBD_CtlSendData>
          break;
 8004fe8:	e004      	b.n	8004ff4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fb39 	bl	8005664 <USBD_CtlError>
        break;
 8004ff2:	bf00      	nop
      }
      break;
 8004ff4:	e004      	b.n	8005000 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8004ff6:	6839      	ldr	r1, [r7, #0]
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fb33 	bl	8005664 <USBD_CtlError>
      break;
 8004ffe:	bf00      	nop
    }
    break;
 8005000:	e004      	b.n	800500c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fb2d 	bl	8005664 <USBD_CtlError>
    break;
 800500a:	bf00      	nop
  }

  return ret;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	885b      	ldrh	r3, [r3, #2]
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	2b06      	cmp	r3, #6
 800503a:	f200 8128 	bhi.w	800528e <USBD_GetDescriptor+0x276>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <USBD_GetDescriptor+0x2c>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005061 	.word	0x08005061
 8005048:	08005079 	.word	0x08005079
 800504c:	080050b9 	.word	0x080050b9
 8005050:	0800528f 	.word	0x0800528f
 8005054:	0800528f 	.word	0x0800528f
 8005058:	0800522f 	.word	0x0800522f
 800505c:	0800525b 	.word	0x0800525b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	7c12      	ldrb	r2, [r2, #16]
 800506c:	f107 0108 	add.w	r1, r7, #8
 8005070:	4610      	mov	r0, r2
 8005072:	4798      	blx	r3
 8005074:	60f8      	str	r0, [r7, #12]
    break;
 8005076:	e112      	b.n	800529e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	7c1b      	ldrb	r3, [r3, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10d      	bne.n	800509c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	f107 0208 	add.w	r2, r7, #8
 800508c:	4610      	mov	r0, r2
 800508e:	4798      	blx	r3
 8005090:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3301      	adds	r3, #1
 8005096:	2202      	movs	r2, #2
 8005098:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800509a:	e100      	b.n	800529e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	f107 0208 	add.w	r2, r7, #8
 80050a8:	4610      	mov	r0, r2
 80050aa:	4798      	blx	r3
 80050ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	3301      	adds	r3, #1
 80050b2:	2202      	movs	r2, #2
 80050b4:	701a      	strb	r2, [r3, #0]
    break;
 80050b6:	e0f2      	b.n	800529e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	885b      	ldrh	r3, [r3, #2]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b05      	cmp	r3, #5
 80050c0:	f200 80ac 	bhi.w	800521c <USBD_GetDescriptor+0x204>
 80050c4:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <USBD_GetDescriptor+0xb4>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	080050e5 	.word	0x080050e5
 80050d0:	08005119 	.word	0x08005119
 80050d4:	0800514d 	.word	0x0800514d
 80050d8:	08005181 	.word	0x08005181
 80050dc:	080051b5 	.word	0x080051b5
 80050e0:	080051e9 	.word	0x080051e9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00b      	beq.n	8005108 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	7c12      	ldrb	r2, [r2, #16]
 80050fc:	f107 0108 	add.w	r1, r7, #8
 8005100:	4610      	mov	r0, r2
 8005102:	4798      	blx	r3
 8005104:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005106:	e091      	b.n	800522c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005108:	6839      	ldr	r1, [r7, #0]
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 faaa 	bl	8005664 <USBD_CtlError>
        err++;
 8005110:	7afb      	ldrb	r3, [r7, #11]
 8005112:	3301      	adds	r3, #1
 8005114:	72fb      	strb	r3, [r7, #11]
      break;
 8005116:	e089      	b.n	800522c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00b      	beq.n	800513c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	7c12      	ldrb	r2, [r2, #16]
 8005130:	f107 0108 	add.w	r1, r7, #8
 8005134:	4610      	mov	r0, r2
 8005136:	4798      	blx	r3
 8005138:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800513a:	e077      	b.n	800522c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800513c:	6839      	ldr	r1, [r7, #0]
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fa90 	bl	8005664 <USBD_CtlError>
        err++;
 8005144:	7afb      	ldrb	r3, [r7, #11]
 8005146:	3301      	adds	r3, #1
 8005148:	72fb      	strb	r3, [r7, #11]
      break;
 800514a:	e06f      	b.n	800522c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00b      	beq.n	8005170 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	7c12      	ldrb	r2, [r2, #16]
 8005164:	f107 0108 	add.w	r1, r7, #8
 8005168:	4610      	mov	r0, r2
 800516a:	4798      	blx	r3
 800516c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800516e:	e05d      	b.n	800522c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005170:	6839      	ldr	r1, [r7, #0]
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fa76 	bl	8005664 <USBD_CtlError>
        err++;
 8005178:	7afb      	ldrb	r3, [r7, #11]
 800517a:	3301      	adds	r3, #1
 800517c:	72fb      	strb	r3, [r7, #11]
      break;
 800517e:	e055      	b.n	800522c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00b      	beq.n	80051a4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	7c12      	ldrb	r2, [r2, #16]
 8005198:	f107 0108 	add.w	r1, r7, #8
 800519c:	4610      	mov	r0, r2
 800519e:	4798      	blx	r3
 80051a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80051a2:	e043      	b.n	800522c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 fa5c 	bl	8005664 <USBD_CtlError>
        err++;
 80051ac:	7afb      	ldrb	r3, [r7, #11]
 80051ae:	3301      	adds	r3, #1
 80051b0:	72fb      	strb	r3, [r7, #11]
      break;
 80051b2:	e03b      	b.n	800522c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00b      	beq.n	80051d8 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	7c12      	ldrb	r2, [r2, #16]
 80051cc:	f107 0108 	add.w	r1, r7, #8
 80051d0:	4610      	mov	r0, r2
 80051d2:	4798      	blx	r3
 80051d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80051d6:	e029      	b.n	800522c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fa42 	bl	8005664 <USBD_CtlError>
        err++;
 80051e0:	7afb      	ldrb	r3, [r7, #11]
 80051e2:	3301      	adds	r3, #1
 80051e4:	72fb      	strb	r3, [r7, #11]
      break;
 80051e6:	e021      	b.n	800522c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00b      	beq.n	800520c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	7c12      	ldrb	r2, [r2, #16]
 8005200:	f107 0108 	add.w	r1, r7, #8
 8005204:	4610      	mov	r0, r2
 8005206:	4798      	blx	r3
 8005208:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800520a:	e00f      	b.n	800522c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800520c:	6839      	ldr	r1, [r7, #0]
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 fa28 	bl	8005664 <USBD_CtlError>
        err++;
 8005214:	7afb      	ldrb	r3, [r7, #11]
 8005216:	3301      	adds	r3, #1
 8005218:	72fb      	strb	r3, [r7, #11]
      break;
 800521a:	e007      	b.n	800522c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800521c:	6839      	ldr	r1, [r7, #0]
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa20 	bl	8005664 <USBD_CtlError>
      err++;
 8005224:	7afb      	ldrb	r3, [r7, #11]
 8005226:	3301      	adds	r3, #1
 8005228:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800522a:	bf00      	nop
    }
    break;
 800522c:	e037      	b.n	800529e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	7c1b      	ldrb	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d109      	bne.n	800524a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800523c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523e:	f107 0208 	add.w	r2, r7, #8
 8005242:	4610      	mov	r0, r2
 8005244:	4798      	blx	r3
 8005246:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005248:	e029      	b.n	800529e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800524a:	6839      	ldr	r1, [r7, #0]
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fa09 	bl	8005664 <USBD_CtlError>
      err++;
 8005252:	7afb      	ldrb	r3, [r7, #11]
 8005254:	3301      	adds	r3, #1
 8005256:	72fb      	strb	r3, [r7, #11]
    break;
 8005258:	e021      	b.n	800529e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7c1b      	ldrb	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10d      	bne.n	800527e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	f107 0208 	add.w	r2, r7, #8
 800526e:	4610      	mov	r0, r2
 8005270:	4798      	blx	r3
 8005272:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3301      	adds	r3, #1
 8005278:	2207      	movs	r2, #7
 800527a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800527c:	e00f      	b.n	800529e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800527e:	6839      	ldr	r1, [r7, #0]
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f9ef 	bl	8005664 <USBD_CtlError>
      err++;
 8005286:	7afb      	ldrb	r3, [r7, #11]
 8005288:	3301      	adds	r3, #1
 800528a:	72fb      	strb	r3, [r7, #11]
    break;
 800528c:	e007      	b.n	800529e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800528e:	6839      	ldr	r1, [r7, #0]
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f9e7 	bl	8005664 <USBD_CtlError>
    err++;
 8005296:	7afb      	ldrb	r3, [r7, #11]
 8005298:	3301      	adds	r3, #1
 800529a:	72fb      	strb	r3, [r7, #11]
    break;
 800529c:	bf00      	nop
  }

  if (err != 0U)
 800529e:	7afb      	ldrb	r3, [r7, #11]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11e      	bne.n	80052e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	88db      	ldrh	r3, [r3, #6]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d016      	beq.n	80052da <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80052ac:	893b      	ldrh	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00e      	beq.n	80052d0 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	88da      	ldrh	r2, [r3, #6]
 80052b6:	893b      	ldrh	r3, [r7, #8]
 80052b8:	4293      	cmp	r3, r2
 80052ba:	bf28      	it	cs
 80052bc:	4613      	movcs	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80052c2:	893b      	ldrh	r3, [r7, #8]
 80052c4:	461a      	mov	r2, r3
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fa3c 	bl	8005746 <USBD_CtlSendData>
 80052ce:	e009      	b.n	80052e4 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f9c6 	bl	8005664 <USBD_CtlError>
 80052d8:	e004      	b.n	80052e4 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fa8d 	bl	80057fa <USBD_CtlSendStatus>
 80052e0:	e000      	b.n	80052e4 <USBD_GetDescriptor+0x2cc>
    return;
 80052e2:	bf00      	nop
    }
  }
}
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop

080052ec <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	889b      	ldrh	r3, [r3, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d130      	bne.n	8005360 <USBD_SetAddress+0x74>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	88db      	ldrh	r3, [r3, #6]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d12c      	bne.n	8005360 <USBD_SetAddress+0x74>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	885b      	ldrh	r3, [r3, #2]
 800530a:	2b7f      	cmp	r3, #127	; 0x7f
 800530c:	d828      	bhi.n	8005360 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	885b      	ldrh	r3, [r3, #2]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005318:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005320:	2b03      	cmp	r3, #3
 8005322:	d104      	bne.n	800532e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f99c 	bl	8005664 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800532c:	e01c      	b.n	8005368 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	7bfa      	ldrb	r2, [r7, #15]
 8005332:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	4619      	mov	r1, r3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fee4 	bl	8006108 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fa5a 	bl	80057fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d004      	beq.n	8005356 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005354:	e008      	b.n	8005368 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800535e:	e003      	b.n	8005368 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005360:	6839      	ldr	r1, [r7, #0]
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f97e 	bl	8005664 <USBD_CtlError>
  }
}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	885b      	ldrh	r3, [r3, #2]
 8005382:	b2da      	uxtb	r2, r3
 8005384:	4b4b      	ldr	r3, [pc, #300]	; (80054b4 <USBD_SetConfig+0x144>)
 8005386:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005388:	4b4a      	ldr	r3, [pc, #296]	; (80054b4 <USBD_SetConfig+0x144>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d905      	bls.n	800539c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f966 	bl	8005664 <USBD_CtlError>
    return USBD_FAIL;
 8005398:	2303      	movs	r3, #3
 800539a:	e087      	b.n	80054ac <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d002      	beq.n	80053ac <USBD_SetConfig+0x3c>
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d025      	beq.n	80053f6 <USBD_SetConfig+0x86>
 80053aa:	e071      	b.n	8005490 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80053ac:	4b41      	ldr	r3, [pc, #260]	; (80054b4 <USBD_SetConfig+0x144>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01c      	beq.n	80053ee <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80053b4:	4b3f      	ldr	r3, [pc, #252]	; (80054b4 <USBD_SetConfig+0x144>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	461a      	mov	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80053be:	4b3d      	ldr	r3, [pc, #244]	; (80054b4 <USBD_SetConfig+0x144>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff f9a7 	bl	8004718 <USBD_SetClassConfig>
 80053ca:	4603      	mov	r3, r0
 80053cc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80053d4:	6839      	ldr	r1, [r7, #0]
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f944 	bl	8005664 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80053dc:	e065      	b.n	80054aa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fa0b 	bl	80057fa <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2203      	movs	r2, #3
 80053e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80053ec:	e05d      	b.n	80054aa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fa03 	bl	80057fa <USBD_CtlSendStatus>
    break;
 80053f4:	e059      	b.n	80054aa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80053f6:	4b2f      	ldr	r3, [pc, #188]	; (80054b4 <USBD_SetConfig+0x144>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d112      	bne.n	8005424 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2202      	movs	r2, #2
 8005402:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005406:	4b2b      	ldr	r3, [pc, #172]	; (80054b4 <USBD_SetConfig+0x144>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005410:	4b28      	ldr	r3, [pc, #160]	; (80054b4 <USBD_SetConfig+0x144>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff f99a 	bl	8004750 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f9ec 	bl	80057fa <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005422:	e042      	b.n	80054aa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005424:	4b23      	ldr	r3, [pc, #140]	; (80054b4 <USBD_SetConfig+0x144>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	429a      	cmp	r2, r3
 8005430:	d02a      	beq.n	8005488 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	4619      	mov	r1, r3
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff f988 	bl	8004750 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005440:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <USBD_SetConfig+0x144>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800544a:	4b1a      	ldr	r3, [pc, #104]	; (80054b4 <USBD_SetConfig+0x144>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	4619      	mov	r1, r3
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff f961 	bl	8004718 <USBD_SetClassConfig>
 8005456:	4603      	mov	r3, r0
 8005458:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00f      	beq.n	8005480 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f8fe 	bl	8005664 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	4619      	mov	r1, r3
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff f96d 	bl	8004750 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2202      	movs	r2, #2
 800547a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800547e:	e014      	b.n	80054aa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f9ba 	bl	80057fa <USBD_CtlSendStatus>
    break;
 8005486:	e010      	b.n	80054aa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f9b6 	bl	80057fa <USBD_CtlSendStatus>
    break;
 800548e:	e00c      	b.n	80054aa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f8e6 	bl	8005664 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <USBD_SetConfig+0x144>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff f956 	bl	8004750 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80054a4:	2303      	movs	r3, #3
 80054a6:	73fb      	strb	r3, [r7, #15]
    break;
 80054a8:	bf00      	nop
  }

  return ret;
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000208 	.word	0x20000208

080054b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	88db      	ldrh	r3, [r3, #6]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d004      	beq.n	80054d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80054ca:	6839      	ldr	r1, [r7, #0]
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f8c9 	bl	8005664 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80054d2:	e021      	b.n	8005518 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054da:	2b01      	cmp	r3, #1
 80054dc:	db17      	blt.n	800550e <USBD_GetConfig+0x56>
 80054de:	2b02      	cmp	r3, #2
 80054e0:	dd02      	ble.n	80054e8 <USBD_GetConfig+0x30>
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	d00b      	beq.n	80054fe <USBD_GetConfig+0x46>
 80054e6:	e012      	b.n	800550e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3308      	adds	r3, #8
 80054f2:	2201      	movs	r2, #1
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f925 	bl	8005746 <USBD_CtlSendData>
      break;
 80054fc:	e00c      	b.n	8005518 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3304      	adds	r3, #4
 8005502:	2201      	movs	r2, #1
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f91d 	bl	8005746 <USBD_CtlSendData>
      break;
 800550c:	e004      	b.n	8005518 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800550e:	6839      	ldr	r1, [r7, #0]
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f8a7 	bl	8005664 <USBD_CtlError>
      break;
 8005516:	bf00      	nop
}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005530:	3b01      	subs	r3, #1
 8005532:	2b02      	cmp	r3, #2
 8005534:	d81e      	bhi.n	8005574 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	88db      	ldrh	r3, [r3, #6]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d004      	beq.n	8005548 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800553e:	6839      	ldr	r1, [r7, #0]
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f88f 	bl	8005664 <USBD_CtlError>
      break;
 8005546:	e01a      	b.n	800557e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f043 0202 	orr.w	r2, r3, #2
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	330c      	adds	r3, #12
 8005568:	2202      	movs	r2, #2
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f8ea 	bl	8005746 <USBD_CtlSendData>
    break;
 8005572:	e004      	b.n	800557e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f874 	bl	8005664 <USBD_CtlError>
    break;
 800557c:	bf00      	nop
  }
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	885b      	ldrh	r3, [r3, #2]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d106      	bne.n	80055a6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f92a 	bl	80057fa <USBD_CtlSendStatus>
  }
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055be:	3b01      	subs	r3, #1
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d80b      	bhi.n	80055dc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	885b      	ldrh	r3, [r3, #2]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d10c      	bne.n	80055e6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f910 	bl	80057fa <USBD_CtlSendStatus>
      }
      break;
 80055da:	e004      	b.n	80055e6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f840 	bl	8005664 <USBD_CtlError>
      break;
 80055e4:	e000      	b.n	80055e8 <USBD_ClrFeature+0x3a>
      break;
 80055e6:	bf00      	nop
  }
}
 80055e8:	bf00      	nop
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	781a      	ldrb	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3301      	adds	r3, #1
 800560a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	781a      	ldrb	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3301      	adds	r3, #1
 8005618:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800561a:	68f8      	ldr	r0, [r7, #12]
 800561c:	f7ff fad3 	bl	8004bc6 <SWAPBYTE>
 8005620:	4603      	mov	r3, r0
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	3301      	adds	r3, #1
 800562c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3301      	adds	r3, #1
 8005632:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f7ff fac6 	bl	8004bc6 <SWAPBYTE>
 800563a:	4603      	mov	r3, r0
 800563c:	461a      	mov	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3301      	adds	r3, #1
 8005646:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3301      	adds	r3, #1
 800564c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800564e:	68f8      	ldr	r0, [r7, #12]
 8005650:	f7ff fab9 	bl	8004bc6 <SWAPBYTE>
 8005654:	4603      	mov	r3, r0
 8005656:	461a      	mov	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	80da      	strh	r2, [r3, #6]
}
 800565c:	bf00      	nop
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800566e:	2180      	movs	r1, #128	; 0x80
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fcdf 	bl	8006034 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005676:	2100      	movs	r1, #0
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fcdb 	bl	8006034 <USBD_LL_StallEP>
}
 800567e:	bf00      	nop
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b086      	sub	sp, #24
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d036      	beq.n	800570a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80056a0:	6938      	ldr	r0, [r7, #16]
 80056a2:	f000 f836 	bl	8005712 <USBD_GetLen>
 80056a6:	4603      	mov	r3, r0
 80056a8:	3301      	adds	r3, #1
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80056b4:	7dfb      	ldrb	r3, [r7, #23]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	4413      	add	r3, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	7812      	ldrb	r2, [r2, #0]
 80056be:	701a      	strb	r2, [r3, #0]
  idx++;
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
 80056c2:	3301      	adds	r3, #1
 80056c4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80056c6:	7dfb      	ldrb	r3, [r7, #23]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	4413      	add	r3, r2
 80056cc:	2203      	movs	r2, #3
 80056ce:	701a      	strb	r2, [r3, #0]
  idx++;
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
 80056d2:	3301      	adds	r3, #1
 80056d4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80056d6:	e013      	b.n	8005700 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	4413      	add	r3, r2
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	7812      	ldrb	r2, [r2, #0]
 80056e2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	3301      	adds	r3, #1
 80056e8:	613b      	str	r3, [r7, #16]
    idx++;
 80056ea:	7dfb      	ldrb	r3, [r7, #23]
 80056ec:	3301      	adds	r3, #1
 80056ee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	4413      	add	r3, r2
 80056f6:	2200      	movs	r2, #0
 80056f8:	701a      	strb	r2, [r3, #0]
    idx++;
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	3301      	adds	r3, #1
 80056fe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e7      	bne.n	80056d8 <USBD_GetString+0x52>
 8005708:	e000      	b.n	800570c <USBD_GetString+0x86>
    return;
 800570a:	bf00      	nop
  }
}
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005712:	b480      	push	{r7}
 8005714:	b085      	sub	sp, #20
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005722:	e005      	b.n	8005730 <USBD_GetLen+0x1e>
  {
    len++;
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	3301      	adds	r3, #1
 8005728:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	3301      	adds	r3, #1
 800572e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1f5      	bne.n	8005724 <USBD_GetLen+0x12>
  }

  return len;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2202      	movs	r2, #2
 8005756:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	2100      	movs	r1, #0
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f000 fcea 	bl	8006146 <USBD_LL_Transmit>

  return USBD_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	2100      	movs	r1, #0
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 fcd9 	bl	8006146 <USBD_LL_Transmit>

  return USBD_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2203      	movs	r2, #3
 80057ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	2100      	movs	r1, #0
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 fcdd 	bl	8006188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	2100      	movs	r1, #0
 80057ea:	68f8      	ldr	r0, [r7, #12]
 80057ec:	f000 fccc 	bl	8006188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2204      	movs	r2, #4
 8005806:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800580a:	2300      	movs	r3, #0
 800580c:	2200      	movs	r2, #0
 800580e:	2100      	movs	r1, #0
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fc98 	bl	8006146 <USBD_LL_Transmit>

  return USBD_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2205      	movs	r2, #5
 800582c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005830:	2300      	movs	r3, #0
 8005832:	2200      	movs	r2, #0
 8005834:	2100      	movs	r1, #0
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fca6 	bl	8006188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800584c:	2200      	movs	r2, #0
 800584e:	4912      	ldr	r1, [pc, #72]	; (8005898 <MX_USB_DEVICE_Init+0x50>)
 8005850:	4812      	ldr	r0, [pc, #72]	; (800589c <MX_USB_DEVICE_Init+0x54>)
 8005852:	f7fe fef3 	bl	800463c <USBD_Init>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800585c:	f7fa feee 	bl	800063c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005860:	490f      	ldr	r1, [pc, #60]	; (80058a0 <MX_USB_DEVICE_Init+0x58>)
 8005862:	480e      	ldr	r0, [pc, #56]	; (800589c <MX_USB_DEVICE_Init+0x54>)
 8005864:	f7fe ff20 	bl	80046a8 <USBD_RegisterClass>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800586e:	f7fa fee5 	bl	800063c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005872:	490c      	ldr	r1, [pc, #48]	; (80058a4 <MX_USB_DEVICE_Init+0x5c>)
 8005874:	4809      	ldr	r0, [pc, #36]	; (800589c <MX_USB_DEVICE_Init+0x54>)
 8005876:	f7fe fe45 	bl	8004504 <USBD_CDC_RegisterInterface>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005880:	f7fa fedc 	bl	800063c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005884:	4805      	ldr	r0, [pc, #20]	; (800589c <MX_USB_DEVICE_Init+0x54>)
 8005886:	f7fe ff30 	bl	80046ea <USBD_Start>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005890:	f7fa fed4 	bl	800063c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005894:	bf00      	nop
 8005896:	bd80      	pop	{r7, pc}
 8005898:	20000134 	.word	0x20000134
 800589c:	20000218 	.word	0x20000218
 80058a0:	2000001c 	.word	0x2000001c
 80058a4:	20000120 	.word	0x20000120

080058a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80058ac:	2200      	movs	r2, #0
 80058ae:	4905      	ldr	r1, [pc, #20]	; (80058c4 <CDC_Init_FS+0x1c>)
 80058b0:	4805      	ldr	r0, [pc, #20]	; (80058c8 <CDC_Init_FS+0x20>)
 80058b2:	f7fe fe3c 	bl	800452e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80058b6:	4905      	ldr	r1, [pc, #20]	; (80058cc <CDC_Init_FS+0x24>)
 80058b8:	4803      	ldr	r0, [pc, #12]	; (80058c8 <CDC_Init_FS+0x20>)
 80058ba:	f7fe fe51 	bl	8004560 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80058be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	20000ce8 	.word	0x20000ce8
 80058c8:	20000218 	.word	0x20000218
 80058cc:	200004e8 	.word	0x200004e8

080058d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80058d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	6039      	str	r1, [r7, #0]
 80058ea:	71fb      	strb	r3, [r7, #7]
 80058ec:	4613      	mov	r3, r2
 80058ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	2b23      	cmp	r3, #35	; 0x23
 80058f4:	d84a      	bhi.n	800598c <CDC_Control_FS+0xac>
 80058f6:	a201      	add	r2, pc, #4	; (adr r2, 80058fc <CDC_Control_FS+0x1c>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	0800598d 	.word	0x0800598d
 8005900:	0800598d 	.word	0x0800598d
 8005904:	0800598d 	.word	0x0800598d
 8005908:	0800598d 	.word	0x0800598d
 800590c:	0800598d 	.word	0x0800598d
 8005910:	0800598d 	.word	0x0800598d
 8005914:	0800598d 	.word	0x0800598d
 8005918:	0800598d 	.word	0x0800598d
 800591c:	0800598d 	.word	0x0800598d
 8005920:	0800598d 	.word	0x0800598d
 8005924:	0800598d 	.word	0x0800598d
 8005928:	0800598d 	.word	0x0800598d
 800592c:	0800598d 	.word	0x0800598d
 8005930:	0800598d 	.word	0x0800598d
 8005934:	0800598d 	.word	0x0800598d
 8005938:	0800598d 	.word	0x0800598d
 800593c:	0800598d 	.word	0x0800598d
 8005940:	0800598d 	.word	0x0800598d
 8005944:	0800598d 	.word	0x0800598d
 8005948:	0800598d 	.word	0x0800598d
 800594c:	0800598d 	.word	0x0800598d
 8005950:	0800598d 	.word	0x0800598d
 8005954:	0800598d 	.word	0x0800598d
 8005958:	0800598d 	.word	0x0800598d
 800595c:	0800598d 	.word	0x0800598d
 8005960:	0800598d 	.word	0x0800598d
 8005964:	0800598d 	.word	0x0800598d
 8005968:	0800598d 	.word	0x0800598d
 800596c:	0800598d 	.word	0x0800598d
 8005970:	0800598d 	.word	0x0800598d
 8005974:	0800598d 	.word	0x0800598d
 8005978:	0800598d 	.word	0x0800598d
 800597c:	0800598d 	.word	0x0800598d
 8005980:	0800598d 	.word	0x0800598d
 8005984:	0800598d 	.word	0x0800598d
 8005988:	0800598d 	.word	0x0800598d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800598c:	bf00      	nop
  }

  return (USBD_OK);
 800598e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005990:	4618      	mov	r0, r3
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	4805      	ldr	r0, [pc, #20]	; (80059c0 <CDC_Receive_FS+0x24>)
 80059aa:	f7fe fdd9 	bl	8004560 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80059ae:	4804      	ldr	r0, [pc, #16]	; (80059c0 <CDC_Receive_FS+0x24>)
 80059b0:	f7fe fe1a 	bl	80045e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80059b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000218 	.word	0x20000218

080059c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80059d4:	4b0d      	ldr	r3, [pc, #52]	; (8005a0c <CDC_Transmit_FS+0x48>)
 80059d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e00b      	b.n	8005a02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80059ea:	887b      	ldrh	r3, [r7, #2]
 80059ec:	461a      	mov	r2, r3
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4806      	ldr	r0, [pc, #24]	; (8005a0c <CDC_Transmit_FS+0x48>)
 80059f2:	f7fe fd9c 	bl	800452e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80059f6:	4805      	ldr	r0, [pc, #20]	; (8005a0c <CDC_Transmit_FS+0x48>)
 80059f8:	f7fe fdc6 	bl	8004588 <USBD_CDC_TransmitPacket>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20000218 	.word	0x20000218

08005a10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005a22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
	...

08005a34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	6039      	str	r1, [r7, #0]
 8005a3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2212      	movs	r2, #18
 8005a44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005a46:	4b03      	ldr	r3, [pc, #12]	; (8005a54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	20000150 	.word	0x20000150

08005a58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	6039      	str	r1, [r7, #0]
 8005a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2204      	movs	r2, #4
 8005a68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005a6a:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	20000164 	.word	0x20000164

08005a7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	4603      	mov	r3, r0
 8005a84:	6039      	str	r1, [r7, #0]
 8005a86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d105      	bne.n	8005a9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	4907      	ldr	r1, [pc, #28]	; (8005ab0 <USBD_FS_ProductStrDescriptor+0x34>)
 8005a92:	4808      	ldr	r0, [pc, #32]	; (8005ab4 <USBD_FS_ProductStrDescriptor+0x38>)
 8005a94:	f7ff fdf7 	bl	8005686 <USBD_GetString>
 8005a98:	e004      	b.n	8005aa4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	4904      	ldr	r1, [pc, #16]	; (8005ab0 <USBD_FS_ProductStrDescriptor+0x34>)
 8005a9e:	4805      	ldr	r0, [pc, #20]	; (8005ab4 <USBD_FS_ProductStrDescriptor+0x38>)
 8005aa0:	f7ff fdf1 	bl	8005686 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005aa4:	4b02      	ldr	r3, [pc, #8]	; (8005ab0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	200014e8 	.word	0x200014e8
 8005ab4:	08006468 	.word	0x08006468

08005ab8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b082      	sub	sp, #8
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	6039      	str	r1, [r7, #0]
 8005ac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	4904      	ldr	r1, [pc, #16]	; (8005ad8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005ac8:	4804      	ldr	r0, [pc, #16]	; (8005adc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005aca:	f7ff fddc 	bl	8005686 <USBD_GetString>
  return USBD_StrDesc;
 8005ace:	4b02      	ldr	r3, [pc, #8]	; (8005ad8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	200014e8 	.word	0x200014e8
 8005adc:	08006480 	.word	0x08006480

08005ae0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	6039      	str	r1, [r7, #0]
 8005aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	221a      	movs	r2, #26
 8005af0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005af2:	f000 f843 	bl	8005b7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005af6:	4b02      	ldr	r3, [pc, #8]	; (8005b00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20000168 	.word	0x20000168

08005b04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	6039      	str	r1, [r7, #0]
 8005b0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d105      	bne.n	8005b22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	4907      	ldr	r1, [pc, #28]	; (8005b38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005b1a:	4808      	ldr	r0, [pc, #32]	; (8005b3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005b1c:	f7ff fdb3 	bl	8005686 <USBD_GetString>
 8005b20:	e004      	b.n	8005b2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	4904      	ldr	r1, [pc, #16]	; (8005b38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005b26:	4805      	ldr	r0, [pc, #20]	; (8005b3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005b28:	f7ff fdad 	bl	8005686 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b2c:	4b02      	ldr	r3, [pc, #8]	; (8005b38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	200014e8 	.word	0x200014e8
 8005b3c:	08006494 	.word	0x08006494

08005b40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	4603      	mov	r3, r0
 8005b48:	6039      	str	r1, [r7, #0]
 8005b4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d105      	bne.n	8005b5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	4907      	ldr	r1, [pc, #28]	; (8005b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005b56:	4808      	ldr	r0, [pc, #32]	; (8005b78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005b58:	f7ff fd95 	bl	8005686 <USBD_GetString>
 8005b5c:	e004      	b.n	8005b68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	4904      	ldr	r1, [pc, #16]	; (8005b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005b62:	4805      	ldr	r0, [pc, #20]	; (8005b78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005b64:	f7ff fd8f 	bl	8005686 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005b68:	4b02      	ldr	r3, [pc, #8]	; (8005b74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	200014e8 	.word	0x200014e8
 8005b78:	080064a0 	.word	0x080064a0

08005b7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005b82:	4b0f      	ldr	r3, [pc, #60]	; (8005bc0 <Get_SerialNum+0x44>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005b88:	4b0e      	ldr	r3, [pc, #56]	; (8005bc4 <Get_SerialNum+0x48>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005b8e:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <Get_SerialNum+0x4c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4413      	add	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d009      	beq.n	8005bb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005ba2:	2208      	movs	r2, #8
 8005ba4:	4909      	ldr	r1, [pc, #36]	; (8005bcc <Get_SerialNum+0x50>)
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 f814 	bl	8005bd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005bac:	2204      	movs	r2, #4
 8005bae:	4908      	ldr	r1, [pc, #32]	; (8005bd0 <Get_SerialNum+0x54>)
 8005bb0:	68b8      	ldr	r0, [r7, #8]
 8005bb2:	f000 f80f 	bl	8005bd4 <IntToUnicode>
  }
}
 8005bb6:	bf00      	nop
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	1fff7a10 	.word	0x1fff7a10
 8005bc4:	1fff7a14 	.word	0x1fff7a14
 8005bc8:	1fff7a18 	.word	0x1fff7a18
 8005bcc:	2000016a 	.word	0x2000016a
 8005bd0:	2000017a 	.word	0x2000017a

08005bd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	4613      	mov	r3, r2
 8005be0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	75fb      	strb	r3, [r7, #23]
 8005bea:	e027      	b.n	8005c3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	0f1b      	lsrs	r3, r3, #28
 8005bf0:	2b09      	cmp	r3, #9
 8005bf2:	d80b      	bhi.n	8005c0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	0f1b      	lsrs	r3, r3, #28
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	4619      	mov	r1, r3
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	440b      	add	r3, r1
 8005c04:	3230      	adds	r2, #48	; 0x30
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	e00a      	b.n	8005c22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	0f1b      	lsrs	r3, r3, #28
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	4619      	mov	r1, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	440b      	add	r3, r1
 8005c1c:	3237      	adds	r2, #55	; 0x37
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4413      	add	r3, r2
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	75fb      	strb	r3, [r7, #23]
 8005c3c:	7dfa      	ldrb	r2, [r7, #23]
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d3d3      	bcc.n	8005bec <IntToUnicode+0x18>
  }
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08a      	sub	sp, #40	; 0x28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c58:	f107 0314 	add.w	r3, r7, #20
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	605a      	str	r2, [r3, #4]
 8005c62:	609a      	str	r2, [r3, #8]
 8005c64:	60da      	str	r2, [r3, #12]
 8005c66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c70:	d13a      	bne.n	8005ce8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c72:	2300      	movs	r3, #0
 8005c74:	613b      	str	r3, [r7, #16]
 8005c76:	4b1e      	ldr	r3, [pc, #120]	; (8005cf0 <HAL_PCD_MspInit+0xa0>)
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	4a1d      	ldr	r2, [pc, #116]	; (8005cf0 <HAL_PCD_MspInit+0xa0>)
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	6313      	str	r3, [r2, #48]	; 0x30
 8005c82:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <HAL_PCD_MspInit+0xa0>)
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	613b      	str	r3, [r7, #16]
 8005c8c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005c8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c94:	2302      	movs	r3, #2
 8005c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005ca0:	230a      	movs	r3, #10
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ca4:	f107 0314 	add.w	r3, r7, #20
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4812      	ldr	r0, [pc, #72]	; (8005cf4 <HAL_PCD_MspInit+0xa4>)
 8005cac:	f7fa ff42 	bl	8000b34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005cb0:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <HAL_PCD_MspInit+0xa0>)
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	4a0e      	ldr	r2, [pc, #56]	; (8005cf0 <HAL_PCD_MspInit+0xa0>)
 8005cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cba:	6353      	str	r3, [r2, #52]	; 0x34
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <HAL_PCD_MspInit+0xa0>)
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	4a0a      	ldr	r2, [pc, #40]	; (8005cf0 <HAL_PCD_MspInit+0xa0>)
 8005cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cca:	6453      	str	r3, [r2, #68]	; 0x44
 8005ccc:	4b08      	ldr	r3, [pc, #32]	; (8005cf0 <HAL_PCD_MspInit+0xa0>)
 8005cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cd4:	60fb      	str	r3, [r7, #12]
 8005cd6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2100      	movs	r1, #0
 8005cdc:	2043      	movs	r0, #67	; 0x43
 8005cde:	f7fa fef2 	bl	8000ac6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005ce2:	2043      	movs	r0, #67	; 0x43
 8005ce4:	f7fa ff0b 	bl	8000afe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005ce8:	bf00      	nop
 8005cea:	3728      	adds	r7, #40	; 0x28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40023800 	.word	0x40023800
 8005cf4:	40020000 	.word	0x40020000

08005cf8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f7fe fd36 	bl	8004780 <USBD_LL_SetupStage>
}
 8005d14:	bf00      	nop
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	460b      	mov	r3, r1
 8005d26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005d2e:	78fa      	ldrb	r2, [r7, #3]
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	4613      	mov	r3, r2
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	1a9b      	subs	r3, r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	440b      	add	r3, r1
 8005d3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	4619      	mov	r1, r3
 8005d46:	f7fe fd6e 	bl	8004826 <USBD_LL_DataOutStage>
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005d64:	78fa      	ldrb	r2, [r7, #3]
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	00db      	lsls	r3, r3, #3
 8005d6c:	1a9b      	subs	r3, r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	3348      	adds	r3, #72	; 0x48
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	f7fe fdb7 	bl	80048ec <USBD_LL_DataInStage>
}
 8005d7e:	bf00      	nop
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b082      	sub	sp, #8
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7fe febb 	bl	8004b10 <USBD_LL_SOF>
}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005daa:	2301      	movs	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005db6:	2300      	movs	r3, #0
 8005db8:	73fb      	strb	r3, [r7, #15]
 8005dba:	e008      	b.n	8005dce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d102      	bne.n	8005dca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	73fb      	strb	r3, [r7, #15]
 8005dc8:	e001      	b.n	8005dce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005dca:	f7fa fc37 	bl	800063c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005dd4:	7bfa      	ldrb	r2, [r7, #15]
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fe fe5e 	bl	8004a9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fe fe17 	bl	8004a18 <USBD_LL_Reset>
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fe fe59 	bl	8004aba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e1a:	f043 0301 	orr.w	r3, r3, #1
 8005e1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d005      	beq.n	8005e34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005e28:	4b04      	ldr	r3, [pc, #16]	; (8005e3c <HAL_PCD_SuspendCallback+0x48>)
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	4a03      	ldr	r2, [pc, #12]	; (8005e3c <HAL_PCD_SuspendCallback+0x48>)
 8005e2e:	f043 0306 	orr.w	r3, r3, #6
 8005e32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	e000ed00 	.word	0xe000ed00

08005e40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7fe fe48 	bl	8004ae4 <USBD_LL_Resume>
}
 8005e54:	bf00      	nop
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e6e:	78fa      	ldrb	r2, [r7, #3]
 8005e70:	4611      	mov	r1, r2
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe fe73 	bl	8004b5e <USBD_LL_IsoOUTIncomplete>
}
 8005e78:	bf00      	nop
 8005e7a:	3708      	adds	r7, #8
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005e92:	78fa      	ldrb	r2, [r7, #3]
 8005e94:	4611      	mov	r1, r2
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe fe54 	bl	8004b44 <USBD_LL_IsoINIncomplete>
}
 8005e9c:	bf00      	nop
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fe fe60 	bl	8004b78 <USBD_LL_DevConnected>
}
 8005eb8:	bf00      	nop
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe fe5d 	bl	8004b8e <USBD_LL_DevDisconnected>
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d13c      	bne.n	8005f66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005eec:	4a20      	ldr	r2, [pc, #128]	; (8005f70 <USBD_LL_Init+0x94>)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a1e      	ldr	r2, [pc, #120]	; (8005f70 <USBD_LL_Init+0x94>)
 8005ef8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005efc:	4b1c      	ldr	r3, [pc, #112]	; (8005f70 <USBD_LL_Init+0x94>)
 8005efe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005f02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005f04:	4b1a      	ldr	r3, [pc, #104]	; (8005f70 <USBD_LL_Init+0x94>)
 8005f06:	2204      	movs	r2, #4
 8005f08:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005f0a:	4b19      	ldr	r3, [pc, #100]	; (8005f70 <USBD_LL_Init+0x94>)
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005f10:	4b17      	ldr	r3, [pc, #92]	; (8005f70 <USBD_LL_Init+0x94>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005f16:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <USBD_LL_Init+0x94>)
 8005f18:	2202      	movs	r2, #2
 8005f1a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005f1c:	4b14      	ldr	r3, [pc, #80]	; (8005f70 <USBD_LL_Init+0x94>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005f22:	4b13      	ldr	r3, [pc, #76]	; (8005f70 <USBD_LL_Init+0x94>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005f28:	4b11      	ldr	r3, [pc, #68]	; (8005f70 <USBD_LL_Init+0x94>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005f2e:	4b10      	ldr	r3, [pc, #64]	; (8005f70 <USBD_LL_Init+0x94>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005f34:	4b0e      	ldr	r3, [pc, #56]	; (8005f70 <USBD_LL_Init+0x94>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005f3a:	480d      	ldr	r0, [pc, #52]	; (8005f70 <USBD_LL_Init+0x94>)
 8005f3c:	f7fa ff94 	bl	8000e68 <HAL_PCD_Init>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005f46:	f7fa fb79 	bl	800063c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005f4a:	2180      	movs	r1, #128	; 0x80
 8005f4c:	4808      	ldr	r0, [pc, #32]	; (8005f70 <USBD_LL_Init+0x94>)
 8005f4e:	f7fc f8f2 	bl	8002136 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005f52:	2240      	movs	r2, #64	; 0x40
 8005f54:	2100      	movs	r1, #0
 8005f56:	4806      	ldr	r0, [pc, #24]	; (8005f70 <USBD_LL_Init+0x94>)
 8005f58:	f7fc f8a6 	bl	80020a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005f5c:	2280      	movs	r2, #128	; 0x80
 8005f5e:	2101      	movs	r1, #1
 8005f60:	4803      	ldr	r0, [pc, #12]	; (8005f70 <USBD_LL_Init+0x94>)
 8005f62:	f7fc f8a1 	bl	80020a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	200016e8 	.word	0x200016e8

08005f74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fb f889 	bl	80010a2 <HAL_PCD_Start>
 8005f90:	4603      	mov	r3, r0
 8005f92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 f92a 	bl	80061f0 <USBD_Get_USB_Status>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	4608      	mov	r0, r1
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	4603      	mov	r3, r0
 8005fba:	70fb      	strb	r3, [r7, #3]
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	70bb      	strb	r3, [r7, #2]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005fd2:	78bb      	ldrb	r3, [r7, #2]
 8005fd4:	883a      	ldrh	r2, [r7, #0]
 8005fd6:	78f9      	ldrb	r1, [r7, #3]
 8005fd8:	f7fb fc6d 	bl	80018b6 <HAL_PCD_EP_Open>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 f904 	bl	80061f0 <USBD_Get_USB_Status>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005fec:	7bbb      	ldrb	r3, [r7, #14]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	460b      	mov	r3, r1
 8006000:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006010:	78fa      	ldrb	r2, [r7, #3]
 8006012:	4611      	mov	r1, r2
 8006014:	4618      	mov	r0, r3
 8006016:	f7fb fcb6 	bl	8001986 <HAL_PCD_EP_Close>
 800601a:	4603      	mov	r3, r0
 800601c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	4618      	mov	r0, r3
 8006022:	f000 f8e5 	bl	80061f0 <USBD_Get_USB_Status>
 8006026:	4603      	mov	r3, r0
 8006028:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800602a:	7bbb      	ldrb	r3, [r7, #14]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800604e:	78fa      	ldrb	r2, [r7, #3]
 8006050:	4611      	mov	r1, r2
 8006052:	4618      	mov	r0, r3
 8006054:	f7fb fd8e 	bl	8001b74 <HAL_PCD_EP_SetStall>
 8006058:	4603      	mov	r3, r0
 800605a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	4618      	mov	r0, r3
 8006060:	f000 f8c6 	bl	80061f0 <USBD_Get_USB_Status>
 8006064:	4603      	mov	r3, r0
 8006066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006068:	7bbb      	ldrb	r3, [r7, #14]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800608c:	78fa      	ldrb	r2, [r7, #3]
 800608e:	4611      	mov	r1, r2
 8006090:	4618      	mov	r0, r3
 8006092:	f7fb fdd3 	bl	8001c3c <HAL_PCD_EP_ClrStall>
 8006096:	4603      	mov	r3, r0
 8006098:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	4618      	mov	r0, r3
 800609e:	f000 f8a7 	bl	80061f0 <USBD_Get_USB_Status>
 80060a2:	4603      	mov	r3, r0
 80060a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80060a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80060c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80060c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	da0b      	bge.n	80060e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060d2:	68f9      	ldr	r1, [r7, #12]
 80060d4:	4613      	mov	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	1a9b      	subs	r3, r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	440b      	add	r3, r1
 80060de:	333e      	adds	r3, #62	; 0x3e
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	e00b      	b.n	80060fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80060ea:	68f9      	ldr	r1, [r7, #12]
 80060ec:	4613      	mov	r3, r2
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	1a9b      	subs	r3, r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	440b      	add	r3, r1
 80060f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80060fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006122:	78fa      	ldrb	r2, [r7, #3]
 8006124:	4611      	mov	r1, r2
 8006126:	4618      	mov	r0, r3
 8006128:	f7fb fba0 	bl	800186c <HAL_PCD_SetAddress>
 800612c:	4603      	mov	r3, r0
 800612e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 f85c 	bl	80061f0 <USBD_Get_USB_Status>
 8006138:	4603      	mov	r3, r0
 800613a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800613c:	7bbb      	ldrb	r3, [r7, #14]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b086      	sub	sp, #24
 800614a:	af00      	add	r7, sp, #0
 800614c:	60f8      	str	r0, [r7, #12]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
 8006152:	460b      	mov	r3, r1
 8006154:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006164:	7af9      	ldrb	r1, [r7, #11]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	f7fb fcb9 	bl	8001ae0 <HAL_PCD_EP_Transmit>
 800616e:	4603      	mov	r3, r0
 8006170:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006172:	7dfb      	ldrb	r3, [r7, #23]
 8006174:	4618      	mov	r0, r3
 8006176:	f000 f83b 	bl	80061f0 <USBD_Get_USB_Status>
 800617a:	4603      	mov	r3, r0
 800617c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800617e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	607a      	str	r2, [r7, #4]
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	460b      	mov	r3, r1
 8006196:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80061a6:	7af9      	ldrb	r1, [r7, #11]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	f7fb fc35 	bl	8001a1a <HAL_PCD_EP_Receive>
 80061b0:	4603      	mov	r3, r0
 80061b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 f81a 	bl	80061f0 <USBD_Get_USB_Status>
 80061bc:	4603      	mov	r3, r0
 80061be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80061c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b082      	sub	sp, #8
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	460b      	mov	r3, r1
 80061d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	4611      	mov	r1, r2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fb fc65 	bl	8001ab0 <HAL_PCD_EP_GetRxCount>
 80061e6:	4603      	mov	r3, r0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	2b03      	cmp	r3, #3
 8006202:	d817      	bhi.n	8006234 <USBD_Get_USB_Status+0x44>
 8006204:	a201      	add	r2, pc, #4	; (adr r2, 800620c <USBD_Get_USB_Status+0x1c>)
 8006206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620a:	bf00      	nop
 800620c:	0800621d 	.word	0x0800621d
 8006210:	08006223 	.word	0x08006223
 8006214:	08006229 	.word	0x08006229
 8006218:	0800622f 	.word	0x0800622f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	73fb      	strb	r3, [r7, #15]
    break;
 8006220:	e00b      	b.n	800623a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006222:	2303      	movs	r3, #3
 8006224:	73fb      	strb	r3, [r7, #15]
    break;
 8006226:	e008      	b.n	800623a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006228:	2301      	movs	r3, #1
 800622a:	73fb      	strb	r3, [r7, #15]
    break;
 800622c:	e005      	b.n	800623a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800622e:	2303      	movs	r3, #3
 8006230:	73fb      	strb	r3, [r7, #15]
    break;
 8006232:	e002      	b.n	800623a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006234:	2303      	movs	r3, #3
 8006236:	73fb      	strb	r3, [r7, #15]
    break;
 8006238:	bf00      	nop
  }
  return usb_status;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <__errno>:
 8006248:	4b01      	ldr	r3, [pc, #4]	; (8006250 <__errno+0x8>)
 800624a:	6818      	ldr	r0, [r3, #0]
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	20000184 	.word	0x20000184

08006254 <__libc_init_array>:
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	4e0d      	ldr	r6, [pc, #52]	; (800628c <__libc_init_array+0x38>)
 8006258:	4c0d      	ldr	r4, [pc, #52]	; (8006290 <__libc_init_array+0x3c>)
 800625a:	1ba4      	subs	r4, r4, r6
 800625c:	10a4      	asrs	r4, r4, #2
 800625e:	2500      	movs	r5, #0
 8006260:	42a5      	cmp	r5, r4
 8006262:	d109      	bne.n	8006278 <__libc_init_array+0x24>
 8006264:	4e0b      	ldr	r6, [pc, #44]	; (8006294 <__libc_init_array+0x40>)
 8006266:	4c0c      	ldr	r4, [pc, #48]	; (8006298 <__libc_init_array+0x44>)
 8006268:	f000 f8ea 	bl	8006440 <_init>
 800626c:	1ba4      	subs	r4, r4, r6
 800626e:	10a4      	asrs	r4, r4, #2
 8006270:	2500      	movs	r5, #0
 8006272:	42a5      	cmp	r5, r4
 8006274:	d105      	bne.n	8006282 <__libc_init_array+0x2e>
 8006276:	bd70      	pop	{r4, r5, r6, pc}
 8006278:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800627c:	4798      	blx	r3
 800627e:	3501      	adds	r5, #1
 8006280:	e7ee      	b.n	8006260 <__libc_init_array+0xc>
 8006282:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006286:	4798      	blx	r3
 8006288:	3501      	adds	r5, #1
 800628a:	e7f2      	b.n	8006272 <__libc_init_array+0x1e>
 800628c:	080064c8 	.word	0x080064c8
 8006290:	080064c8 	.word	0x080064c8
 8006294:	080064c8 	.word	0x080064c8
 8006298:	080064cc 	.word	0x080064cc

0800629c <malloc>:
 800629c:	4b02      	ldr	r3, [pc, #8]	; (80062a8 <malloc+0xc>)
 800629e:	4601      	mov	r1, r0
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	f000 b861 	b.w	8006368 <_malloc_r>
 80062a6:	bf00      	nop
 80062a8:	20000184 	.word	0x20000184

080062ac <free>:
 80062ac:	4b02      	ldr	r3, [pc, #8]	; (80062b8 <free+0xc>)
 80062ae:	4601      	mov	r1, r0
 80062b0:	6818      	ldr	r0, [r3, #0]
 80062b2:	f000 b80b 	b.w	80062cc <_free_r>
 80062b6:	bf00      	nop
 80062b8:	20000184 	.word	0x20000184

080062bc <memset>:
 80062bc:	4402      	add	r2, r0
 80062be:	4603      	mov	r3, r0
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d100      	bne.n	80062c6 <memset+0xa>
 80062c4:	4770      	bx	lr
 80062c6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ca:	e7f9      	b.n	80062c0 <memset+0x4>

080062cc <_free_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4605      	mov	r5, r0
 80062d0:	2900      	cmp	r1, #0
 80062d2:	d045      	beq.n	8006360 <_free_r+0x94>
 80062d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d8:	1f0c      	subs	r4, r1, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bfb8      	it	lt
 80062de:	18e4      	addlt	r4, r4, r3
 80062e0:	f000 f8ac 	bl	800643c <__malloc_lock>
 80062e4:	4a1f      	ldr	r2, [pc, #124]	; (8006364 <_free_r+0x98>)
 80062e6:	6813      	ldr	r3, [r2, #0]
 80062e8:	4610      	mov	r0, r2
 80062ea:	b933      	cbnz	r3, 80062fa <_free_r+0x2e>
 80062ec:	6063      	str	r3, [r4, #4]
 80062ee:	6014      	str	r4, [r2, #0]
 80062f0:	4628      	mov	r0, r5
 80062f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062f6:	f000 b8a2 	b.w	800643e <__malloc_unlock>
 80062fa:	42a3      	cmp	r3, r4
 80062fc:	d90c      	bls.n	8006318 <_free_r+0x4c>
 80062fe:	6821      	ldr	r1, [r4, #0]
 8006300:	1862      	adds	r2, r4, r1
 8006302:	4293      	cmp	r3, r2
 8006304:	bf04      	itt	eq
 8006306:	681a      	ldreq	r2, [r3, #0]
 8006308:	685b      	ldreq	r3, [r3, #4]
 800630a:	6063      	str	r3, [r4, #4]
 800630c:	bf04      	itt	eq
 800630e:	1852      	addeq	r2, r2, r1
 8006310:	6022      	streq	r2, [r4, #0]
 8006312:	6004      	str	r4, [r0, #0]
 8006314:	e7ec      	b.n	80062f0 <_free_r+0x24>
 8006316:	4613      	mov	r3, r2
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	b10a      	cbz	r2, 8006320 <_free_r+0x54>
 800631c:	42a2      	cmp	r2, r4
 800631e:	d9fa      	bls.n	8006316 <_free_r+0x4a>
 8006320:	6819      	ldr	r1, [r3, #0]
 8006322:	1858      	adds	r0, r3, r1
 8006324:	42a0      	cmp	r0, r4
 8006326:	d10b      	bne.n	8006340 <_free_r+0x74>
 8006328:	6820      	ldr	r0, [r4, #0]
 800632a:	4401      	add	r1, r0
 800632c:	1858      	adds	r0, r3, r1
 800632e:	4282      	cmp	r2, r0
 8006330:	6019      	str	r1, [r3, #0]
 8006332:	d1dd      	bne.n	80062f0 <_free_r+0x24>
 8006334:	6810      	ldr	r0, [r2, #0]
 8006336:	6852      	ldr	r2, [r2, #4]
 8006338:	605a      	str	r2, [r3, #4]
 800633a:	4401      	add	r1, r0
 800633c:	6019      	str	r1, [r3, #0]
 800633e:	e7d7      	b.n	80062f0 <_free_r+0x24>
 8006340:	d902      	bls.n	8006348 <_free_r+0x7c>
 8006342:	230c      	movs	r3, #12
 8006344:	602b      	str	r3, [r5, #0]
 8006346:	e7d3      	b.n	80062f0 <_free_r+0x24>
 8006348:	6820      	ldr	r0, [r4, #0]
 800634a:	1821      	adds	r1, r4, r0
 800634c:	428a      	cmp	r2, r1
 800634e:	bf04      	itt	eq
 8006350:	6811      	ldreq	r1, [r2, #0]
 8006352:	6852      	ldreq	r2, [r2, #4]
 8006354:	6062      	str	r2, [r4, #4]
 8006356:	bf04      	itt	eq
 8006358:	1809      	addeq	r1, r1, r0
 800635a:	6021      	streq	r1, [r4, #0]
 800635c:	605c      	str	r4, [r3, #4]
 800635e:	e7c7      	b.n	80062f0 <_free_r+0x24>
 8006360:	bd38      	pop	{r3, r4, r5, pc}
 8006362:	bf00      	nop
 8006364:	2000020c 	.word	0x2000020c

08006368 <_malloc_r>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	1ccd      	adds	r5, r1, #3
 800636c:	f025 0503 	bic.w	r5, r5, #3
 8006370:	3508      	adds	r5, #8
 8006372:	2d0c      	cmp	r5, #12
 8006374:	bf38      	it	cc
 8006376:	250c      	movcc	r5, #12
 8006378:	2d00      	cmp	r5, #0
 800637a:	4606      	mov	r6, r0
 800637c:	db01      	blt.n	8006382 <_malloc_r+0x1a>
 800637e:	42a9      	cmp	r1, r5
 8006380:	d903      	bls.n	800638a <_malloc_r+0x22>
 8006382:	230c      	movs	r3, #12
 8006384:	6033      	str	r3, [r6, #0]
 8006386:	2000      	movs	r0, #0
 8006388:	bd70      	pop	{r4, r5, r6, pc}
 800638a:	f000 f857 	bl	800643c <__malloc_lock>
 800638e:	4a21      	ldr	r2, [pc, #132]	; (8006414 <_malloc_r+0xac>)
 8006390:	6814      	ldr	r4, [r2, #0]
 8006392:	4621      	mov	r1, r4
 8006394:	b991      	cbnz	r1, 80063bc <_malloc_r+0x54>
 8006396:	4c20      	ldr	r4, [pc, #128]	; (8006418 <_malloc_r+0xb0>)
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	b91b      	cbnz	r3, 80063a4 <_malloc_r+0x3c>
 800639c:	4630      	mov	r0, r6
 800639e:	f000 f83d 	bl	800641c <_sbrk_r>
 80063a2:	6020      	str	r0, [r4, #0]
 80063a4:	4629      	mov	r1, r5
 80063a6:	4630      	mov	r0, r6
 80063a8:	f000 f838 	bl	800641c <_sbrk_r>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d124      	bne.n	80063fa <_malloc_r+0x92>
 80063b0:	230c      	movs	r3, #12
 80063b2:	6033      	str	r3, [r6, #0]
 80063b4:	4630      	mov	r0, r6
 80063b6:	f000 f842 	bl	800643e <__malloc_unlock>
 80063ba:	e7e4      	b.n	8006386 <_malloc_r+0x1e>
 80063bc:	680b      	ldr	r3, [r1, #0]
 80063be:	1b5b      	subs	r3, r3, r5
 80063c0:	d418      	bmi.n	80063f4 <_malloc_r+0x8c>
 80063c2:	2b0b      	cmp	r3, #11
 80063c4:	d90f      	bls.n	80063e6 <_malloc_r+0x7e>
 80063c6:	600b      	str	r3, [r1, #0]
 80063c8:	50cd      	str	r5, [r1, r3]
 80063ca:	18cc      	adds	r4, r1, r3
 80063cc:	4630      	mov	r0, r6
 80063ce:	f000 f836 	bl	800643e <__malloc_unlock>
 80063d2:	f104 000b 	add.w	r0, r4, #11
 80063d6:	1d23      	adds	r3, r4, #4
 80063d8:	f020 0007 	bic.w	r0, r0, #7
 80063dc:	1ac3      	subs	r3, r0, r3
 80063de:	d0d3      	beq.n	8006388 <_malloc_r+0x20>
 80063e0:	425a      	negs	r2, r3
 80063e2:	50e2      	str	r2, [r4, r3]
 80063e4:	e7d0      	b.n	8006388 <_malloc_r+0x20>
 80063e6:	428c      	cmp	r4, r1
 80063e8:	684b      	ldr	r3, [r1, #4]
 80063ea:	bf16      	itet	ne
 80063ec:	6063      	strne	r3, [r4, #4]
 80063ee:	6013      	streq	r3, [r2, #0]
 80063f0:	460c      	movne	r4, r1
 80063f2:	e7eb      	b.n	80063cc <_malloc_r+0x64>
 80063f4:	460c      	mov	r4, r1
 80063f6:	6849      	ldr	r1, [r1, #4]
 80063f8:	e7cc      	b.n	8006394 <_malloc_r+0x2c>
 80063fa:	1cc4      	adds	r4, r0, #3
 80063fc:	f024 0403 	bic.w	r4, r4, #3
 8006400:	42a0      	cmp	r0, r4
 8006402:	d005      	beq.n	8006410 <_malloc_r+0xa8>
 8006404:	1a21      	subs	r1, r4, r0
 8006406:	4630      	mov	r0, r6
 8006408:	f000 f808 	bl	800641c <_sbrk_r>
 800640c:	3001      	adds	r0, #1
 800640e:	d0cf      	beq.n	80063b0 <_malloc_r+0x48>
 8006410:	6025      	str	r5, [r4, #0]
 8006412:	e7db      	b.n	80063cc <_malloc_r+0x64>
 8006414:	2000020c 	.word	0x2000020c
 8006418:	20000210 	.word	0x20000210

0800641c <_sbrk_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4c06      	ldr	r4, [pc, #24]	; (8006438 <_sbrk_r+0x1c>)
 8006420:	2300      	movs	r3, #0
 8006422:	4605      	mov	r5, r0
 8006424:	4608      	mov	r0, r1
 8006426:	6023      	str	r3, [r4, #0]
 8006428:	f7fa f968 	bl	80006fc <_sbrk>
 800642c:	1c43      	adds	r3, r0, #1
 800642e:	d102      	bne.n	8006436 <_sbrk_r+0x1a>
 8006430:	6823      	ldr	r3, [r4, #0]
 8006432:	b103      	cbz	r3, 8006436 <_sbrk_r+0x1a>
 8006434:	602b      	str	r3, [r5, #0]
 8006436:	bd38      	pop	{r3, r4, r5, pc}
 8006438:	20001af0 	.word	0x20001af0

0800643c <__malloc_lock>:
 800643c:	4770      	bx	lr

0800643e <__malloc_unlock>:
 800643e:	4770      	bx	lr

08006440 <_init>:
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	bf00      	nop
 8006444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006446:	bc08      	pop	{r3}
 8006448:	469e      	mov	lr, r3
 800644a:	4770      	bx	lr

0800644c <_fini>:
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	bf00      	nop
 8006450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006452:	bc08      	pop	{r3}
 8006454:	469e      	mov	lr, r3
 8006456:	4770      	bx	lr
