
potans3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009898  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009a20  08009a20  00019a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a44  08009a44  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009a44  08009a44  00019a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a4c  08009a4c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a4c  08009a4c  00019a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a50  08009a50  00019a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049b8  20000090  08009ae4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a48  08009ae4  00024a48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b6b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004433  00000000  00000000  00040c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  00045060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001688  00000000  00000000  00046888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262c5  00000000  00000000  00047f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f0f4  00000000  00000000  0006e1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e02c5  00000000  00000000  0008d2c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016d58e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a8  00000000  00000000  0016d5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009a08 	.word	0x08009a08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009a08 	.word	0x08009a08

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 feea 	bl	800129c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f844 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fa7e 	bl	80009cc <MX_GPIO_Init>
  MX_DMA_Init();
 80004d0:	f000 fa54 	bl	800097c <MX_DMA_Init>
  MX_I2C1_Init();
 80004d4:	f000 f964 	bl	80007a0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d8:	f000 f990 	bl	80007fc <MX_I2S3_Init>
  MX_SPI1_Init();
 80004dc:	f000 f9be 	bl	800085c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e0:	f008 fe80 	bl	80091e4 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80004e4:	f000 f8b8 	bl	8000658 <MX_ADC1_Init>
  MX_TIM3_Init();
 80004e8:	f000 f9ee 	bl	80008c8 <MX_TIM3_Init>
  MX_ADC2_Init();
 80004ec:	f000 f906 	bl	80006fc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1, adc_buf, bufferlength);
 80004f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004f4:	490f      	ldr	r1, [pc, #60]	; (8000534 <main+0x74>)
 80004f6:	4810      	ldr	r0, [pc, #64]	; (8000538 <main+0x78>)
 80004f8:	f000 ffaa 	bl	8001450 <HAL_ADC_Start_DMA>
HAL_ADC_Start_DMA(&hadc2, adc_bufldr, bufferlength);
 80004fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000500:	490e      	ldr	r1, [pc, #56]	; (800053c <main+0x7c>)
 8000502:	480f      	ldr	r0, [pc, #60]	; (8000540 <main+0x80>)
 8000504:	f000 ffa4 	bl	8001450 <HAL_ADC_Start_DMA>
HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000508:	2100      	movs	r1, #0
 800050a:	480e      	ldr	r0, [pc, #56]	; (8000544 <main+0x84>)
 800050c:	f005 fb92 	bl	8005c34 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000510:	f008 fe8e 	bl	8009230 <MX_USB_HOST_Process>
  	//  HAL_Delay(2000);
  	  //htim3.Instance->CCR1 = 75;  // duty cycle is 1.5 ms
  	  //HAL_Delay(2000);
  	  //htim3.Instance->CCR1 = 125;  // duty cycle is 2.5 ms
  	  //HAL_Delay(2000);
    timerval=__HAL_TIM_GET_COUNTER(&htim3);
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <main+0x84>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051a:	461a      	mov	r2, r3
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <main+0x88>)
 800051e:	601a      	str	r2, [r3, #0]
   pc6out=HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 8000520:	2140      	movs	r1, #64	; 0x40
 8000522:	480a      	ldr	r0, [pc, #40]	; (800054c <main+0x8c>)
 8000524:	f002 f97a 	bl	800281c <HAL_GPIO_ReadPin>
 8000528:	4603      	mov	r3, r0
 800052a:	461a      	mov	r2, r3
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <main+0x90>)
 800052e:	601a      	str	r2, [r3, #0]
    MX_USB_HOST_Process();
 8000530:	e7ee      	b.n	8000510 <main+0x50>
 8000532:	bf00      	nop
 8000534:	200022ac 	.word	0x200022ac
 8000538:	200001a4 	.word	0x200001a4
 800053c:	20000250 	.word	0x20000250
 8000540:	200000c0 	.word	0x200000c0
 8000544:	2000015c 	.word	0x2000015c
 8000548:	200001ec 	.word	0x200001ec
 800054c:	40020800 	.word	0x40020800
 8000550:	20002250 	.word	0x20002250

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b098      	sub	sp, #96	; 0x60
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f009 f980 	bl	8009868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 031c 	add.w	r3, r7, #28
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	4b31      	ldr	r3, [pc, #196]	; (8000650 <SystemClock_Config+0xfc>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058e:	4a30      	ldr	r2, [pc, #192]	; (8000650 <SystemClock_Config+0xfc>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000594:	6413      	str	r3, [r2, #64]	; 0x40
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <SystemClock_Config+0xfc>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <SystemClock_Config+0x100>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a2a      	ldr	r2, [pc, #168]	; (8000654 <SystemClock_Config+0x100>)
 80005ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b0:	6013      	str	r3, [r2, #0]
 80005b2:	4b28      	ldr	r3, [pc, #160]	; (8000654 <SystemClock_Config+0x100>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005be:	2301      	movs	r3, #1
 80005c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d2:	2308      	movs	r3, #8
 80005d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 fcab 	bl	8004f44 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005f4:	f000 fb3a 	bl	8000c6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000608:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	2105      	movs	r1, #5
 8000616:	4618      	mov	r0, r3
 8000618:	f004 ff0c 	bl	8005434 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000622:	f000 fb23 	bl	8000c6c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000626:	2301      	movs	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800062a:	23c0      	movs	r3, #192	; 0xc0
 800062c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800062e:	2302      	movs	r3, #2
 8000630:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000632:	f107 030c 	add.w	r3, r7, #12
 8000636:	4618      	mov	r0, r3
 8000638:	f005 f8e4 	bl	8005804 <HAL_RCCEx_PeriphCLKConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000642:	f000 fb13 	bl	8000c6c <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3760      	adds	r7, #96	; 0x60
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_ADC1_Init+0x98>)
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <MX_ADC1_Init+0x9c>)
 800066e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_ADC1_Init+0x98>)
 8000672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000676:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_ADC1_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_ADC1_Init+0x98>)
 8000686:	2201      	movs	r2, #1
 8000688:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_ADC1_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_ADC1_Init+0x98>)
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <MX_ADC1_Init+0xa0>)
 800069c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_ADC1_Init+0x98>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_ADC1_Init+0x98>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_ADC1_Init+0x98>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_ADC1_Init+0x98>)
 80006ba:	f000 fe85 	bl	80013c8 <HAL_ADC_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006c4:	f000 fad2 	bl	8000c6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	4619      	mov	r1, r3
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_ADC1_Init+0x98>)
 80006da:	f000 ffe1 	bl	80016a0 <HAL_ADC_ConfigChannel>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006e4:	f000 fac2 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200001a4 	.word	0x200001a4
 80006f4:	40012000 	.word	0x40012000
 80006f8:	0f000001 	.word	0x0f000001

080006fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_ADC2_Init+0x98>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <MX_ADC2_Init+0x9c>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <MX_ADC2_Init+0x98>)
 8000716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800071a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_ADC2_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_ADC2_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_ADC2_Init+0x98>)
 800072a:	2201      	movs	r2, #1
 800072c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_ADC2_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_ADC2_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_ADC2_Init+0x98>)
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_ADC2_Init+0xa0>)
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_ADC2_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_ADC2_Init+0x98>)
 800074a:	2201      	movs	r2, #1
 800074c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_ADC2_Init+0x98>)
 8000750:	2201      	movs	r2, #1
 8000752:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_ADC2_Init+0x98>)
 8000758:	2201      	movs	r2, #1
 800075a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_ADC2_Init+0x98>)
 800075e:	f000 fe33 	bl	80013c8 <HAL_ADC_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 fa80 	bl	8000c6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800076c:	2302      	movs	r3, #2
 800076e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_ADC2_Init+0x98>)
 800077e:	f000 ff8f 	bl	80016a0 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000788:	f000 fa70 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000c0 	.word	0x200000c0
 8000798:	40012100 	.word	0x40012100
 800079c:	0f000001 	.word	0x0f000001

080007a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007a6:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <MX_I2C1_Init+0x54>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007ac:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_I2C1_Init+0x58>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_I2C1_Init+0x50>)
 80007de:	f003 fdcd 	bl	800437c <HAL_I2C_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e8:	f000 fa40 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000108 	.word	0x20000108
 80007f4:	40005400 	.word	0x40005400
 80007f8:	000186a0 	.word	0x000186a0

080007fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000800:	4b13      	ldr	r3, [pc, #76]	; (8000850 <MX_I2S3_Init+0x54>)
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <MX_I2S3_Init+0x58>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2S3_Init+0x54>)
 8000808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <MX_I2S3_Init+0x54>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_I2S3_Init+0x54>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800081a:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <MX_I2S3_Init+0x54>)
 800081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000820:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <MX_I2S3_Init+0x54>)
 8000824:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <MX_I2S3_Init+0x5c>)
 8000826:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_I2S3_Init+0x54>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <MX_I2S3_Init+0x54>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_I2S3_Init+0x54>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_I2S3_Init+0x54>)
 800083c:	f003 fee2 	bl	8004604 <HAL_I2S_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000846:	f000 fa11 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20004310 	.word	0x20004310
 8000854:	40003c00 	.word	0x40003c00
 8000858:	00017700 	.word	0x00017700

0800085c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <MX_SPI1_Init+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800086c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_SPI1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_SPI1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_SPI1_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_SPI1_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_SPI1_Init+0x64>)
 80008a8:	220a      	movs	r2, #10
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_SPI1_Init+0x64>)
 80008ae:	f005 f8e9 	bl	8005a84 <HAL_SPI_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008b8:	f000 f9d8 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20002254 	.word	0x20002254
 80008c4:	40013000 	.word	0x40013000

080008c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
 80008e6:	615a      	str	r2, [r3, #20]
 80008e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ea:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_TIM3_Init+0xac>)
 80008ec:	4a22      	ldr	r2, [pc, #136]	; (8000978 <MX_TIM3_Init+0xb0>)
 80008ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680-1;
 80008f0:	4b20      	ldr	r3, [pc, #128]	; (8000974 <MX_TIM3_Init+0xac>)
 80008f2:	f240 628f 	movw	r2, #1679	; 0x68f
 80008f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <MX_TIM3_Init+0xac>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80008fe:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <MX_TIM3_Init+0xac>)
 8000900:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000904:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_TIM3_Init+0xac>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800090c:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_TIM3_Init+0xac>)
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000912:	4818      	ldr	r0, [pc, #96]	; (8000974 <MX_TIM3_Init+0xac>)
 8000914:	f005 f93f 	bl	8005b96 <HAL_TIM_PWM_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800091e:	f000 f9a5 	bl	8000c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	4619      	mov	r1, r3
 8000930:	4810      	ldr	r0, [pc, #64]	; (8000974 <MX_TIM3_Init+0xac>)
 8000932:	f005 fd7b 	bl	800642c <HAL_TIMEx_MasterConfigSynchronization>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800093c:	f000 f996 	bl	8000c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000940:	2360      	movs	r3, #96	; 0x60
 8000942:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	4619      	mov	r1, r3
 8000956:	4807      	ldr	r0, [pc, #28]	; (8000974 <MX_TIM3_Init+0xac>)
 8000958:	f005 fa34 	bl	8005dc4 <HAL_TIM_PWM_ConfigChannel>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000962:	f000 f983 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000966:	4803      	ldr	r0, [pc, #12]	; (8000974 <MX_TIM3_Init+0xac>)
 8000968:	f000 fba4 	bl	80010b4 <HAL_TIM_MspPostInit>

}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	2000015c 	.word	0x2000015c
 8000978:	40000400 	.word	0x40000400

0800097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_DMA_Init+0x4c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <MX_DMA_Init+0x4c>)
 800098c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <MX_DMA_Init+0x4c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2038      	movs	r0, #56	; 0x38
 80009a4:	f001 f9f7 	bl	8001d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009a8:	2038      	movs	r0, #56	; 0x38
 80009aa:	f001 fa10 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	203a      	movs	r0, #58	; 0x3a
 80009b4:	f001 f9ef 	bl	8001d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80009b8:	203a      	movs	r0, #58	; 0x3a
 80009ba:	f001 fa08 	bl	8001dce <HAL_NVIC_EnableIRQ>

}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	; 0x30
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	61bb      	str	r3, [r7, #24]
 80009e6:	4b6b      	ldr	r3, [pc, #428]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a6a      	ldr	r2, [pc, #424]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 80009ec:	f043 0310 	orr.w	r3, r3, #16
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b68      	ldr	r3, [pc, #416]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0310 	and.w	r3, r3, #16
 80009fa:	61bb      	str	r3, [r7, #24]
 80009fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	4b64      	ldr	r3, [pc, #400]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a63      	ldr	r2, [pc, #396]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a08:	f043 0304 	orr.w	r3, r3, #4
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b61      	ldr	r3, [pc, #388]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0304 	and.w	r3, r3, #4
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b5d      	ldr	r3, [pc, #372]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a5c      	ldr	r2, [pc, #368]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b5a      	ldr	r3, [pc, #360]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b56      	ldr	r3, [pc, #344]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a55      	ldr	r2, [pc, #340]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b53      	ldr	r3, [pc, #332]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	4b4f      	ldr	r3, [pc, #316]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a4e      	ldr	r2, [pc, #312]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b4c      	ldr	r3, [pc, #304]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b48      	ldr	r3, [pc, #288]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a47      	ldr	r2, [pc, #284]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a78:	f043 0308 	orr.w	r3, r3, #8
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b45      	ldr	r3, [pc, #276]	; (8000b94 <MX_GPIO_Init+0x1c8>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	4842      	ldr	r0, [pc, #264]	; (8000b98 <MX_GPIO_Init+0x1cc>)
 8000a90:	f001 fedc 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2101      	movs	r1, #1
 8000a98:	4840      	ldr	r0, [pc, #256]	; (8000b9c <MX_GPIO_Init+0x1d0>)
 8000a9a:	f001 fed7 	bl	800284c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000aa4:	483e      	ldr	r0, [pc, #248]	; (8000ba0 <MX_GPIO_Init+0x1d4>)
 8000aa6:	f001 fed1 	bl	800284c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000aaa:	2308      	movs	r3, #8
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4835      	ldr	r0, [pc, #212]	; (8000b98 <MX_GPIO_Init+0x1cc>)
 8000ac2:	f001 fd0f 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	482f      	ldr	r0, [pc, #188]	; (8000b9c <MX_GPIO_Init+0x1d0>)
 8000ade:	f001 fd01 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ae2:	2308      	movs	r3, #8
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af2:	2305      	movs	r3, #5
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4827      	ldr	r0, [pc, #156]	; (8000b9c <MX_GPIO_Init+0x1d0>)
 8000afe:	f001 fcf1 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b02:	2304      	movs	r3, #4
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4823      	ldr	r0, [pc, #140]	; (8000ba4 <MX_GPIO_Init+0x1d8>)
 8000b16:	f001 fce5 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b2c:	2305      	movs	r3, #5
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <MX_GPIO_Init+0x1d8>)
 8000b38:	f001 fcd4 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b3c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b40:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4812      	ldr	r0, [pc, #72]	; (8000ba0 <MX_GPIO_Init+0x1d4>)
 8000b56:	f001 fcc5 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b5a:	2320      	movs	r3, #32
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <MX_GPIO_Init+0x1d4>)
 8000b6e:	f001 fcb9 	bl	80024e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_GPIO_Init+0x1dc>)
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_GPIO_Init+0x1cc>)
 8000b86:	f001 fcad 	bl	80024e4 <HAL_GPIO_Init>

}
 8000b8a:	bf00      	nop
 8000b8c:	3730      	adds	r7, #48	; 0x30
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40020800 	.word	0x40020800
 8000ba0:	40020c00 	.word	0x40020c00
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	10120000 	.word	0x10120000

08000bac <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	if (hadc==&hadc1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	; (8000c28 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d126      	bne.n	8000c0a <HAL_ADC_ConvCpltCallback+0x5e>
	{
HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc0:	481a      	ldr	r0, [pc, #104]	; (8000c2c <HAL_ADC_ConvCpltCallback+0x80>)
 8000bc2:	f001 fe5c 	bl	800287e <HAL_GPIO_TogglePin>
htim3.Instance->CCR1 =((adc_buf[0]*50)/4096)+50 ;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <HAL_ADC_ConvCpltCallback+0x84>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	2332      	movs	r3, #50	; 0x32
 8000bce:	fb03 f302 	mul.w	r3, r3, r2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	da01      	bge.n	8000bda <HAL_ADC_ConvCpltCallback+0x2e>
 8000bd6:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000bda:	131b      	asrs	r3, r3, #12
 8000bdc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <HAL_ADC_ConvCpltCallback+0x88>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34
voltage = HAL_ADC_GetValue(&hadc1) / (float)RES_12B * V_REF;
 8000be6:	4810      	ldr	r0, [pc, #64]	; (8000c28 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000be8:	f000 fd42 	bl	8001670 <HAL_ADC_GetValue>
 8000bec:	ee07 0a90 	vmov	s15, r0
 8000bf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bf4:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000c38 <HAL_ADC_ConvCpltCallback+0x8c>
 8000bf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bfc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000c3c <HAL_ADC_ConvCpltCallback+0x90>
 8000c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_ADC_ConvCpltCallback+0x94>)
 8000c06:	edc3 7a00 	vstr	s15, [r3]
	}
	if (hadc==&hadc2)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <HAL_ADC_ConvCpltCallback+0x98>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d106      	bne.n	8000c20 <HAL_ADC_ConvCpltCallback+0x74>
	{
    pc6out=HAL_ADC_GetValue(&hadc2);
 8000c12:	480c      	ldr	r0, [pc, #48]	; (8000c44 <HAL_ADC_ConvCpltCallback+0x98>)
 8000c14:	f000 fd2c 	bl	8001670 <HAL_ADC_GetValue>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000c1e:	601a      	str	r2, [r3, #0]
	}
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200001a4 	.word	0x200001a4
 8000c2c:	40020c00 	.word	0x40020c00
 8000c30:	200022ac 	.word	0x200022ac
 8000c34:	2000015c 	.word	0x2000015c
 8000c38:	45800000 	.word	0x45800000
 8000c3c:	40533333 	.word	0x40533333
 8000c40:	200000ac 	.word	0x200000ac
 8000c44:	200000c0 	.word	0x200000c0
 8000c48:	20002250 	.word	0x20002250

08000c4c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
 void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000c54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000c5a:	f001 fe10 	bl	800287e <HAL_GPIO_TogglePin>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40020c00 	.word	0x40020c00

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <Error_Handler+0x8>
	...

08000c78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cb6:	2007      	movs	r0, #7
 8000cb8:	f001 f862 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	; 0x30
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a5e      	ldr	r2, [pc, #376]	; (8000e60 <HAL_ADC_MspInit+0x198>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d158      	bne.n	8000d9c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	4b5d      	ldr	r3, [pc, #372]	; (8000e64 <HAL_ADC_MspInit+0x19c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a5c      	ldr	r2, [pc, #368]	; (8000e64 <HAL_ADC_MspInit+0x19c>)
 8000cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b5a      	ldr	r3, [pc, #360]	; (8000e64 <HAL_ADC_MspInit+0x19c>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	4b56      	ldr	r3, [pc, #344]	; (8000e64 <HAL_ADC_MspInit+0x19c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a55      	ldr	r2, [pc, #340]	; (8000e64 <HAL_ADC_MspInit+0x19c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b53      	ldr	r3, [pc, #332]	; (8000e64 <HAL_ADC_MspInit+0x19c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d22:	2301      	movs	r3, #1
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d26:	2303      	movs	r3, #3
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	484c      	ldr	r0, [pc, #304]	; (8000e68 <HAL_ADC_MspInit+0x1a0>)
 8000d36:	f001 fbd5 	bl	80024e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d3a:	4b4c      	ldr	r3, [pc, #304]	; (8000e6c <HAL_ADC_MspInit+0x1a4>)
 8000d3c:	4a4c      	ldr	r2, [pc, #304]	; (8000e70 <HAL_ADC_MspInit+0x1a8>)
 8000d3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d40:	4b4a      	ldr	r3, [pc, #296]	; (8000e6c <HAL_ADC_MspInit+0x1a4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d46:	4b49      	ldr	r3, [pc, #292]	; (8000e6c <HAL_ADC_MspInit+0x1a4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4c:	4b47      	ldr	r3, [pc, #284]	; (8000e6c <HAL_ADC_MspInit+0x1a4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d52:	4b46      	ldr	r3, [pc, #280]	; (8000e6c <HAL_ADC_MspInit+0x1a4>)
 8000d54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d5a:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <HAL_ADC_MspInit+0x1a4>)
 8000d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d62:	4b42      	ldr	r3, [pc, #264]	; (8000e6c <HAL_ADC_MspInit+0x1a4>)
 8000d64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d6a:	4b40      	ldr	r3, [pc, #256]	; (8000e6c <HAL_ADC_MspInit+0x1a4>)
 8000d6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d70:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d72:	4b3e      	ldr	r3, [pc, #248]	; (8000e6c <HAL_ADC_MspInit+0x1a4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d78:	4b3c      	ldr	r3, [pc, #240]	; (8000e6c <HAL_ADC_MspInit+0x1a4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d7e:	483b      	ldr	r0, [pc, #236]	; (8000e6c <HAL_ADC_MspInit+0x1a4>)
 8000d80:	f001 f840 	bl	8001e04 <HAL_DMA_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000d8a:	f7ff ff6f 	bl	8000c6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a36      	ldr	r2, [pc, #216]	; (8000e6c <HAL_ADC_MspInit+0x1a4>)
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
 8000d94:	4a35      	ldr	r2, [pc, #212]	; (8000e6c <HAL_ADC_MspInit+0x1a4>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d9a:	e05c      	b.n	8000e56 <HAL_ADC_MspInit+0x18e>
  else if(hadc->Instance==ADC2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a34      	ldr	r2, [pc, #208]	; (8000e74 <HAL_ADC_MspInit+0x1ac>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d157      	bne.n	8000e56 <HAL_ADC_MspInit+0x18e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <HAL_ADC_MspInit+0x19c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a2d      	ldr	r2, [pc, #180]	; (8000e64 <HAL_ADC_MspInit+0x19c>)
 8000db0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <HAL_ADC_MspInit+0x19c>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <HAL_ADC_MspInit+0x19c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a26      	ldr	r2, [pc, #152]	; (8000e64 <HAL_ADC_MspInit+0x19c>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <HAL_ADC_MspInit+0x19c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000dde:	2305      	movs	r3, #5
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de2:	2303      	movs	r3, #3
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	481d      	ldr	r0, [pc, #116]	; (8000e68 <HAL_ADC_MspInit+0x1a0>)
 8000df2:	f001 fb77 	bl	80024e4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <HAL_ADC_MspInit+0x1b0>)
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <HAL_ADC_MspInit+0x1b4>)
 8000dfa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	; (8000e78 <HAL_ADC_MspInit+0x1b0>)
 8000dfe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e02:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e04:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <HAL_ADC_MspInit+0x1b0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <HAL_ADC_MspInit+0x1b0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <HAL_ADC_MspInit+0x1b0>)
 8000e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e16:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_ADC_MspInit+0x1b0>)
 8000e1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e1e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_ADC_MspInit+0x1b0>)
 8000e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e26:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_ADC_MspInit+0x1b0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_ADC_MspInit+0x1b0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HAL_ADC_MspInit+0x1b0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000e3a:	480f      	ldr	r0, [pc, #60]	; (8000e78 <HAL_ADC_MspInit+0x1b0>)
 8000e3c:	f000 ffe2 	bl	8001e04 <HAL_DMA_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_ADC_MspInit+0x182>
      Error_Handler();
 8000e46:	f7ff ff11 	bl	8000c6c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_ADC_MspInit+0x1b0>)
 8000e4e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e50:	4a09      	ldr	r2, [pc, #36]	; (8000e78 <HAL_ADC_MspInit+0x1b0>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e56:	bf00      	nop
 8000e58:	3730      	adds	r7, #48	; 0x30
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40012000 	.word	0x40012000
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	200001f0 	.word	0x200001f0
 8000e70:	40026410 	.word	0x40026410
 8000e74:	40012100 	.word	0x40012100
 8000e78:	200042ac 	.word	0x200042ac
 8000e7c:	40026440 	.word	0x40026440

08000e80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <HAL_I2C_MspInit+0x84>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d12c      	bne.n	8000efc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_I2C_MspInit+0x88>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <HAL_I2C_MspInit+0x88>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_I2C_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ebe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec4:	2312      	movs	r3, #18
 8000ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480c      	ldr	r0, [pc, #48]	; (8000f0c <HAL_I2C_MspInit+0x8c>)
 8000edc:	f001 fb02 	bl	80024e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_I2C_MspInit+0x88>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_I2C_MspInit+0x88>)
 8000eea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_I2C_MspInit+0x88>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40005400 	.word	0x40005400
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020400 	.word	0x40020400

08000f10 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a28      	ldr	r2, [pc, #160]	; (8000fd0 <HAL_I2S_MspInit+0xc0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d14a      	bne.n	8000fc8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <HAL_I2S_MspInit+0xc4>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <HAL_I2S_MspInit+0xc4>)
 8000f3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <HAL_I2S_MspInit+0xc4>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <HAL_I2S_MspInit+0xc4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <HAL_I2S_MspInit+0xc4>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <HAL_I2S_MspInit+0xc4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_I2S_MspInit+0xc4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_I2S_MspInit+0xc4>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_I2S_MspInit+0xc4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f86:	2310      	movs	r3, #16
 8000f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f96:	2306      	movs	r3, #6
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <HAL_I2S_MspInit+0xc8>)
 8000fa2:	f001 fa9f 	bl	80024e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000fa6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fb8:	2306      	movs	r3, #6
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <HAL_I2S_MspInit+0xcc>)
 8000fc4:	f001 fa8e 	bl	80024e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	3728      	adds	r7, #40	; 0x28
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40003c00 	.word	0x40003c00
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020800 	.word	0x40020800

08000fe0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	; (8001064 <HAL_SPI_MspInit+0x84>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d12b      	bne.n	800105a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_SPI_MspInit+0x88>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a17      	ldr	r2, [pc, #92]	; (8001068 <HAL_SPI_MspInit+0x88>)
 800100c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_SPI_MspInit+0x88>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_SPI_MspInit+0x88>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a10      	ldr	r2, [pc, #64]	; (8001068 <HAL_SPI_MspInit+0x88>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_SPI_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800103a:	23e0      	movs	r3, #224	; 0xe0
 800103c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800104a:	2305      	movs	r3, #5
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_SPI_MspInit+0x8c>)
 8001056:	f001 fa45 	bl	80024e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800105a:	bf00      	nop
 800105c:	3728      	adds	r7, #40	; 0x28
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40013000 	.word	0x40013000
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000

08001070 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <HAL_TIM_PWM_MspInit+0x3c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d10d      	bne.n	800109e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_TIM_PWM_MspInit+0x40>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <HAL_TIM_PWM_MspInit+0x40>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_TIM_PWM_MspInit+0x40>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40000400 	.word	0x40000400
 80010b0:	40023800 	.word	0x40023800

080010b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a12      	ldr	r2, [pc, #72]	; (800111c <HAL_TIM_MspPostInit+0x68>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d11d      	bne.n	8001112 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_TIM_MspPostInit+0x6c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a10      	ldr	r2, [pc, #64]	; (8001120 <HAL_TIM_MspPostInit+0x6c>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b0e      	ldr	r3, [pc, #56]	; (8001120 <HAL_TIM_MspPostInit+0x6c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010f2:	2340      	movs	r3, #64	; 0x40
 80010f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001102:	2302      	movs	r3, #2
 8001104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <HAL_TIM_MspPostInit+0x70>)
 800110e:	f001 f9e9 	bl	80024e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40000400 	.word	0x40000400
 8001120:	40023800 	.word	0x40023800
 8001124:	40020800 	.word	0x40020800

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800112c:	e7fe      	b.n	800112c <NMI_Handler+0x4>

0800112e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <MemManage_Handler+0x4>

0800113a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <UsageFault_Handler+0x4>

08001146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001174:	f000 f8e4 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <DMA2_Stream0_IRQHandler+0x10>)
 8001182:	f000 ff45 	bl	8002010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200001f0 	.word	0x200001f0

08001190 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <DMA2_Stream2_IRQHandler+0x10>)
 8001196:	f000 ff3b 	bl	8002010 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200042ac 	.word	0x200042ac

080011a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <OTG_FS_IRQHandler+0x10>)
 80011aa:	f001 fded 	bl	8002d88 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20004734 	.word	0x20004734

080011b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c0:	4a14      	ldr	r2, [pc, #80]	; (8001214 <_sbrk+0x5c>)
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <_sbrk+0x60>)
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <_sbrk+0x64>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <_sbrk+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d207      	bcs.n	80011f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e8:	f008 fb04 	bl	80097f4 <__errno>
 80011ec:	4603      	mov	r3, r0
 80011ee:	220c      	movs	r2, #12
 80011f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	e009      	b.n	800120c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <_sbrk+0x64>)
 8001208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20020000 	.word	0x20020000
 8001218:	00000400 	.word	0x00000400
 800121c:	200000b0 	.word	0x200000b0
 8001220:	20004a48 	.word	0x20004a48

08001224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800124e:	490e      	ldr	r1, [pc, #56]	; (8001288 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001250:	4a0e      	ldr	r2, [pc, #56]	; (800128c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001254:	e002      	b.n	800125c <LoopCopyDataInit>

08001256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125a:	3304      	adds	r3, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800125c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001260:	d3f9      	bcc.n	8001256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001264:	4c0b      	ldr	r4, [pc, #44]	; (8001294 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001268:	e001      	b.n	800126e <LoopFillZerobss>

0800126a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800126c:	3204      	adds	r2, #4

0800126e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001270:	d3fb      	bcc.n	800126a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001272:	f7ff ffd7 	bl	8001224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001276:	f008 fac3 	bl	8009800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127a:	f7ff f921 	bl	80004c0 <main>
  bx  lr    
 800127e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800128c:	08009a54 	.word	0x08009a54
  ldr r2, =_sbss
 8001290:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001294:	20004a48 	.word	0x20004a48

08001298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC_IRQHandler>
	...

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <HAL_Init+0x40>)
 80012a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_Init+0x40>)
 80012b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <HAL_Init+0x40>)
 80012be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 fd5b 	bl	8001d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f808 	bl	80012e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff fcd2 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023c00 	.word	0x40023c00

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x54>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_InitTick+0x58>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fd73 	bl	8001dea <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00e      	b.n	800132c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d80a      	bhi.n	800132a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f000 fd3b 	bl	8001d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4a06      	ldr	r2, [pc, #24]	; (800133c <HAL_InitTick+0x5c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000008 	.word	0x20000008
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008
 8001364:	20004358 	.word	0x20004358

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20004358 	.word	0x20004358

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffde 	bl	8001368 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008

080013c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e033      	b.n	8001446 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d109      	bne.n	80013fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fc6e 	bl	8000cc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	2b00      	cmp	r3, #0
 8001404:	d118      	bne.n	8001438 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800140e:	f023 0302 	bic.w	r3, r3, #2
 8001412:	f043 0202 	orr.w	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 fa62 	bl	80018e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f023 0303 	bic.w	r3, r3, #3
 800142e:	f043 0201 	orr.w	r2, r3, #1
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	641a      	str	r2, [r3, #64]	; 0x40
 8001436:	e001      	b.n	800143c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001466:	2b01      	cmp	r3, #1
 8001468:	d101      	bne.n	800146e <HAL_ADC_Start_DMA+0x1e>
 800146a:	2302      	movs	r3, #2
 800146c:	e0e9      	b.n	8001642 <HAL_ADC_Start_DMA+0x1f2>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b01      	cmp	r3, #1
 8001482:	d018      	beq.n	80014b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0201 	orr.w	r2, r2, #1
 8001492:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001494:	4b6d      	ldr	r3, [pc, #436]	; (800164c <HAL_ADC_Start_DMA+0x1fc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a6d      	ldr	r2, [pc, #436]	; (8001650 <HAL_ADC_Start_DMA+0x200>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0c9a      	lsrs	r2, r3, #18
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80014a8:	e002      	b.n	80014b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f9      	bne.n	80014aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c4:	d107      	bne.n	80014d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	f040 80a1 	bne.w	8001628 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001504:	2b00      	cmp	r3, #0
 8001506:	d007      	beq.n	8001518 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001510:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001524:	d106      	bne.n	8001534 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f023 0206 	bic.w	r2, r3, #6
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	645a      	str	r2, [r3, #68]	; 0x44
 8001532:	e002      	b.n	800153a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b44      	ldr	r3, [pc, #272]	; (8001654 <HAL_ADC_Start_DMA+0x204>)
 8001544:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154a:	4a43      	ldr	r2, [pc, #268]	; (8001658 <HAL_ADC_Start_DMA+0x208>)
 800154c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001552:	4a42      	ldr	r2, [pc, #264]	; (800165c <HAL_ADC_Start_DMA+0x20c>)
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155a:	4a41      	ldr	r2, [pc, #260]	; (8001660 <HAL_ADC_Start_DMA+0x210>)
 800155c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001566:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001576:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001586:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	334c      	adds	r3, #76	; 0x4c
 8001592:	4619      	mov	r1, r3
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f000 fce2 	bl	8001f60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d12a      	bne.n	80015fe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a2d      	ldr	r2, [pc, #180]	; (8001664 <HAL_ADC_Start_DMA+0x214>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d015      	beq.n	80015de <HAL_ADC_Start_DMA+0x18e>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a2c      	ldr	r2, [pc, #176]	; (8001668 <HAL_ADC_Start_DMA+0x218>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d105      	bne.n	80015c8 <HAL_ADC_Start_DMA+0x178>
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <HAL_ADC_Start_DMA+0x204>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f003 031f 	and.w	r3, r3, #31
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00a      	beq.n	80015de <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <HAL_ADC_Start_DMA+0x21c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d136      	bne.n	8001640 <HAL_ADC_Start_DMA+0x1f0>
 80015d2:	4b20      	ldr	r3, [pc, #128]	; (8001654 <HAL_ADC_Start_DMA+0x204>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d130      	bne.n	8001640 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d129      	bne.n	8001640 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	e020      	b.n	8001640 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a18      	ldr	r2, [pc, #96]	; (8001664 <HAL_ADC_Start_DMA+0x214>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d11b      	bne.n	8001640 <HAL_ADC_Start_DMA+0x1f0>
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d114      	bne.n	8001640 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	e00b      	b.n	8001640 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f043 0210 	orr.w	r2, r3, #16
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001638:	f043 0201 	orr.w	r2, r3, #1
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000000 	.word	0x20000000
 8001650:	431bde83 	.word	0x431bde83
 8001654:	40012300 	.word	0x40012300
 8001658:	08001add 	.word	0x08001add
 800165c:	08001b97 	.word	0x08001b97
 8001660:	08001bb3 	.word	0x08001bb3
 8001664:	40012000 	.word	0x40012000
 8001668:	40012100 	.word	0x40012100
 800166c:	40012200 	.word	0x40012200

08001670 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d101      	bne.n	80016bc <HAL_ADC_ConfigChannel+0x1c>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e105      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x228>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b09      	cmp	r3, #9
 80016ca:	d925      	bls.n	8001718 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68d9      	ldr	r1, [r3, #12]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	3b1e      	subs	r3, #30
 80016e2:	2207      	movs	r2, #7
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43da      	mvns	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	400a      	ands	r2, r1
 80016f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68d9      	ldr	r1, [r3, #12]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	b29b      	uxth	r3, r3
 8001702:	4618      	mov	r0, r3
 8001704:	4603      	mov	r3, r0
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4403      	add	r3, r0
 800170a:	3b1e      	subs	r3, #30
 800170c:	409a      	lsls	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	e022      	b.n	800175e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6919      	ldr	r1, [r3, #16]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	b29b      	uxth	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	2207      	movs	r2, #7
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	400a      	ands	r2, r1
 800173a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6919      	ldr	r1, [r3, #16]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	4618      	mov	r0, r3
 800174e:	4603      	mov	r3, r0
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4403      	add	r3, r0
 8001754:	409a      	lsls	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b06      	cmp	r3, #6
 8001764:	d824      	bhi.n	80017b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	3b05      	subs	r3, #5
 8001778:	221f      	movs	r2, #31
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	400a      	ands	r2, r1
 8001786:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	b29b      	uxth	r3, r3
 8001794:	4618      	mov	r0, r3
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	3b05      	subs	r3, #5
 80017a2:	fa00 f203 	lsl.w	r2, r0, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	635a      	str	r2, [r3, #52]	; 0x34
 80017ae:	e04c      	b.n	800184a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b0c      	cmp	r3, #12
 80017b6:	d824      	bhi.n	8001802 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	3b23      	subs	r3, #35	; 0x23
 80017ca:	221f      	movs	r2, #31
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43da      	mvns	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	400a      	ands	r2, r1
 80017d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	3b23      	subs	r3, #35	; 0x23
 80017f4:	fa00 f203 	lsl.w	r2, r0, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
 8001800:	e023      	b.n	800184a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	3b41      	subs	r3, #65	; 0x41
 8001814:	221f      	movs	r2, #31
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	400a      	ands	r2, r1
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	4618      	mov	r0, r3
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	3b41      	subs	r3, #65	; 0x41
 800183e:	fa00 f203 	lsl.w	r2, r0, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <HAL_ADC_ConfigChannel+0x234>)
 800184c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <HAL_ADC_ConfigChannel+0x238>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d109      	bne.n	800186c <HAL_ADC_ConfigChannel+0x1cc>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b12      	cmp	r3, #18
 800185e:	d105      	bne.n	800186c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <HAL_ADC_ConfigChannel+0x238>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d123      	bne.n	80018be <HAL_ADC_ConfigChannel+0x21e>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b10      	cmp	r3, #16
 800187c:	d003      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x1e6>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b11      	cmp	r3, #17
 8001884:	d11b      	bne.n	80018be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b10      	cmp	r3, #16
 8001898:	d111      	bne.n	80018be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800189a:	4b10      	ldr	r3, [pc, #64]	; (80018dc <HAL_ADC_ConfigChannel+0x23c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_ADC_ConfigChannel+0x240>)
 80018a0:	fba2 2303 	umull	r2, r3, r2, r3
 80018a4:	0c9a      	lsrs	r2, r3, #18
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018b0:	e002      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f9      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40012300 	.word	0x40012300
 80018d8:	40012000 	.word	0x40012000
 80018dc:	20000000 	.word	0x20000000
 80018e0:	431bde83 	.word	0x431bde83

080018e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018ec:	4b79      	ldr	r3, [pc, #484]	; (8001ad4 <ADC_Init+0x1f0>)
 80018ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	431a      	orrs	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6859      	ldr	r1, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	021a      	lsls	r2, r3, #8
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800193c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6899      	ldr	r1, [r3, #8]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68da      	ldr	r2, [r3, #12]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	4a58      	ldr	r2, [pc, #352]	; (8001ad8 <ADC_Init+0x1f4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d022      	beq.n	80019c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800198a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6899      	ldr	r1, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6899      	ldr	r1, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	e00f      	b.n	80019e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0202 	bic.w	r2, r2, #2
 80019f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6899      	ldr	r1, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7e1b      	ldrb	r3, [r3, #24]
 80019fc:	005a      	lsls	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01b      	beq.n	8001a48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6859      	ldr	r1, [r3, #4]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	035a      	lsls	r2, r3, #13
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	e007      	b.n	8001a58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	051a      	lsls	r2, r3, #20
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6899      	ldr	r1, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a9a:	025a      	lsls	r2, r3, #9
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6899      	ldr	r1, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	029a      	lsls	r2, r3, #10
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	609a      	str	r2, [r3, #8]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	40012300 	.word	0x40012300
 8001ad8:	0f000001 	.word	0x0f000001

08001adc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d13c      	bne.n	8001b70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d12b      	bne.n	8001b68 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d127      	bne.n	8001b68 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d119      	bne.n	8001b68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0220 	bic.w	r2, r2, #32
 8001b42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d105      	bne.n	8001b68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f043 0201 	orr.w	r2, r3, #1
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f7ff f81f 	bl	8000bac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b6e:	e00e      	b.n	8001b8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f003 0310 	and.w	r3, r3, #16
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f7ff fd84 	bl	800168a <HAL_ADC_ErrorCallback>
}
 8001b82:	e004      	b.n	8001b8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	4798      	blx	r3
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7ff f851 	bl	8000c4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2240      	movs	r2, #64	; 0x40
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f043 0204 	orr.w	r2, r3, #4
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7ff fd59 	bl	800168a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bd8:	bf00      	nop
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c12:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	60d3      	str	r3, [r2, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <__NVIC_GetPriorityGrouping+0x18>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	f003 0307 	and.w	r3, r3, #7
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	db0b      	blt.n	8001c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	f003 021f 	and.w	r2, r3, #31
 8001c5c:	4907      	ldr	r1, [pc, #28]	; (8001c7c <__NVIC_EnableIRQ+0x38>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	095b      	lsrs	r3, r3, #5
 8001c64:	2001      	movs	r0, #1
 8001c66:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000e100 	.word	0xe000e100

08001c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	6039      	str	r1, [r7, #0]
 8001c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	db0a      	blt.n	8001caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	490c      	ldr	r1, [pc, #48]	; (8001ccc <__NVIC_SetPriority+0x4c>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	0112      	lsls	r2, r2, #4
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca8:	e00a      	b.n	8001cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4908      	ldr	r1, [pc, #32]	; (8001cd0 <__NVIC_SetPriority+0x50>)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	3b04      	subs	r3, #4
 8001cb8:	0112      	lsls	r2, r2, #4
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	761a      	strb	r2, [r3, #24]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000e100 	.word	0xe000e100
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f1c3 0307 	rsb	r3, r3, #7
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	bf28      	it	cs
 8001cf2:	2304      	movcs	r3, #4
 8001cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d902      	bls.n	8001d04 <NVIC_EncodePriority+0x30>
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3b03      	subs	r3, #3
 8001d02:	e000      	b.n	8001d06 <NVIC_EncodePriority+0x32>
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43da      	mvns	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	401a      	ands	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	43d9      	mvns	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	4313      	orrs	r3, r2
         );
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d4c:	d301      	bcc.n	8001d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00f      	b.n	8001d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <SysTick_Config+0x40>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f7ff ff8e 	bl	8001c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d64:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <SysTick_Config+0x40>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <SysTick_Config+0x40>)
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	e000e010 	.word	0xe000e010

08001d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff29 	bl	8001be0 <__NVIC_SetPriorityGrouping>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001da8:	f7ff ff3e 	bl	8001c28 <__NVIC_GetPriorityGrouping>
 8001dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68b9      	ldr	r1, [r7, #8]
 8001db2:	6978      	ldr	r0, [r7, #20]
 8001db4:	f7ff ff8e 	bl	8001cd4 <NVIC_EncodePriority>
 8001db8:	4602      	mov	r2, r0
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff5d 	bl	8001c80 <__NVIC_SetPriority>
}
 8001dc6:	bf00      	nop
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff31 	bl	8001c44 <__NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff ffa2 	bl	8001d3c <SysTick_Config>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e10:	f7ff faaa 	bl	8001368 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e099      	b.n	8001f54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e40:	e00f      	b.n	8001e62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e42:	f7ff fa91 	bl	8001368 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d908      	bls.n	8001e62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2203      	movs	r2, #3
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e078      	b.n	8001f54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1e8      	bne.n	8001e42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <HAL_DMA_Init+0x158>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d107      	bne.n	8001ecc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f023 0307 	bic.w	r3, r3, #7
 8001ee2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d117      	bne.n	8001f26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00e      	beq.n	8001f26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fa6f 	bl	80023ec <DMA_CheckFifoParam>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2240      	movs	r2, #64	; 0x40
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f22:	2301      	movs	r3, #1
 8001f24:	e016      	b.n	8001f54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fa26 	bl	8002380 <DMA_CalcBaseAndBitshift>
 8001f34:	4603      	mov	r3, r0
 8001f36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	223f      	movs	r2, #63	; 0x3f
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	f010803f 	.word	0xf010803f

08001f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_DMA_Start_IT+0x26>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e040      	b.n	8002008 <HAL_DMA_Start_IT+0xa8>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d12f      	bne.n	8001ffa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f9b8 	bl	8002324 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	223f      	movs	r2, #63	; 0x3f
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0216 	orr.w	r2, r2, #22
 8001fce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d007      	beq.n	8001fe8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0208 	orr.w	r2, r2, #8
 8001fe6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e005      	b.n	8002006 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002002:	2302      	movs	r3, #2
 8002004:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002006:	7dfb      	ldrb	r3, [r7, #23]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800201c:	4b92      	ldr	r3, [pc, #584]	; (8002268 <HAL_DMA_IRQHandler+0x258>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a92      	ldr	r2, [pc, #584]	; (800226c <HAL_DMA_IRQHandler+0x25c>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0a9b      	lsrs	r3, r3, #10
 8002028:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2208      	movs	r2, #8
 800203c:	409a      	lsls	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4013      	ands	r3, r2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01a      	beq.n	800207c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0204 	bic.w	r2, r2, #4
 8002062:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	2208      	movs	r2, #8
 800206a:	409a      	lsls	r2, r3
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002080:	2201      	movs	r2, #1
 8002082:	409a      	lsls	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d012      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209e:	2201      	movs	r2, #1
 80020a0:	409a      	lsls	r2, r3
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020aa:	f043 0202 	orr.w	r2, r3, #2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	2204      	movs	r2, #4
 80020b8:	409a      	lsls	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d012      	beq.n	80020e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00b      	beq.n	80020e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d4:	2204      	movs	r2, #4
 80020d6:	409a      	lsls	r2, r3
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e0:	f043 0204 	orr.w	r2, r3, #4
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ec:	2210      	movs	r2, #16
 80020ee:	409a      	lsls	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d043      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d03c      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	2210      	movs	r2, #16
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d018      	beq.n	8002152 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d108      	bne.n	8002140 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d024      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4798      	blx	r3
 800213e:	e01f      	b.n	8002180 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01b      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	4798      	blx	r3
 8002150:	e016      	b.n	8002180 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d107      	bne.n	8002170 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0208 	bic.w	r2, r2, #8
 800216e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002184:	2220      	movs	r2, #32
 8002186:	409a      	lsls	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4013      	ands	r3, r2
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 808e 	beq.w	80022ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8086 	beq.w	80022ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a6:	2220      	movs	r2, #32
 80021a8:	409a      	lsls	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d136      	bne.n	8002228 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0216 	bic.w	r2, r2, #22
 80021c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d103      	bne.n	80021ea <HAL_DMA_IRQHandler+0x1da>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0208 	bic.w	r2, r2, #8
 80021f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fe:	223f      	movs	r2, #63	; 0x3f
 8002200:	409a      	lsls	r2, r3
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800221a:	2b00      	cmp	r3, #0
 800221c:	d07d      	beq.n	800231a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	4798      	blx	r3
        }
        return;
 8002226:	e078      	b.n	800231a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d01c      	beq.n	8002270 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d108      	bne.n	8002256 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	2b00      	cmp	r3, #0
 800224a:	d030      	beq.n	80022ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	4798      	blx	r3
 8002254:	e02b      	b.n	80022ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d027      	beq.n	80022ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
 8002266:	e022      	b.n	80022ae <HAL_DMA_IRQHandler+0x29e>
 8002268:	20000000 	.word	0x20000000
 800226c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10f      	bne.n	800229e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0210 	bic.w	r2, r2, #16
 800228c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d032      	beq.n	800231c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d022      	beq.n	8002308 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2205      	movs	r2, #5
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0201 	bic.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	3301      	adds	r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d307      	bcc.n	80022f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f2      	bne.n	80022da <HAL_DMA_IRQHandler+0x2ca>
 80022f4:	e000      	b.n	80022f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80022f6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	4798      	blx	r3
 8002318:	e000      	b.n	800231c <HAL_DMA_IRQHandler+0x30c>
        return;
 800231a:	bf00      	nop
    }
  }
}
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop

08002324 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002340:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b40      	cmp	r3, #64	; 0x40
 8002350:	d108      	bne.n	8002364 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002362:	e007      	b.n	8002374 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	60da      	str	r2, [r3, #12]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	3b10      	subs	r3, #16
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800239a:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <DMA_CalcBaseAndBitshift+0x68>)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b03      	cmp	r3, #3
 80023ac:	d909      	bls.n	80023c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023b6:	f023 0303 	bic.w	r3, r3, #3
 80023ba:	1d1a      	adds	r2, r3, #4
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	659a      	str	r2, [r3, #88]	; 0x58
 80023c0:	e007      	b.n	80023d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ca:	f023 0303 	bic.w	r3, r3, #3
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	aaaaaaab 	.word	0xaaaaaaab
 80023e8:	08009a3c 	.word	0x08009a3c

080023ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d11f      	bne.n	8002446 <DMA_CheckFifoParam+0x5a>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d856      	bhi.n	80024ba <DMA_CheckFifoParam+0xce>
 800240c:	a201      	add	r2, pc, #4	; (adr r2, 8002414 <DMA_CheckFifoParam+0x28>)
 800240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002412:	bf00      	nop
 8002414:	08002425 	.word	0x08002425
 8002418:	08002437 	.word	0x08002437
 800241c:	08002425 	.word	0x08002425
 8002420:	080024bb 	.word	0x080024bb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d046      	beq.n	80024be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002434:	e043      	b.n	80024be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800243e:	d140      	bne.n	80024c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002444:	e03d      	b.n	80024c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800244e:	d121      	bne.n	8002494 <DMA_CheckFifoParam+0xa8>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d837      	bhi.n	80024c6 <DMA_CheckFifoParam+0xda>
 8002456:	a201      	add	r2, pc, #4	; (adr r2, 800245c <DMA_CheckFifoParam+0x70>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	0800246d 	.word	0x0800246d
 8002460:	08002473 	.word	0x08002473
 8002464:	0800246d 	.word	0x0800246d
 8002468:	08002485 	.word	0x08002485
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      break;
 8002470:	e030      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d025      	beq.n	80024ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002482:	e022      	b.n	80024ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800248c:	d11f      	bne.n	80024ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002492:	e01c      	b.n	80024ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d903      	bls.n	80024a2 <DMA_CheckFifoParam+0xb6>
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d003      	beq.n	80024a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024a0:	e018      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	73fb      	strb	r3, [r7, #15]
      break;
 80024a6:	e015      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00e      	beq.n	80024d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e00b      	b.n	80024d2 <DMA_CheckFifoParam+0xe6>
      break;
 80024ba:	bf00      	nop
 80024bc:	e00a      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024be:	bf00      	nop
 80024c0:	e008      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024c2:	bf00      	nop
 80024c4:	e006      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024c6:	bf00      	nop
 80024c8:	e004      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024ca:	bf00      	nop
 80024cc:	e002      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80024ce:	bf00      	nop
 80024d0:	e000      	b.n	80024d4 <DMA_CheckFifoParam+0xe8>
      break;
 80024d2:	bf00      	nop
    }
  } 
  
  return status; 
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop

080024e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	e16b      	b.n	80027d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002500:	2201      	movs	r2, #1
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	429a      	cmp	r2, r3
 800251a:	f040 815a 	bne.w	80027d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d005      	beq.n	8002536 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002532:	2b02      	cmp	r3, #2
 8002534:	d130      	bne.n	8002598 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800256c:	2201      	movs	r2, #1
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 0201 	and.w	r2, r3, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d017      	beq.n	80025d4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d123      	bne.n	8002628 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	08da      	lsrs	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3208      	adds	r2, #8
 80025e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	220f      	movs	r2, #15
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	08da      	lsrs	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3208      	adds	r2, #8
 8002622:	69b9      	ldr	r1, [r7, #24]
 8002624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	2203      	movs	r2, #3
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0203 	and.w	r2, r3, #3
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 80b4 	beq.w	80027d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b60      	ldr	r3, [pc, #384]	; (80027f0 <HAL_GPIO_Init+0x30c>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	4a5f      	ldr	r2, [pc, #380]	; (80027f0 <HAL_GPIO_Init+0x30c>)
 8002674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002678:	6453      	str	r3, [r2, #68]	; 0x44
 800267a:	4b5d      	ldr	r3, [pc, #372]	; (80027f0 <HAL_GPIO_Init+0x30c>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002686:	4a5b      	ldr	r2, [pc, #364]	; (80027f4 <HAL_GPIO_Init+0x310>)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	3302      	adds	r3, #2
 800268e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	220f      	movs	r2, #15
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a52      	ldr	r2, [pc, #328]	; (80027f8 <HAL_GPIO_Init+0x314>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d02b      	beq.n	800270a <HAL_GPIO_Init+0x226>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a51      	ldr	r2, [pc, #324]	; (80027fc <HAL_GPIO_Init+0x318>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d025      	beq.n	8002706 <HAL_GPIO_Init+0x222>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a50      	ldr	r2, [pc, #320]	; (8002800 <HAL_GPIO_Init+0x31c>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d01f      	beq.n	8002702 <HAL_GPIO_Init+0x21e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4f      	ldr	r2, [pc, #316]	; (8002804 <HAL_GPIO_Init+0x320>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d019      	beq.n	80026fe <HAL_GPIO_Init+0x21a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4e      	ldr	r2, [pc, #312]	; (8002808 <HAL_GPIO_Init+0x324>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d013      	beq.n	80026fa <HAL_GPIO_Init+0x216>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4d      	ldr	r2, [pc, #308]	; (800280c <HAL_GPIO_Init+0x328>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00d      	beq.n	80026f6 <HAL_GPIO_Init+0x212>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4c      	ldr	r2, [pc, #304]	; (8002810 <HAL_GPIO_Init+0x32c>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d007      	beq.n	80026f2 <HAL_GPIO_Init+0x20e>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4b      	ldr	r2, [pc, #300]	; (8002814 <HAL_GPIO_Init+0x330>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d101      	bne.n	80026ee <HAL_GPIO_Init+0x20a>
 80026ea:	2307      	movs	r3, #7
 80026ec:	e00e      	b.n	800270c <HAL_GPIO_Init+0x228>
 80026ee:	2308      	movs	r3, #8
 80026f0:	e00c      	b.n	800270c <HAL_GPIO_Init+0x228>
 80026f2:	2306      	movs	r3, #6
 80026f4:	e00a      	b.n	800270c <HAL_GPIO_Init+0x228>
 80026f6:	2305      	movs	r3, #5
 80026f8:	e008      	b.n	800270c <HAL_GPIO_Init+0x228>
 80026fa:	2304      	movs	r3, #4
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x228>
 80026fe:	2303      	movs	r3, #3
 8002700:	e004      	b.n	800270c <HAL_GPIO_Init+0x228>
 8002702:	2302      	movs	r3, #2
 8002704:	e002      	b.n	800270c <HAL_GPIO_Init+0x228>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_GPIO_Init+0x228>
 800270a:	2300      	movs	r3, #0
 800270c:	69fa      	ldr	r2, [r7, #28]
 800270e:	f002 0203 	and.w	r2, r2, #3
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	4093      	lsls	r3, r2
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800271c:	4935      	ldr	r1, [pc, #212]	; (80027f4 <HAL_GPIO_Init+0x310>)
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800272a:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_GPIO_Init+0x334>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800274e:	4a32      	ldr	r2, [pc, #200]	; (8002818 <HAL_GPIO_Init+0x334>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002754:	4b30      	ldr	r3, [pc, #192]	; (8002818 <HAL_GPIO_Init+0x334>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002778:	4a27      	ldr	r2, [pc, #156]	; (8002818 <HAL_GPIO_Init+0x334>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277e:	4b26      	ldr	r3, [pc, #152]	; (8002818 <HAL_GPIO_Init+0x334>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027a2:	4a1d      	ldr	r2, [pc, #116]	; (8002818 <HAL_GPIO_Init+0x334>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <HAL_GPIO_Init+0x334>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027cc:	4a12      	ldr	r2, [pc, #72]	; (8002818 <HAL_GPIO_Init+0x334>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3301      	adds	r3, #1
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b0f      	cmp	r3, #15
 80027dc:	f67f ae90 	bls.w	8002500 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	3724      	adds	r7, #36	; 0x24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40013800 	.word	0x40013800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	40020400 	.word	0x40020400
 8002800:	40020800 	.word	0x40020800
 8002804:	40020c00 	.word	0x40020c00
 8002808:	40021000 	.word	0x40021000
 800280c:	40021400 	.word	0x40021400
 8002810:	40021800 	.word	0x40021800
 8002814:	40021c00 	.word	0x40021c00
 8002818:	40013c00 	.word	0x40013c00

0800281c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	887b      	ldrh	r3, [r7, #2]
 800282e:	4013      	ands	r3, r2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	e001      	b.n	800283e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	807b      	strh	r3, [r7, #2]
 8002858:	4613      	mov	r3, r2
 800285a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800285c:	787b      	ldrb	r3, [r7, #1]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002868:	e003      	b.n	8002872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800286a:	887b      	ldrh	r3, [r7, #2]
 800286c:	041a      	lsls	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	619a      	str	r2, [r3, #24]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002890:	887a      	ldrh	r2, [r7, #2]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4013      	ands	r3, r2
 8002896:	041a      	lsls	r2, r3, #16
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	43d9      	mvns	r1, r3
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	400b      	ands	r3, r1
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	619a      	str	r2, [r3, #24]
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80028b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b4:	b08f      	sub	sp, #60	; 0x3c
 80028b6:	af0a      	add	r7, sp, #40	; 0x28
 80028b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e054      	b.n	800296e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f006 fcde 	bl	80092a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2203      	movs	r2, #3
 80028e8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f003 fe80 	bl	8006608 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	603b      	str	r3, [r7, #0]
 800290e:	687e      	ldr	r6, [r7, #4]
 8002910:	466d      	mov	r5, sp
 8002912:	f106 0410 	add.w	r4, r6, #16
 8002916:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002918:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800291c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800291e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002922:	e885 0003 	stmia.w	r5, {r0, r1}
 8002926:	1d33      	adds	r3, r6, #4
 8002928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800292a:	6838      	ldr	r0, [r7, #0]
 800292c:	f003 fdfa 	bl	8006524 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2101      	movs	r1, #1
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fe77 	bl	800662a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	687e      	ldr	r6, [r7, #4]
 8002944:	466d      	mov	r5, sp
 8002946:	f106 0410 	add.w	r4, r6, #16
 800294a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800294c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800294e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002952:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002956:	e885 0003 	stmia.w	r5, {r0, r1}
 800295a:	1d33      	adds	r3, r6, #4
 800295c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800295e:	6838      	ldr	r0, [r7, #0]
 8002960:	f003 ff8a 	bl	8006878 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002976 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002976:	b590      	push	{r4, r7, lr}
 8002978:	b089      	sub	sp, #36	; 0x24
 800297a:	af04      	add	r7, sp, #16
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	4608      	mov	r0, r1
 8002980:	4611      	mov	r1, r2
 8002982:	461a      	mov	r2, r3
 8002984:	4603      	mov	r3, r0
 8002986:	70fb      	strb	r3, [r7, #3]
 8002988:	460b      	mov	r3, r1
 800298a:	70bb      	strb	r3, [r7, #2]
 800298c:	4613      	mov	r3, r2
 800298e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_HCD_HC_Init+0x28>
 800299a:	2302      	movs	r3, #2
 800299c:	e076      	b.n	8002a8c <HAL_HCD_HC_Init+0x116>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	212c      	movs	r1, #44	; 0x2c
 80029ac:	fb01 f303 	mul.w	r3, r1, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	333d      	adds	r3, #61	; 0x3d
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3338      	adds	r3, #56	; 0x38
 80029c6:	787a      	ldrb	r2, [r7, #1]
 80029c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3340      	adds	r3, #64	; 0x40
 80029d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80029da:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	3339      	adds	r3, #57	; 0x39
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80029ee:	78fb      	ldrb	r3, [r7, #3]
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	212c      	movs	r1, #44	; 0x2c
 80029f4:	fb01 f303 	mul.w	r3, r1, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	333f      	adds	r3, #63	; 0x3f
 80029fc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002a00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	78ba      	ldrb	r2, [r7, #2]
 8002a06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a0a:	b2d0      	uxtb	r0, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	212c      	movs	r1, #44	; 0x2c
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	4413      	add	r3, r2
 8002a16:	333a      	adds	r3, #58	; 0x3a
 8002a18:	4602      	mov	r2, r0
 8002a1a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002a1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	da09      	bge.n	8002a38 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	333b      	adds	r3, #59	; 0x3b
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e008      	b.n	8002a4a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	333b      	adds	r3, #59	; 0x3b
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	212c      	movs	r1, #44	; 0x2c
 8002a50:	fb01 f303 	mul.w	r3, r1, r3
 8002a54:	4413      	add	r3, r2
 8002a56:	333c      	adds	r3, #60	; 0x3c
 8002a58:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a5c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	787c      	ldrb	r4, [r7, #1]
 8002a64:	78ba      	ldrb	r2, [r7, #2]
 8002a66:	78f9      	ldrb	r1, [r7, #3]
 8002a68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a6a:	9302      	str	r3, [sp, #8]
 8002a6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	4623      	mov	r3, r4
 8002a7a:	f004 f87f 	bl	8006b7c <USB_HC_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd90      	pop	{r4, r7, pc}

08002a94 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_HCD_HC_Halt+0x1e>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e00f      	b.n	8002ad2 <HAL_HCD_HC_Halt+0x3e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 fabb 	bl	800703e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	4608      	mov	r0, r1
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4603      	mov	r3, r0
 8002aec:	70fb      	strb	r3, [r7, #3]
 8002aee:	460b      	mov	r3, r1
 8002af0:	70bb      	strb	r3, [r7, #2]
 8002af2:	4613      	mov	r3, r2
 8002af4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	212c      	movs	r1, #44	; 0x2c
 8002afc:	fb01 f303 	mul.w	r3, r1, r3
 8002b00:	4413      	add	r3, r2
 8002b02:	333b      	adds	r3, #59	; 0x3b
 8002b04:	78ba      	ldrb	r2, [r7, #2]
 8002b06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	333f      	adds	r3, #63	; 0x3f
 8002b16:	787a      	ldrb	r2, [r7, #1]
 8002b18:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b1a:	7c3b      	ldrb	r3, [r7, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d112      	bne.n	8002b46 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	212c      	movs	r1, #44	; 0x2c
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3342      	adds	r3, #66	; 0x42
 8002b2e:	2203      	movs	r2, #3
 8002b30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	212c      	movs	r1, #44	; 0x2c
 8002b38:	fb01 f303 	mul.w	r3, r1, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	333d      	adds	r3, #61	; 0x3d
 8002b40:	7f3a      	ldrb	r2, [r7, #28]
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e008      	b.n	8002b58 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3342      	adds	r3, #66	; 0x42
 8002b54:	2202      	movs	r2, #2
 8002b56:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002b58:	787b      	ldrb	r3, [r7, #1]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	f200 80c6 	bhi.w	8002cec <HAL_HCD_HC_SubmitRequest+0x210>
 8002b60:	a201      	add	r2, pc, #4	; (adr r2, 8002b68 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b66:	bf00      	nop
 8002b68:	08002b79 	.word	0x08002b79
 8002b6c:	08002cd9 	.word	0x08002cd9
 8002b70:	08002bdd 	.word	0x08002bdd
 8002b74:	08002c5b 	.word	0x08002c5b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002b78:	7c3b      	ldrb	r3, [r7, #16]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	f040 80b8 	bne.w	8002cf0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002b80:	78bb      	ldrb	r3, [r7, #2]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 80b4 	bne.w	8002cf0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002b88:	8b3b      	ldrh	r3, [r7, #24]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d108      	bne.n	8002ba0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002b8e:	78fb      	ldrb	r3, [r7, #3]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3355      	adds	r3, #85	; 0x55
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3355      	adds	r3, #85	; 0x55
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3342      	adds	r3, #66	; 0x42
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002bc6:	e093      	b.n	8002cf0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bc8:	78fb      	ldrb	r3, [r7, #3]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3342      	adds	r3, #66	; 0x42
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	701a      	strb	r2, [r3, #0]
      break;
 8002bda:	e089      	b.n	8002cf0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002bdc:	78bb      	ldrb	r3, [r7, #2]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d11d      	bne.n	8002c1e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002be2:	78fb      	ldrb	r3, [r7, #3]
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3355      	adds	r3, #85	; 0x55
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	212c      	movs	r1, #44	; 0x2c
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	3342      	adds	r3, #66	; 0x42
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002c08:	e073      	b.n	8002cf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3342      	adds	r3, #66	; 0x42
 8002c18:	2202      	movs	r2, #2
 8002c1a:	701a      	strb	r2, [r3, #0]
      break;
 8002c1c:	e069      	b.n	8002cf2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	212c      	movs	r1, #44	; 0x2c
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	4413      	add	r3, r2
 8002c2a:	3354      	adds	r3, #84	; 0x54
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3342      	adds	r3, #66	; 0x42
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
      break;
 8002c44:	e055      	b.n	8002cf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3342      	adds	r3, #66	; 0x42
 8002c54:	2202      	movs	r2, #2
 8002c56:	701a      	strb	r2, [r3, #0]
      break;
 8002c58:	e04b      	b.n	8002cf2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002c5a:	78bb      	ldrb	r3, [r7, #2]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11d      	bne.n	8002c9c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3355      	adds	r3, #85	; 0x55
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3342      	adds	r3, #66	; 0x42
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c86:	e034      	b.n	8002cf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c88:	78fb      	ldrb	r3, [r7, #3]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	212c      	movs	r1, #44	; 0x2c
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	3342      	adds	r3, #66	; 0x42
 8002c96:	2202      	movs	r2, #2
 8002c98:	701a      	strb	r2, [r3, #0]
      break;
 8002c9a:	e02a      	b.n	8002cf2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3354      	adds	r3, #84	; 0x54
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d109      	bne.n	8002cc4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3342      	adds	r3, #66	; 0x42
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
      break;
 8002cc2:	e016      	b.n	8002cf2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3342      	adds	r3, #66	; 0x42
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	701a      	strb	r2, [r3, #0]
      break;
 8002cd6:	e00c      	b.n	8002cf2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3342      	adds	r3, #66	; 0x42
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
      break;
 8002cea:	e002      	b.n	8002cf2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002cec:	bf00      	nop
 8002cee:	e000      	b.n	8002cf2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002cf0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	212c      	movs	r1, #44	; 0x2c
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	3344      	adds	r3, #68	; 0x44
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	8b3a      	ldrh	r2, [r7, #24]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	202c      	movs	r0, #44	; 0x2c
 8002d0c:	fb00 f303 	mul.w	r3, r0, r3
 8002d10:	440b      	add	r3, r1
 8002d12:	334c      	adds	r3, #76	; 0x4c
 8002d14:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	212c      	movs	r1, #44	; 0x2c
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	3360      	adds	r3, #96	; 0x60
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	212c      	movs	r1, #44	; 0x2c
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	3350      	adds	r3, #80	; 0x50
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3339      	adds	r3, #57	; 0x39
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3361      	adds	r3, #97	; 0x61
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	222c      	movs	r2, #44	; 0x2c
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	3338      	adds	r3, #56	; 0x38
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	18d1      	adds	r1, r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	f004 f80e 	bl	8006d98 <USB_HC_StartXfer>
 8002d7c:	4603      	mov	r3, r0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop

08002d88 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f003 fd27 	bl	80067f2 <USB_GetMode>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	f040 80ef 	bne.w	8002f8a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f003 fd0b 	bl	80067cc <USB_ReadInterrupts>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 80e5 	beq.w	8002f88 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 fd02 	bl	80067cc <USB_ReadInterrupts>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dd2:	d104      	bne.n	8002dde <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ddc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 fcf2 	bl	80067cc <USB_ReadInterrupts>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002df2:	d104      	bne.n	8002dfe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002dfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f003 fce2 	bl	80067cc <USB_ReadInterrupts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e12:	d104      	bne.n	8002e1e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 fcd2 	bl	80067cc <USB_ReadInterrupts>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d103      	bne.n	8002e3a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2202      	movs	r2, #2
 8002e38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 fcc4 	bl	80067cc <USB_ReadInterrupts>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e4e:	d115      	bne.n	8002e7c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e58:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d108      	bne.n	8002e7c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f006 fa96 	bl	800939c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2101      	movs	r1, #1
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fdba 	bl	80069f0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f003 fca3 	bl	80067cc <USB_ReadInterrupts>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e90:	d102      	bne.n	8002e98 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f001 f9ff 	bl	8004296 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fc95 	bl	80067cc <USB_ReadInterrupts>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d106      	bne.n	8002eba <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f006 fa59 	bl	8009364 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f003 fc84 	bl	80067cc <USB_ReadInterrupts>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	2b10      	cmp	r3, #16
 8002ecc:	d101      	bne.n	8002ed2 <HAL_HCD_IRQHandler+0x14a>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_HCD_IRQHandler+0x14c>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d012      	beq.n	8002efe <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0210 	bic.w	r2, r2, #16
 8002ee6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f001 f902 	bl	80040f2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0210 	orr.w	r2, r2, #16
 8002efc:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fc62 	bl	80067cc <USB_ReadInterrupts>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f12:	d13a      	bne.n	8002f8a <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f004 f87f 	bl	800701c <USB_HC_ReadInterrupt>
 8002f1e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	e025      	b.n	8002f72 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d018      	beq.n	8002f6c <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f50:	d106      	bne.n	8002f60 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	4619      	mov	r1, r3
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f8ab 	bl	80030b4 <HCD_HC_IN_IRQHandler>
 8002f5e:	e005      	b.n	8002f6c <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	4619      	mov	r1, r3
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fcc6 	bl	80038f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d3d4      	bcc.n	8002f26 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f84:	615a      	str	r2, [r3, #20]
 8002f86:	e000      	b.n	8002f8a <HAL_HCD_IRQHandler+0x202>
      return;
 8002f88:	bf00      	nop
    }
  }
}
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_HCD_Start+0x16>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e013      	b.n	8002fce <HAL_HCD_Start+0x3e>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fb17 	bl	80065e6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 fd7a 	bl	8006ab8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_HCD_Stop+0x16>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e00d      	b.n	8003008 <HAL_HCD_Stop+0x32>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f004 f979 	bl	80072f0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f003 fd21 	bl	8006a64 <USB_ResetPort>
 8003022:	4603      	mov	r3, r0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	212c      	movs	r1, #44	; 0x2c
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	4413      	add	r3, r2
 8003044:	3360      	adds	r3, #96	; 0x60
 8003046:	781b      	ldrb	r3, [r3, #0]
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	3350      	adds	r3, #80	; 0x50
 800306e:	681b      	ldr	r3, [r3, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fd65 	bl	8006b58 <USB_GetCurrentFrame>
 800308e:	4603      	mov	r3, r0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f003 fd40 	bl	8006b2a <USB_GetHostSpeed>
 80030aa:	4603      	mov	r3, r0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d119      	bne.n	8003118 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f0:	461a      	mov	r2, r3
 80030f2:	2304      	movs	r3, #4
 80030f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	0151      	lsls	r1, r2, #5
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	440a      	add	r2, r1
 800310c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	60d3      	str	r3, [r2, #12]
 8003116:	e101      	b.n	800331c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800312e:	d12b      	bne.n	8003188 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	461a      	mov	r2, r3
 800313e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003142:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	212c      	movs	r1, #44	; 0x2c
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4413      	add	r3, r2
 8003150:	3361      	adds	r3, #97	; 0x61
 8003152:	2207      	movs	r2, #7
 8003154:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4413      	add	r3, r2
 800315e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	0151      	lsls	r1, r2, #5
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	440a      	add	r2, r1
 800316c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003170:	f043 0302 	orr.w	r3, r3, #2
 8003174:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f003 ff5c 	bl	800703e <USB_HC_Halt>
 8003186:	e0c9      	b.n	800331c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4413      	add	r3, r2
 8003190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b20      	cmp	r3, #32
 800319c:	d109      	bne.n	80031b2 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031aa:	461a      	mov	r2, r3
 80031ac:	2320      	movs	r3, #32
 80031ae:	6093      	str	r3, [r2, #8]
 80031b0:	e0b4      	b.n	800331c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d133      	bne.n	8003230 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	0151      	lsls	r1, r2, #5
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	440a      	add	r2, r1
 80031de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031e2:	f043 0302 	orr.w	r3, r3, #2
 80031e6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	212c      	movs	r1, #44	; 0x2c
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	3361      	adds	r3, #97	; 0x61
 80031f6:	2205      	movs	r2, #5
 80031f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003206:	461a      	mov	r2, r3
 8003208:	2310      	movs	r3, #16
 800320a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003218:	461a      	mov	r2, r3
 800321a:	2308      	movs	r3, #8
 800321c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f003 ff08 	bl	800703e <USB_HC_Halt>
 800322e:	e075      	b.n	800331c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003246:	d134      	bne.n	80032b2 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	0151      	lsls	r1, r2, #5
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	440a      	add	r2, r1
 800325e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	212c      	movs	r1, #44	; 0x2c
 800326e:	fb01 f303 	mul.w	r3, r1, r3
 8003272:	4413      	add	r3, r2
 8003274:	3361      	adds	r3, #97	; 0x61
 8003276:	2208      	movs	r2, #8
 8003278:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	015a      	lsls	r2, r3, #5
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4413      	add	r3, r2
 8003282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003286:	461a      	mov	r2, r3
 8003288:	2310      	movs	r3, #16
 800328a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	015a      	lsls	r2, r3, #5
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4413      	add	r3, r2
 8003294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003298:	461a      	mov	r2, r3
 800329a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800329e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	4611      	mov	r1, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f003 fec7 	bl	800703e <USB_HC_Halt>
 80032b0:	e034      	b.n	800331c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c4:	2b80      	cmp	r3, #128	; 0x80
 80032c6:	d129      	bne.n	800331c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	0151      	lsls	r1, r2, #5
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	440a      	add	r2, r1
 80032de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032e2:	f043 0302 	orr.w	r3, r3, #2
 80032e6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	212c      	movs	r1, #44	; 0x2c
 80032ee:	fb01 f303 	mul.w	r3, r1, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	3361      	adds	r3, #97	; 0x61
 80032f6:	2206      	movs	r2, #6
 80032f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f003 fe9a 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4413      	add	r3, r2
 8003312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003316:	461a      	mov	r2, r3
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003332:	d122      	bne.n	800337a <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	0151      	lsls	r1, r2, #5
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	440a      	add	r2, r1
 800334a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800334e:	f043 0302 	orr.w	r3, r3, #2
 8003352:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	b2d2      	uxtb	r2, r2
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f003 fe6d 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	461a      	mov	r2, r3
 8003372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003376:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003378:	e2ba      	b.n	80038f0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b01      	cmp	r3, #1
 800338e:	f040 811b 	bne.w	80035c8 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d019      	beq.n	80033ce <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	3348      	adds	r3, #72	; 0x48
 80033a8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	0159      	lsls	r1, r3, #5
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	440b      	add	r3, r1
 80033b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80033bc:	1ad2      	subs	r2, r2, r3
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	202c      	movs	r0, #44	; 0x2c
 80033c4:	fb00 f303 	mul.w	r3, r0, r3
 80033c8:	440b      	add	r3, r1
 80033ca:	3350      	adds	r3, #80	; 0x50
 80033cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	212c      	movs	r1, #44	; 0x2c
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	4413      	add	r3, r2
 80033da:	3361      	adds	r3, #97	; 0x61
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	212c      	movs	r1, #44	; 0x2c
 80033e6:	fb01 f303 	mul.w	r3, r1, r3
 80033ea:	4413      	add	r3, r2
 80033ec:	335c      	adds	r3, #92	; 0x5c
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fe:	461a      	mov	r2, r3
 8003400:	2301      	movs	r3, #1
 8003402:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	212c      	movs	r1, #44	; 0x2c
 800340a:	fb01 f303 	mul.w	r3, r1, r3
 800340e:	4413      	add	r3, r2
 8003410:	333f      	adds	r3, #63	; 0x3f
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d009      	beq.n	800342c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	212c      	movs	r1, #44	; 0x2c
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	333f      	adds	r3, #63	; 0x3f
 8003426:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003428:	2b02      	cmp	r3, #2
 800342a:	d121      	bne.n	8003470 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4413      	add	r3, r2
 8003434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	0151      	lsls	r1, r2, #5
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	440a      	add	r2, r1
 8003442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003446:	f043 0302 	orr.w	r3, r3, #2
 800344a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f003 fdf1 	bl	800703e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003468:	461a      	mov	r2, r3
 800346a:	2310      	movs	r3, #16
 800346c:	6093      	str	r3, [r2, #8]
 800346e:	e066      	b.n	800353e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	212c      	movs	r1, #44	; 0x2c
 8003476:	fb01 f303 	mul.w	r3, r1, r3
 800347a:	4413      	add	r3, r2
 800347c:	333f      	adds	r3, #63	; 0x3f
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b03      	cmp	r3, #3
 8003482:	d127      	bne.n	80034d4 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	0151      	lsls	r1, r2, #5
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	440a      	add	r2, r1
 800349a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800349e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034a2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	212c      	movs	r1, #44	; 0x2c
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	4413      	add	r3, r2
 80034b0:	3360      	adds	r3, #96	; 0x60
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	b2d9      	uxtb	r1, r3
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	202c      	movs	r0, #44	; 0x2c
 80034c0:	fb00 f303 	mul.w	r3, r0, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	3360      	adds	r3, #96	; 0x60
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f005 ff73 	bl	80093b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034d2:	e034      	b.n	800353e <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	333f      	adds	r3, #63	; 0x3f
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d12a      	bne.n	800353e <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3360      	adds	r3, #96	; 0x60
 80034f6:	2201      	movs	r2, #1
 80034f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	212c      	movs	r1, #44	; 0x2c
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	3354      	adds	r3, #84	; 0x54
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	f083 0301 	eor.w	r3, r3, #1
 800350e:	b2d8      	uxtb	r0, r3
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3354      	adds	r3, #84	; 0x54
 800351e:	4602      	mov	r2, r0
 8003520:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	b2d9      	uxtb	r1, r3
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	202c      	movs	r0, #44	; 0x2c
 800352c:	fb00 f303 	mul.w	r3, r0, r3
 8003530:	4413      	add	r3, r2
 8003532:	3360      	adds	r3, #96	; 0x60
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	461a      	mov	r2, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f005 ff3d 	bl	80093b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d12b      	bne.n	800359e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	212c      	movs	r1, #44	; 0x2c
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	3348      	adds	r3, #72	; 0x48
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	202c      	movs	r0, #44	; 0x2c
 800355c:	fb00 f202 	mul.w	r2, r0, r2
 8003560:	440a      	add	r2, r1
 8003562:	3240      	adds	r2, #64	; 0x40
 8003564:	8812      	ldrh	r2, [r2, #0]
 8003566:	fbb3 f3f2 	udiv	r3, r3, r2
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 81be 	beq.w	80038f0 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	3354      	adds	r3, #84	; 0x54
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	f083 0301 	eor.w	r3, r3, #1
 8003588:	b2d8      	uxtb	r0, r3
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	212c      	movs	r1, #44	; 0x2c
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	4413      	add	r3, r2
 8003596:	3354      	adds	r3, #84	; 0x54
 8003598:	4602      	mov	r2, r0
 800359a:	701a      	strb	r2, [r3, #0]
}
 800359c:	e1a8      	b.n	80038f0 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	212c      	movs	r1, #44	; 0x2c
 80035a4:	fb01 f303 	mul.w	r3, r1, r3
 80035a8:	4413      	add	r3, r2
 80035aa:	3354      	adds	r3, #84	; 0x54
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	f083 0301 	eor.w	r3, r3, #1
 80035b2:	b2d8      	uxtb	r0, r3
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	3354      	adds	r3, #84	; 0x54
 80035c2:	4602      	mov	r2, r0
 80035c4:	701a      	strb	r2, [r3, #0]
}
 80035c6:	e193      	b.n	80038f0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	f040 8106 	bne.w	80037ec <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	0151      	lsls	r1, r2, #5
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	440a      	add	r2, r1
 80035f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035fa:	f023 0302 	bic.w	r3, r3, #2
 80035fe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	3361      	adds	r3, #97	; 0x61
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d109      	bne.n	8003628 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	212c      	movs	r1, #44	; 0x2c
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	4413      	add	r3, r2
 8003620:	3360      	adds	r3, #96	; 0x60
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e0c9      	b.n	80037bc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	212c      	movs	r1, #44	; 0x2c
 800362e:	fb01 f303 	mul.w	r3, r1, r3
 8003632:	4413      	add	r3, r2
 8003634:	3361      	adds	r3, #97	; 0x61
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b05      	cmp	r3, #5
 800363a:	d109      	bne.n	8003650 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	212c      	movs	r1, #44	; 0x2c
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	3360      	adds	r3, #96	; 0x60
 800364a:	2205      	movs	r2, #5
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	e0b5      	b.n	80037bc <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	212c      	movs	r1, #44	; 0x2c
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4413      	add	r3, r2
 800365c:	3361      	adds	r3, #97	; 0x61
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b06      	cmp	r3, #6
 8003662:	d009      	beq.n	8003678 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	212c      	movs	r1, #44	; 0x2c
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	4413      	add	r3, r2
 8003670:	3361      	adds	r3, #97	; 0x61
 8003672:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003674:	2b08      	cmp	r3, #8
 8003676:	d150      	bne.n	800371a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	335c      	adds	r3, #92	; 0x5c
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	202c      	movs	r0, #44	; 0x2c
 8003690:	fb00 f303 	mul.w	r3, r0, r3
 8003694:	440b      	add	r3, r1
 8003696:	335c      	adds	r3, #92	; 0x5c
 8003698:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	212c      	movs	r1, #44	; 0x2c
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	4413      	add	r3, r2
 80036a6:	335c      	adds	r3, #92	; 0x5c
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d912      	bls.n	80036d4 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	212c      	movs	r1, #44	; 0x2c
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	4413      	add	r3, r2
 80036ba:	335c      	adds	r3, #92	; 0x5c
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	212c      	movs	r1, #44	; 0x2c
 80036c6:	fb01 f303 	mul.w	r3, r1, r3
 80036ca:	4413      	add	r3, r2
 80036cc:	3360      	adds	r3, #96	; 0x60
 80036ce:	2204      	movs	r2, #4
 80036d0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036d2:	e073      	b.n	80037bc <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	212c      	movs	r1, #44	; 0x2c
 80036da:	fb01 f303 	mul.w	r3, r1, r3
 80036de:	4413      	add	r3, r2
 80036e0:	3360      	adds	r3, #96	; 0x60
 80036e2:	2202      	movs	r2, #2
 80036e4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036fc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003704:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4413      	add	r3, r2
 800370e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003712:	461a      	mov	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003718:	e050      	b.n	80037bc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	212c      	movs	r1, #44	; 0x2c
 8003720:	fb01 f303 	mul.w	r3, r1, r3
 8003724:	4413      	add	r3, r2
 8003726:	3361      	adds	r3, #97	; 0x61
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d122      	bne.n	8003774 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	212c      	movs	r1, #44	; 0x2c
 8003734:	fb01 f303 	mul.w	r3, r1, r3
 8003738:	4413      	add	r3, r2
 800373a:	3360      	adds	r3, #96	; 0x60
 800373c:	2202      	movs	r2, #2
 800373e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4413      	add	r3, r2
 8003748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003756:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800375e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4413      	add	r3, r2
 8003768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376c:	461a      	mov	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e023      	b.n	80037bc <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3361      	adds	r3, #97	; 0x61
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b07      	cmp	r3, #7
 8003786:	d119      	bne.n	80037bc <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	335c      	adds	r3, #92	; 0x5c
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	202c      	movs	r0, #44	; 0x2c
 80037a0:	fb00 f303 	mul.w	r3, r0, r3
 80037a4:	440b      	add	r3, r1
 80037a6:	335c      	adds	r3, #92	; 0x5c
 80037a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	212c      	movs	r1, #44	; 0x2c
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	3360      	adds	r3, #96	; 0x60
 80037b8:	2204      	movs	r2, #4
 80037ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c8:	461a      	mov	r2, r3
 80037ca:	2302      	movs	r3, #2
 80037cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	b2d9      	uxtb	r1, r3
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	202c      	movs	r0, #44	; 0x2c
 80037d8:	fb00 f303 	mul.w	r3, r0, r3
 80037dc:	4413      	add	r3, r2
 80037de:	3360      	adds	r3, #96	; 0x60
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f005 fde7 	bl	80093b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037ea:	e081      	b.n	80038f0 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d176      	bne.n	80038f0 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	212c      	movs	r1, #44	; 0x2c
 8003808:	fb01 f303 	mul.w	r3, r1, r3
 800380c:	4413      	add	r3, r2
 800380e:	333f      	adds	r3, #63	; 0x3f
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b03      	cmp	r3, #3
 8003814:	d121      	bne.n	800385a <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	212c      	movs	r1, #44	; 0x2c
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	4413      	add	r3, r2
 8003822:	335c      	adds	r3, #92	; 0x5c
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	0151      	lsls	r1, r2, #5
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	440a      	add	r2, r1
 800383e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003842:	f043 0302 	orr.w	r3, r3, #2
 8003846:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	4611      	mov	r1, r2
 8003852:	4618      	mov	r0, r3
 8003854:	f003 fbf3 	bl	800703e <USB_HC_Halt>
 8003858:	e041      	b.n	80038de <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	212c      	movs	r1, #44	; 0x2c
 8003860:	fb01 f303 	mul.w	r3, r1, r3
 8003864:	4413      	add	r3, r2
 8003866:	333f      	adds	r3, #63	; 0x3f
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	333f      	adds	r3, #63	; 0x3f
 800387c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800387e:	2b02      	cmp	r3, #2
 8003880:	d12d      	bne.n	80038de <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	335c      	adds	r3, #92	; 0x5c
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d120      	bne.n	80038de <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	212c      	movs	r1, #44	; 0x2c
 80038a2:	fb01 f303 	mul.w	r3, r1, r3
 80038a6:	4413      	add	r3, r2
 80038a8:	3361      	adds	r3, #97	; 0x61
 80038aa:	2203      	movs	r2, #3
 80038ac:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	0151      	lsls	r1, r2, #5
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	440a      	add	r2, r1
 80038c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038c8:	f043 0302 	orr.w	r3, r3, #2
 80038cc:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f003 fbb0 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ea:	461a      	mov	r2, r3
 80038ec:	2310      	movs	r3, #16
 80038ee:	6093      	str	r3, [r2, #8]
}
 80038f0:	bf00      	nop
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	4413      	add	r3, r2
 800391a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b04      	cmp	r3, #4
 8003926:	d119      	bne.n	800395c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	4413      	add	r3, r2
 8003930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003934:	461a      	mov	r2, r3
 8003936:	2304      	movs	r3, #4
 8003938:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	4413      	add	r3, r2
 8003942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	0151      	lsls	r1, r2, #5
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	440a      	add	r2, r1
 8003950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003954:	f043 0302 	orr.w	r3, r3, #2
 8003958:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800395a:	e3c6      	b.n	80040ea <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	4413      	add	r3, r2
 8003964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0320 	and.w	r3, r3, #32
 800396e:	2b20      	cmp	r3, #32
 8003970:	d13e      	bne.n	80039f0 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	4413      	add	r3, r2
 800397a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397e:	461a      	mov	r2, r3
 8003980:	2320      	movs	r3, #32
 8003982:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	212c      	movs	r1, #44	; 0x2c
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	4413      	add	r3, r2
 8003990:	333d      	adds	r3, #61	; 0x3d
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	f040 83a8 	bne.w	80040ea <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	212c      	movs	r1, #44	; 0x2c
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	333d      	adds	r3, #61	; 0x3d
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	212c      	movs	r1, #44	; 0x2c
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	4413      	add	r3, r2
 80039b8:	3360      	adds	r3, #96	; 0x60
 80039ba:	2202      	movs	r2, #2
 80039bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	0151      	lsls	r1, r2, #5
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	440a      	add	r2, r1
 80039d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f003 fb28 	bl	800703e <USB_HC_Halt>
}
 80039ee:	e37c      	b.n	80040ea <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a06:	d122      	bne.n	8003a4e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	0151      	lsls	r1, r2, #5
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	440a      	add	r2, r1
 8003a1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a22:	f043 0302 	orr.w	r3, r3, #2
 8003a26:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f003 fb03 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a44:	461a      	mov	r2, r3
 8003a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a4a:	6093      	str	r3, [r2, #8]
}
 8003a4c:	e34d      	b.n	80040ea <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d150      	bne.n	8003b06 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	212c      	movs	r1, #44	; 0x2c
 8003a6a:	fb01 f303 	mul.w	r3, r1, r3
 8003a6e:	4413      	add	r3, r2
 8003a70:	335c      	adds	r3, #92	; 0x5c
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b40      	cmp	r3, #64	; 0x40
 8003a8a:	d111      	bne.n	8003ab0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	212c      	movs	r1, #44	; 0x2c
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	333d      	adds	r3, #61	; 0x3d
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2340      	movs	r3, #64	; 0x40
 8003aae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	0151      	lsls	r1, r2, #5
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	440a      	add	r2, r1
 8003ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aca:	f043 0302 	orr.w	r3, r3, #2
 8003ace:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	4611      	mov	r1, r2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f003 faaf 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aec:	461a      	mov	r2, r3
 8003aee:	2301      	movs	r3, #1
 8003af0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	212c      	movs	r1, #44	; 0x2c
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	3361      	adds	r3, #97	; 0x61
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
}
 8003b04:	e2f1      	b.n	80040ea <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	015a      	lsls	r2, r3, #5
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b40      	cmp	r3, #64	; 0x40
 8003b1a:	d13c      	bne.n	8003b96 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	212c      	movs	r1, #44	; 0x2c
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	3361      	adds	r3, #97	; 0x61
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	212c      	movs	r1, #44	; 0x2c
 8003b34:	fb01 f303 	mul.w	r3, r1, r3
 8003b38:	4413      	add	r3, r2
 8003b3a:	333d      	adds	r3, #61	; 0x3d
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	335c      	adds	r3, #92	; 0x5c
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	0151      	lsls	r1, r2, #5
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	440a      	add	r2, r1
 8003b68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b6c:	f043 0302 	orr.w	r3, r3, #2
 8003b70:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f003 fa5e 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2340      	movs	r3, #64	; 0x40
 8003b92:	6093      	str	r3, [r2, #8]
}
 8003b94:	e2a9      	b.n	80040ea <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d12a      	bne.n	8003c02 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2308      	movs	r3, #8
 8003bbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	0151      	lsls	r1, r2, #5
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	440a      	add	r2, r1
 8003bd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	4611      	mov	r1, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f003 fa28 	bl	800703e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	212c      	movs	r1, #44	; 0x2c
 8003bf4:	fb01 f303 	mul.w	r3, r1, r3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	3361      	adds	r3, #97	; 0x61
 8003bfc:	2205      	movs	r2, #5
 8003bfe:	701a      	strb	r2, [r3, #0]
}
 8003c00:	e273      	b.n	80040ea <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d150      	bne.n	8003cba <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	212c      	movs	r1, #44	; 0x2c
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	335c      	adds	r3, #92	; 0x5c
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	212c      	movs	r1, #44	; 0x2c
 8003c30:	fb01 f303 	mul.w	r3, r1, r3
 8003c34:	4413      	add	r3, r2
 8003c36:	3361      	adds	r3, #97	; 0x61
 8003c38:	2203      	movs	r2, #3
 8003c3a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	212c      	movs	r1, #44	; 0x2c
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	333d      	adds	r3, #61	; 0x3d
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d112      	bne.n	8003c76 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	333c      	adds	r3, #60	; 0x3c
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d108      	bne.n	8003c76 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	333d      	adds	r3, #61	; 0x3d
 8003c72:	2201      	movs	r2, #1
 8003c74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	0151      	lsls	r1, r2, #5
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	440a      	add	r2, r1
 8003c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c90:	f043 0302 	orr.w	r3, r3, #2
 8003c94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f003 f9cc 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	6093      	str	r3, [r2, #8]
}
 8003cb8:	e217      	b.n	80040ea <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ccc:	2b80      	cmp	r3, #128	; 0x80
 8003cce:	d174      	bne.n	8003dba <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d121      	bne.n	8003d1c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3361      	adds	r3, #97	; 0x61
 8003ce6:	2206      	movs	r2, #6
 8003ce8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	0151      	lsls	r1, r2, #5
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	440a      	add	r2, r1
 8003d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d04:	f043 0302 	orr.w	r3, r3, #2
 8003d08:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f003 f992 	bl	800703e <USB_HC_Halt>
 8003d1a:	e044      	b.n	8003da6 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	212c      	movs	r1, #44	; 0x2c
 8003d22:	fb01 f303 	mul.w	r3, r1, r3
 8003d26:	4413      	add	r3, r2
 8003d28:	335c      	adds	r3, #92	; 0x5c
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	202c      	movs	r0, #44	; 0x2c
 8003d34:	fb00 f303 	mul.w	r3, r0, r3
 8003d38:	440b      	add	r3, r1
 8003d3a:	335c      	adds	r3, #92	; 0x5c
 8003d3c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	212c      	movs	r1, #44	; 0x2c
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	4413      	add	r3, r2
 8003d4a:	335c      	adds	r3, #92	; 0x5c
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d920      	bls.n	8003d94 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	212c      	movs	r1, #44	; 0x2c
 8003d58:	fb01 f303 	mul.w	r3, r1, r3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	335c      	adds	r3, #92	; 0x5c
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	3360      	adds	r3, #96	; 0x60
 8003d72:	2204      	movs	r2, #4
 8003d74:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	b2d9      	uxtb	r1, r3
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	202c      	movs	r0, #44	; 0x2c
 8003d80:	fb00 f303 	mul.w	r3, r0, r3
 8003d84:	4413      	add	r3, r2
 8003d86:	3360      	adds	r3, #96	; 0x60
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f005 fb13 	bl	80093b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d92:	e008      	b.n	8003da6 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	212c      	movs	r1, #44	; 0x2c
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	4413      	add	r3, r2
 8003da0:	3360      	adds	r3, #96	; 0x60
 8003da2:	2202      	movs	r2, #2
 8003da4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db2:	461a      	mov	r2, r3
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	6093      	str	r3, [r2, #8]
}
 8003db8:	e197      	b.n	80040ea <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd0:	d134      	bne.n	8003e3c <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	0151      	lsls	r1, r2, #5
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	440a      	add	r2, r1
 8003de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f003 f91e 	bl	800703e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2310      	movs	r3, #16
 8003e12:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e20:	461a      	mov	r2, r3
 8003e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	212c      	movs	r1, #44	; 0x2c
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	4413      	add	r3, r2
 8003e34:	3361      	adds	r3, #97	; 0x61
 8003e36:	2208      	movs	r2, #8
 8003e38:	701a      	strb	r2, [r3, #0]
}
 8003e3a:	e156      	b.n	80040ea <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	f040 814b 	bne.w	80040ea <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	0151      	lsls	r1, r2, #5
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	440a      	add	r2, r1
 8003e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e6e:	f023 0302 	bic.w	r3, r3, #2
 8003e72:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	212c      	movs	r1, #44	; 0x2c
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	3361      	adds	r3, #97	; 0x61
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d179      	bne.n	8003f7c <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	212c      	movs	r1, #44	; 0x2c
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	3360      	adds	r3, #96	; 0x60
 8003e96:	2201      	movs	r2, #1
 8003e98:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	212c      	movs	r1, #44	; 0x2c
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	333f      	adds	r3, #63	; 0x3f
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d00a      	beq.n	8003ec4 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	333f      	adds	r3, #63	; 0x3f
 8003ebc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ebe:	2b03      	cmp	r3, #3
 8003ec0:	f040 80fc 	bne.w	80040bc <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d142      	bne.n	8003f52 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	212c      	movs	r1, #44	; 0x2c
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	334c      	adds	r3, #76	; 0x4c
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80ed 	beq.w	80040bc <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	212c      	movs	r1, #44	; 0x2c
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	334c      	adds	r3, #76	; 0x4c
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	202c      	movs	r0, #44	; 0x2c
 8003ef8:	fb00 f202 	mul.w	r2, r0, r2
 8003efc:	440a      	add	r2, r1
 8003efe:	3240      	adds	r2, #64	; 0x40
 8003f00:	8812      	ldrh	r2, [r2, #0]
 8003f02:	4413      	add	r3, r2
 8003f04:	3b01      	subs	r3, #1
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	202c      	movs	r0, #44	; 0x2c
 8003f0c:	fb00 f202 	mul.w	r2, r0, r2
 8003f10:	440a      	add	r2, r1
 8003f12:	3240      	adds	r2, #64	; 0x40
 8003f14:	8812      	ldrh	r2, [r2, #0]
 8003f16:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 80ca 	beq.w	80040bc <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	212c      	movs	r1, #44	; 0x2c
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	3355      	adds	r3, #85	; 0x55
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	f083 0301 	eor.w	r3, r3, #1
 8003f3c:	b2d8      	uxtb	r0, r3
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	212c      	movs	r1, #44	; 0x2c
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	4413      	add	r3, r2
 8003f4a:	3355      	adds	r3, #85	; 0x55
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	e0b4      	b.n	80040bc <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	212c      	movs	r1, #44	; 0x2c
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3355      	adds	r3, #85	; 0x55
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	f083 0301 	eor.w	r3, r3, #1
 8003f66:	b2d8      	uxtb	r0, r3
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	212c      	movs	r1, #44	; 0x2c
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	3355      	adds	r3, #85	; 0x55
 8003f76:	4602      	mov	r2, r0
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	e09f      	b.n	80040bc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	212c      	movs	r1, #44	; 0x2c
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	4413      	add	r3, r2
 8003f88:	3361      	adds	r3, #97	; 0x61
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d109      	bne.n	8003fa4 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	212c      	movs	r1, #44	; 0x2c
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3360      	adds	r3, #96	; 0x60
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e08b      	b.n	80040bc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	212c      	movs	r1, #44	; 0x2c
 8003faa:	fb01 f303 	mul.w	r3, r1, r3
 8003fae:	4413      	add	r3, r2
 8003fb0:	3361      	adds	r3, #97	; 0x61
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d109      	bne.n	8003fcc <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	212c      	movs	r1, #44	; 0x2c
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3360      	adds	r3, #96	; 0x60
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e077      	b.n	80040bc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	212c      	movs	r1, #44	; 0x2c
 8003fd2:	fb01 f303 	mul.w	r3, r1, r3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3361      	adds	r3, #97	; 0x61
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b05      	cmp	r3, #5
 8003fde:	d109      	bne.n	8003ff4 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	212c      	movs	r1, #44	; 0x2c
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	3360      	adds	r3, #96	; 0x60
 8003fee:	2205      	movs	r2, #5
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	e063      	b.n	80040bc <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	212c      	movs	r1, #44	; 0x2c
 8003ffa:	fb01 f303 	mul.w	r3, r1, r3
 8003ffe:	4413      	add	r3, r2
 8004000:	3361      	adds	r3, #97	; 0x61
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b06      	cmp	r3, #6
 8004006:	d009      	beq.n	800401c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	212c      	movs	r1, #44	; 0x2c
 800400e:	fb01 f303 	mul.w	r3, r1, r3
 8004012:	4413      	add	r3, r2
 8004014:	3361      	adds	r3, #97	; 0x61
 8004016:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004018:	2b08      	cmp	r3, #8
 800401a:	d14f      	bne.n	80040bc <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	212c      	movs	r1, #44	; 0x2c
 8004022:	fb01 f303 	mul.w	r3, r1, r3
 8004026:	4413      	add	r3, r2
 8004028:	335c      	adds	r3, #92	; 0x5c
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	1c5a      	adds	r2, r3, #1
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	202c      	movs	r0, #44	; 0x2c
 8004034:	fb00 f303 	mul.w	r3, r0, r3
 8004038:	440b      	add	r3, r1
 800403a:	335c      	adds	r3, #92	; 0x5c
 800403c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	212c      	movs	r1, #44	; 0x2c
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	4413      	add	r3, r2
 800404a:	335c      	adds	r3, #92	; 0x5c
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d912      	bls.n	8004078 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	212c      	movs	r1, #44	; 0x2c
 8004058:	fb01 f303 	mul.w	r3, r1, r3
 800405c:	4413      	add	r3, r2
 800405e:	335c      	adds	r3, #92	; 0x5c
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	212c      	movs	r1, #44	; 0x2c
 800406a:	fb01 f303 	mul.w	r3, r1, r3
 800406e:	4413      	add	r3, r2
 8004070:	3360      	adds	r3, #96	; 0x60
 8004072:	2204      	movs	r2, #4
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	e021      	b.n	80040bc <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	212c      	movs	r1, #44	; 0x2c
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	4413      	add	r3, r2
 8004084:	3360      	adds	r3, #96	; 0x60
 8004086:	2202      	movs	r2, #2
 8004088:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	4413      	add	r3, r2
 8004092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040a0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040a8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b6:	461a      	mov	r2, r3
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c8:	461a      	mov	r2, r3
 80040ca:	2302      	movs	r3, #2
 80040cc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	b2d9      	uxtb	r1, r3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	202c      	movs	r0, #44	; 0x2c
 80040d8:	fb00 f303 	mul.w	r3, r0, r3
 80040dc:	4413      	add	r3, r2
 80040de:	3360      	adds	r3, #96	; 0x60
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f005 f967 	bl	80093b8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80040ea:	bf00      	nop
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b08a      	sub	sp, #40	; 0x28
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	0c5b      	lsrs	r3, r3, #17
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004126:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d004      	beq.n	8004138 <HCD_RXQLVL_IRQHandler+0x46>
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b05      	cmp	r3, #5
 8004132:	f000 80a9 	beq.w	8004288 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004136:	e0aa      	b.n	800428e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 80a6 	beq.w	800428c <HCD_RXQLVL_IRQHandler+0x19a>
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	212c      	movs	r1, #44	; 0x2c
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	4413      	add	r3, r2
 800414c:	3344      	adds	r3, #68	; 0x44
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 809b 	beq.w	800428c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	3350      	adds	r3, #80	; 0x50
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	441a      	add	r2, r3
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	202c      	movs	r0, #44	; 0x2c
 8004170:	fb00 f303 	mul.w	r3, r0, r3
 8004174:	440b      	add	r3, r1
 8004176:	334c      	adds	r3, #76	; 0x4c
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d87a      	bhi.n	8004274 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	212c      	movs	r1, #44	; 0x2c
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	4413      	add	r3, r2
 800418e:	3344      	adds	r3, #68	; 0x44
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	b292      	uxth	r2, r2
 8004196:	4619      	mov	r1, r3
 8004198:	f002 faef 	bl	800677a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	212c      	movs	r1, #44	; 0x2c
 80041a2:	fb01 f303 	mul.w	r3, r1, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	3344      	adds	r3, #68	; 0x44
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	441a      	add	r2, r3
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	202c      	movs	r0, #44	; 0x2c
 80041b6:	fb00 f303 	mul.w	r3, r0, r3
 80041ba:	440b      	add	r3, r1
 80041bc:	3344      	adds	r3, #68	; 0x44
 80041be:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	212c      	movs	r1, #44	; 0x2c
 80041c6:	fb01 f303 	mul.w	r3, r1, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	3350      	adds	r3, #80	; 0x50
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	441a      	add	r2, r3
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	202c      	movs	r0, #44	; 0x2c
 80041da:	fb00 f303 	mul.w	r3, r0, r3
 80041de:	440b      	add	r3, r1
 80041e0:	3350      	adds	r3, #80	; 0x50
 80041e2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	0cdb      	lsrs	r3, r3, #19
 80041f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041f8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	212c      	movs	r1, #44	; 0x2c
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	4413      	add	r3, r2
 8004206:	3340      	adds	r3, #64	; 0x40
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4293      	cmp	r3, r2
 8004210:	d13c      	bne.n	800428c <HCD_RXQLVL_IRQHandler+0x19a>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d039      	beq.n	800428c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	4413      	add	r3, r2
 8004220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800422e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004236:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	6a3b      	ldr	r3, [r7, #32]
 800423e:	4413      	add	r3, r2
 8004240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004244:	461a      	mov	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	212c      	movs	r1, #44	; 0x2c
 8004250:	fb01 f303 	mul.w	r3, r1, r3
 8004254:	4413      	add	r3, r2
 8004256:	3354      	adds	r3, #84	; 0x54
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	f083 0301 	eor.w	r3, r3, #1
 800425e:	b2d8      	uxtb	r0, r3
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	212c      	movs	r1, #44	; 0x2c
 8004266:	fb01 f303 	mul.w	r3, r1, r3
 800426a:	4413      	add	r3, r2
 800426c:	3354      	adds	r3, #84	; 0x54
 800426e:	4602      	mov	r2, r0
 8004270:	701a      	strb	r2, [r3, #0]
      break;
 8004272:	e00b      	b.n	800428c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	212c      	movs	r1, #44	; 0x2c
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	4413      	add	r3, r2
 8004280:	3360      	adds	r3, #96	; 0x60
 8004282:	2204      	movs	r2, #4
 8004284:	701a      	strb	r2, [r3, #0]
      break;
 8004286:	e001      	b.n	800428c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004288:	bf00      	nop
 800428a:	e000      	b.n	800428e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800428c:	bf00      	nop
  }
}
 800428e:	bf00      	nop
 8004290:	3728      	adds	r7, #40	; 0x28
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b086      	sub	sp, #24
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80042c2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d10b      	bne.n	80042e6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d102      	bne.n	80042de <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f005 f851 	bl	8009380 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	f043 0302 	orr.w	r3, r3, #2
 80042e4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d132      	bne.n	8004356 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f043 0308 	orr.w	r3, r3, #8
 80042f6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d126      	bne.n	8004350 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	2b02      	cmp	r3, #2
 8004308:	d113      	bne.n	8004332 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004310:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004314:	d106      	bne.n	8004324 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2102      	movs	r1, #2
 800431c:	4618      	mov	r0, r3
 800431e:	f002 fb67 	bl	80069f0 <USB_InitFSLSPClkSel>
 8004322:	e011      	b.n	8004348 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2101      	movs	r1, #1
 800432a:	4618      	mov	r0, r3
 800432c:	f002 fb60 	bl	80069f0 <USB_InitFSLSPClkSel>
 8004330:	e00a      	b.n	8004348 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d106      	bne.n	8004348 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004340:	461a      	mov	r2, r3
 8004342:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004346:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f005 f843 	bl	80093d4 <HAL_HCD_PortEnabled_Callback>
 800434e:	e002      	b.n	8004356 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f005 f84d 	bl	80093f0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b20      	cmp	r3, #32
 800435e:	d103      	bne.n	8004368 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f043 0320 	orr.w	r3, r3, #32
 8004366:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800436e:	461a      	mov	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	6013      	str	r3, [r2, #0]
}
 8004374:	bf00      	nop
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e12b      	b.n	80045e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f7fc fd6c 	bl	8000e80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2224      	movs	r2, #36	; 0x24
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043e0:	f001 f9fc 	bl	80057dc <HAL_RCC_GetPCLK1Freq>
 80043e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4a81      	ldr	r2, [pc, #516]	; (80045f0 <HAL_I2C_Init+0x274>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d807      	bhi.n	8004400 <HAL_I2C_Init+0x84>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4a80      	ldr	r2, [pc, #512]	; (80045f4 <HAL_I2C_Init+0x278>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	bf94      	ite	ls
 80043f8:	2301      	movls	r3, #1
 80043fa:	2300      	movhi	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	e006      	b.n	800440e <HAL_I2C_Init+0x92>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4a7d      	ldr	r2, [pc, #500]	; (80045f8 <HAL_I2C_Init+0x27c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	bf94      	ite	ls
 8004408:	2301      	movls	r3, #1
 800440a:	2300      	movhi	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e0e7      	b.n	80045e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4a78      	ldr	r2, [pc, #480]	; (80045fc <HAL_I2C_Init+0x280>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	0c9b      	lsrs	r3, r3, #18
 8004420:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4a6a      	ldr	r2, [pc, #424]	; (80045f0 <HAL_I2C_Init+0x274>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d802      	bhi.n	8004450 <HAL_I2C_Init+0xd4>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	3301      	adds	r3, #1
 800444e:	e009      	b.n	8004464 <HAL_I2C_Init+0xe8>
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004456:	fb02 f303 	mul.w	r3, r2, r3
 800445a:	4a69      	ldr	r2, [pc, #420]	; (8004600 <HAL_I2C_Init+0x284>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	099b      	lsrs	r3, r3, #6
 8004462:	3301      	adds	r3, #1
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	430b      	orrs	r3, r1
 800446a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004476:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	495c      	ldr	r1, [pc, #368]	; (80045f0 <HAL_I2C_Init+0x274>)
 8004480:	428b      	cmp	r3, r1
 8004482:	d819      	bhi.n	80044b8 <HAL_I2C_Init+0x13c>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1e59      	subs	r1, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004492:	1c59      	adds	r1, r3, #1
 8004494:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004498:	400b      	ands	r3, r1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_I2C_Init+0x138>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1e59      	subs	r1, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80044ac:	3301      	adds	r3, #1
 80044ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b2:	e051      	b.n	8004558 <HAL_I2C_Init+0x1dc>
 80044b4:	2304      	movs	r3, #4
 80044b6:	e04f      	b.n	8004558 <HAL_I2C_Init+0x1dc>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d111      	bne.n	80044e4 <HAL_I2C_Init+0x168>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1e58      	subs	r0, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6859      	ldr	r1, [r3, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	440b      	add	r3, r1
 80044ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d2:	3301      	adds	r3, #1
 80044d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d8:	2b00      	cmp	r3, #0
 80044da:	bf0c      	ite	eq
 80044dc:	2301      	moveq	r3, #1
 80044de:	2300      	movne	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	e012      	b.n	800450a <HAL_I2C_Init+0x18e>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	1e58      	subs	r0, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6859      	ldr	r1, [r3, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	0099      	lsls	r1, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fa:	3301      	adds	r3, #1
 80044fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <HAL_I2C_Init+0x196>
 800450e:	2301      	movs	r3, #1
 8004510:	e022      	b.n	8004558 <HAL_I2C_Init+0x1dc>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10e      	bne.n	8004538 <HAL_I2C_Init+0x1bc>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1e58      	subs	r0, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6859      	ldr	r1, [r3, #4]
 8004522:	460b      	mov	r3, r1
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	440b      	add	r3, r1
 8004528:	fbb0 f3f3 	udiv	r3, r0, r3
 800452c:	3301      	adds	r3, #1
 800452e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004536:	e00f      	b.n	8004558 <HAL_I2C_Init+0x1dc>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	1e58      	subs	r0, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6859      	ldr	r1, [r3, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	0099      	lsls	r1, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	fbb0 f3f3 	udiv	r3, r0, r3
 800454e:	3301      	adds	r3, #1
 8004550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	6809      	ldr	r1, [r1, #0]
 800455c:	4313      	orrs	r3, r2
 800455e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69da      	ldr	r2, [r3, #28]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6911      	ldr	r1, [r2, #16]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68d2      	ldr	r2, [r2, #12]
 8004592:	4311      	orrs	r1, r2
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	430b      	orrs	r3, r1
 800459a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695a      	ldr	r2, [r3, #20]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2220      	movs	r2, #32
 80045d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	000186a0 	.word	0x000186a0
 80045f4:	001e847f 	.word	0x001e847f
 80045f8:	003d08ff 	.word	0x003d08ff
 80045fc:	431bde83 	.word	0x431bde83
 8004600:	10624dd3 	.word	0x10624dd3

08004604 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e128      	b.n	8004868 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a90      	ldr	r2, [pc, #576]	; (8004870 <HAL_I2S_Init+0x26c>)
 800462e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fc fc6d 	bl	8000f10 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2202      	movs	r2, #2
 800463a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800464c:	f023 030f 	bic.w	r3, r3, #15
 8004650:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2202      	movs	r2, #2
 8004658:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d060      	beq.n	8004724 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d102      	bne.n	8004670 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800466a:	2310      	movs	r3, #16
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	e001      	b.n	8004674 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004670:	2320      	movs	r3, #32
 8004672:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b20      	cmp	r3, #32
 800467a:	d802      	bhi.n	8004682 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004682:	2001      	movs	r0, #1
 8004684:	f001 f9a0 	bl	80059c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004688:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004692:	d125      	bne.n	80046e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d010      	beq.n	80046be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	461a      	mov	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b8:	3305      	adds	r3, #5
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	e01f      	b.n	80046fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	461a      	mov	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046da:	3305      	adds	r3, #5
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	e00e      	b.n	80046fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e8:	4613      	mov	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4413      	add	r3, r2
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	461a      	mov	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fa:	3305      	adds	r3, #5
 80046fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4a5c      	ldr	r2, [pc, #368]	; (8004874 <HAL_I2S_Init+0x270>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	08db      	lsrs	r3, r3, #3
 8004708:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	e003      	b.n	800472c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004724:	2302      	movs	r3, #2
 8004726:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d902      	bls.n	8004738 <HAL_I2S_Init+0x134>
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2bff      	cmp	r3, #255	; 0xff
 8004736:	d907      	bls.n	8004748 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473c:	f043 0210 	orr.w	r2, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e08f      	b.n	8004868 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	ea42 0103 	orr.w	r1, r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	430a      	orrs	r2, r1
 800475a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004766:	f023 030f 	bic.w	r3, r3, #15
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6851      	ldr	r1, [r2, #4]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6892      	ldr	r2, [r2, #8]
 8004772:	4311      	orrs	r1, r2
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	68d2      	ldr	r2, [r2, #12]
 8004778:	4311      	orrs	r1, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6992      	ldr	r2, [r2, #24]
 800477e:	430a      	orrs	r2, r1
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800478a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d161      	bne.n	8004858 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a38      	ldr	r2, [pc, #224]	; (8004878 <HAL_I2S_Init+0x274>)
 8004798:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a37      	ldr	r2, [pc, #220]	; (800487c <HAL_I2S_Init+0x278>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d101      	bne.n	80047a8 <HAL_I2S_Init+0x1a4>
 80047a4:	4b36      	ldr	r3, [pc, #216]	; (8004880 <HAL_I2S_Init+0x27c>)
 80047a6:	e001      	b.n	80047ac <HAL_I2S_Init+0x1a8>
 80047a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6812      	ldr	r2, [r2, #0]
 80047b2:	4932      	ldr	r1, [pc, #200]	; (800487c <HAL_I2S_Init+0x278>)
 80047b4:	428a      	cmp	r2, r1
 80047b6:	d101      	bne.n	80047bc <HAL_I2S_Init+0x1b8>
 80047b8:	4a31      	ldr	r2, [pc, #196]	; (8004880 <HAL_I2S_Init+0x27c>)
 80047ba:	e001      	b.n	80047c0 <HAL_I2S_Init+0x1bc>
 80047bc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80047c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80047c4:	f023 030f 	bic.w	r3, r3, #15
 80047c8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a2b      	ldr	r2, [pc, #172]	; (800487c <HAL_I2S_Init+0x278>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d101      	bne.n	80047d8 <HAL_I2S_Init+0x1d4>
 80047d4:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <HAL_I2S_Init+0x27c>)
 80047d6:	e001      	b.n	80047dc <HAL_I2S_Init+0x1d8>
 80047d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047dc:	2202      	movs	r2, #2
 80047de:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a25      	ldr	r2, [pc, #148]	; (800487c <HAL_I2S_Init+0x278>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d101      	bne.n	80047ee <HAL_I2S_Init+0x1ea>
 80047ea:	4b25      	ldr	r3, [pc, #148]	; (8004880 <HAL_I2S_Init+0x27c>)
 80047ec:	e001      	b.n	80047f2 <HAL_I2S_Init+0x1ee>
 80047ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047fe:	d003      	beq.n	8004808 <HAL_I2S_Init+0x204>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d103      	bne.n	8004810 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	e001      	b.n	8004814 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004810:	2300      	movs	r3, #0
 8004812:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800481e:	4313      	orrs	r3, r2
 8004820:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004828:	4313      	orrs	r3, r2
 800482a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004832:	4313      	orrs	r3, r2
 8004834:	b29a      	uxth	r2, r3
 8004836:	897b      	ldrh	r3, [r7, #10]
 8004838:	4313      	orrs	r3, r2
 800483a:	b29b      	uxth	r3, r3
 800483c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004840:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a0d      	ldr	r2, [pc, #52]	; (800487c <HAL_I2S_Init+0x278>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d101      	bne.n	8004850 <HAL_I2S_Init+0x24c>
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <HAL_I2S_Init+0x27c>)
 800484e:	e001      	b.n	8004854 <HAL_I2S_Init+0x250>
 8004850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004854:	897a      	ldrh	r2, [r7, #10]
 8004856:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3720      	adds	r7, #32
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	0800497b 	.word	0x0800497b
 8004874:	cccccccd 	.word	0xcccccccd
 8004878:	08004a91 	.word	0x08004a91
 800487c:	40003800 	.word	0x40003800
 8004880:	40003400 	.word	0x40003400

08004884 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	881a      	ldrh	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	1c9a      	adds	r2, r3, #2
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10e      	bne.n	8004914 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004904:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7ff ffb8 	bl	8004884 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	b292      	uxth	r2, r2
 8004930:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004936:	1c9a      	adds	r2, r3, #2
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10e      	bne.n	8004972 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004962:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ff93 	bl	8004898 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004972:	bf00      	nop
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b04      	cmp	r3, #4
 8004994:	d13a      	bne.n	8004a0c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b01      	cmp	r3, #1
 800499e:	d109      	bne.n	80049b4 <I2S_IRQHandler+0x3a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d102      	bne.n	80049b4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff ffb4 	bl	800491c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d126      	bne.n	8004a0c <I2S_IRQHandler+0x92>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	d11f      	bne.n	8004a0c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049dc:	2300      	movs	r3, #0
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	f043 0202 	orr.w	r2, r3, #2
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff ff50 	bl	80048ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d136      	bne.n	8004a86 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d109      	bne.n	8004a36 <I2S_IRQHandler+0xbc>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	2b80      	cmp	r3, #128	; 0x80
 8004a2e:	d102      	bne.n	8004a36 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff ff45 	bl	80048c0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f003 0308 	and.w	r3, r3, #8
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d122      	bne.n	8004a86 <I2S_IRQHandler+0x10c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d11b      	bne.n	8004a86 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a5c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	f043 0204 	orr.w	r2, r3, #4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff ff13 	bl	80048ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a86:	bf00      	nop
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b088      	sub	sp, #32
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4aa2      	ldr	r2, [pc, #648]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d101      	bne.n	8004aae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004aaa:	4ba2      	ldr	r3, [pc, #648]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004aac:	e001      	b.n	8004ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a9b      	ldr	r2, [pc, #620]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d101      	bne.n	8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004ac8:	4b9a      	ldr	r3, [pc, #616]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004aca:	e001      	b.n	8004ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004adc:	d004      	beq.n	8004ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f040 8099 	bne.w	8004c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d107      	bne.n	8004b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f925 	bl	8004d4c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d107      	bne.n	8004b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f9c8 	bl	8004eac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d13a      	bne.n	8004b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f003 0320 	and.w	r3, r3, #32
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d035      	beq.n	8004b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a7e      	ldr	r2, [pc, #504]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d101      	bne.n	8004b3e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004b3a:	4b7e      	ldr	r3, [pc, #504]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b3c:	e001      	b.n	8004b42 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004b3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4979      	ldr	r1, [pc, #484]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b4a:	428b      	cmp	r3, r1
 8004b4c:	d101      	bne.n	8004b52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004b4e:	4b79      	ldr	r3, [pc, #484]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b50:	e001      	b.n	8004b56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004b52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b5a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	f043 0202 	orr.w	r2, r3, #2
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fe88 	bl	80048ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	f040 80be 	bne.w	8004d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f000 80b8 	beq.w	8004d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bc2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a59      	ldr	r2, [pc, #356]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d101      	bne.n	8004bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004bce:	4b59      	ldr	r3, [pc, #356]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bd0:	e001      	b.n	8004bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4954      	ldr	r1, [pc, #336]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bde:	428b      	cmp	r3, r1
 8004be0:	d101      	bne.n	8004be6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004be2:	4b54      	ldr	r3, [pc, #336]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004be4:	e001      	b.n	8004bea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004be6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60bb      	str	r3, [r7, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	60bb      	str	r3, [r7, #8]
 8004bfc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0a:	f043 0204 	orr.w	r2, r3, #4
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff fe4a 	bl	80048ac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c18:	e084      	b.n	8004d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d107      	bne.n	8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f8be 	bl	8004db0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d107      	bne.n	8004c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8fd 	bl	8004e48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c54:	2b40      	cmp	r3, #64	; 0x40
 8004c56:	d12f      	bne.n	8004cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d02a      	beq.n	8004cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c70:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a2e      	ldr	r2, [pc, #184]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d101      	bne.n	8004c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004c7c:	4b2d      	ldr	r3, [pc, #180]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c7e:	e001      	b.n	8004c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4929      	ldr	r1, [pc, #164]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c8c:	428b      	cmp	r3, r1
 8004c8e:	d101      	bne.n	8004c94 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004c90:	4b28      	ldr	r3, [pc, #160]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c92:	e001      	b.n	8004c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004c94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c9c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004caa:	f043 0202 	orr.w	r2, r3, #2
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff fdfa 	bl	80048ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d131      	bne.n	8004d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d02c      	beq.n	8004d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d101      	bne.n	8004cda <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004cd6:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cd8:	e001      	b.n	8004cde <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004cda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4912      	ldr	r1, [pc, #72]	; (8004d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ce6:	428b      	cmp	r3, r1
 8004ce8:	d101      	bne.n	8004cee <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004cea:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cec:	e001      	b.n	8004cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004cee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cf2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cf6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d06:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d14:	f043 0204 	orr.w	r2, r3, #4
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff fdc5 	bl	80048ac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d22:	e000      	b.n	8004d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d24:	bf00      	nop
}
 8004d26:	bf00      	nop
 8004d28:	3720      	adds	r7, #32
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40003800 	.word	0x40003800
 8004d34:	40003400 	.word	0x40003400

08004d38 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	1c99      	adds	r1, r3, #2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6251      	str	r1, [r2, #36]	; 0x24
 8004d5e:	881a      	ldrh	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d113      	bne.n	8004da6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d106      	bne.n	8004da6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff ffc9 	bl	8004d38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	1c99      	adds	r1, r3, #2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6251      	str	r1, [r2, #36]	; 0x24
 8004dc2:	8819      	ldrh	r1, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <I2SEx_TxISR_I2SExt+0x90>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d101      	bne.n	8004dd2 <I2SEx_TxISR_I2SExt+0x22>
 8004dce:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <I2SEx_TxISR_I2SExt+0x94>)
 8004dd0:	e001      	b.n	8004dd6 <I2SEx_TxISR_I2SExt+0x26>
 8004dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dd6:	460a      	mov	r2, r1
 8004dd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d121      	bne.n	8004e36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a12      	ldr	r2, [pc, #72]	; (8004e40 <I2SEx_TxISR_I2SExt+0x90>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d101      	bne.n	8004e00 <I2SEx_TxISR_I2SExt+0x50>
 8004dfc:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <I2SEx_TxISR_I2SExt+0x94>)
 8004dfe:	e001      	b.n	8004e04 <I2SEx_TxISR_I2SExt+0x54>
 8004e00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	490d      	ldr	r1, [pc, #52]	; (8004e40 <I2SEx_TxISR_I2SExt+0x90>)
 8004e0c:	428b      	cmp	r3, r1
 8004e0e:	d101      	bne.n	8004e14 <I2SEx_TxISR_I2SExt+0x64>
 8004e10:	4b0c      	ldr	r3, [pc, #48]	; (8004e44 <I2SEx_TxISR_I2SExt+0x94>)
 8004e12:	e001      	b.n	8004e18 <I2SEx_TxISR_I2SExt+0x68>
 8004e14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d106      	bne.n	8004e36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff ff81 	bl	8004d38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40003800 	.word	0x40003800
 8004e44:	40003400 	.word	0x40003400

08004e48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68d8      	ldr	r0, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	1c99      	adds	r1, r3, #2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004e60:	b282      	uxth	r2, r0
 8004e62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d113      	bne.n	8004ea4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff ff4a 	bl	8004d38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ea4:	bf00      	nop
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a20      	ldr	r2, [pc, #128]	; (8004f3c <I2SEx_RxISR_I2SExt+0x90>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d101      	bne.n	8004ec2 <I2SEx_RxISR_I2SExt+0x16>
 8004ebe:	4b20      	ldr	r3, [pc, #128]	; (8004f40 <I2SEx_RxISR_I2SExt+0x94>)
 8004ec0:	e001      	b.n	8004ec6 <I2SEx_RxISR_I2SExt+0x1a>
 8004ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ec6:	68d8      	ldr	r0, [r3, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	1c99      	adds	r1, r3, #2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ed2:	b282      	uxth	r2, r0
 8004ed4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d121      	bne.n	8004f32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a12      	ldr	r2, [pc, #72]	; (8004f3c <I2SEx_RxISR_I2SExt+0x90>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d101      	bne.n	8004efc <I2SEx_RxISR_I2SExt+0x50>
 8004ef8:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <I2SEx_RxISR_I2SExt+0x94>)
 8004efa:	e001      	b.n	8004f00 <I2SEx_RxISR_I2SExt+0x54>
 8004efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	490d      	ldr	r1, [pc, #52]	; (8004f3c <I2SEx_RxISR_I2SExt+0x90>)
 8004f08:	428b      	cmp	r3, r1
 8004f0a:	d101      	bne.n	8004f10 <I2SEx_RxISR_I2SExt+0x64>
 8004f0c:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <I2SEx_RxISR_I2SExt+0x94>)
 8004f0e:	e001      	b.n	8004f14 <I2SEx_RxISR_I2SExt+0x68>
 8004f10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d106      	bne.n	8004f32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff ff03 	bl	8004d38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40003800 	.word	0x40003800
 8004f40:	40003400 	.word	0x40003400

08004f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d101      	bne.n	8004f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e264      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d075      	beq.n	800504e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f62:	4ba3      	ldr	r3, [pc, #652]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 030c 	and.w	r3, r3, #12
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d00c      	beq.n	8004f88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f6e:	4ba0      	ldr	r3, [pc, #640]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f76:	2b08      	cmp	r3, #8
 8004f78:	d112      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f7a:	4b9d      	ldr	r3, [pc, #628]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f86:	d10b      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f88:	4b99      	ldr	r3, [pc, #612]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d05b      	beq.n	800504c <HAL_RCC_OscConfig+0x108>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d157      	bne.n	800504c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e23f      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa8:	d106      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x74>
 8004faa:	4b91      	ldr	r3, [pc, #580]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a90      	ldr	r2, [pc, #576]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e01d      	b.n	8004ff4 <HAL_RCC_OscConfig+0xb0>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fc0:	d10c      	bne.n	8004fdc <HAL_RCC_OscConfig+0x98>
 8004fc2:	4b8b      	ldr	r3, [pc, #556]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a8a      	ldr	r2, [pc, #552]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8004fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	4b88      	ldr	r3, [pc, #544]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a87      	ldr	r2, [pc, #540]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8004fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	e00b      	b.n	8004ff4 <HAL_RCC_OscConfig+0xb0>
 8004fdc:	4b84      	ldr	r3, [pc, #528]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a83      	ldr	r2, [pc, #524]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8004fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	4b81      	ldr	r3, [pc, #516]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a80      	ldr	r2, [pc, #512]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8004fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d013      	beq.n	8005024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7fc f9b4 	bl	8001368 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005004:	f7fc f9b0 	bl	8001368 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b64      	cmp	r3, #100	; 0x64
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e204      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005016:	4b76      	ldr	r3, [pc, #472]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0f0      	beq.n	8005004 <HAL_RCC_OscConfig+0xc0>
 8005022:	e014      	b.n	800504e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005024:	f7fc f9a0 	bl	8001368 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800502c:	f7fc f99c 	bl	8001368 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b64      	cmp	r3, #100	; 0x64
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e1f0      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800503e:	4b6c      	ldr	r3, [pc, #432]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0xe8>
 800504a:	e000      	b.n	800504e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800504c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d063      	beq.n	8005122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800505a:	4b65      	ldr	r3, [pc, #404]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 030c 	and.w	r3, r3, #12
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00b      	beq.n	800507e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005066:	4b62      	ldr	r3, [pc, #392]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800506e:	2b08      	cmp	r3, #8
 8005070:	d11c      	bne.n	80050ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005072:	4b5f      	ldr	r3, [pc, #380]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d116      	bne.n	80050ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800507e:	4b5c      	ldr	r3, [pc, #368]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d005      	beq.n	8005096 <HAL_RCC_OscConfig+0x152>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d001      	beq.n	8005096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e1c4      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005096:	4b56      	ldr	r3, [pc, #344]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	4952      	ldr	r1, [pc, #328]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050aa:	e03a      	b.n	8005122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d020      	beq.n	80050f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050b4:	4b4f      	ldr	r3, [pc, #316]	; (80051f4 <HAL_RCC_OscConfig+0x2b0>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ba:	f7fc f955 	bl	8001368 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050c2:	f7fc f951 	bl	8001368 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e1a5      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d4:	4b46      	ldr	r3, [pc, #280]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e0:	4b43      	ldr	r3, [pc, #268]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	4940      	ldr	r1, [pc, #256]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	600b      	str	r3, [r1, #0]
 80050f4:	e015      	b.n	8005122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f6:	4b3f      	ldr	r3, [pc, #252]	; (80051f4 <HAL_RCC_OscConfig+0x2b0>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fc:	f7fc f934 	bl	8001368 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005104:	f7fc f930 	bl	8001368 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e184      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005116:	4b36      	ldr	r3, [pc, #216]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d030      	beq.n	8005190 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d016      	beq.n	8005164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005136:	4b30      	ldr	r3, [pc, #192]	; (80051f8 <HAL_RCC_OscConfig+0x2b4>)
 8005138:	2201      	movs	r2, #1
 800513a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800513c:	f7fc f914 	bl	8001368 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005144:	f7fc f910 	bl	8001368 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e164      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005156:	4b26      	ldr	r3, [pc, #152]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8005158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCC_OscConfig+0x200>
 8005162:	e015      	b.n	8005190 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005164:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <HAL_RCC_OscConfig+0x2b4>)
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800516a:	f7fc f8fd 	bl	8001368 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005172:	f7fc f8f9 	bl	8001368 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e14d      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005184:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 8005186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1f0      	bne.n	8005172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 80a0 	beq.w	80052de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800519e:	2300      	movs	r3, #0
 80051a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051a2:	4b13      	ldr	r3, [pc, #76]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10f      	bne.n	80051ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ae:	2300      	movs	r3, #0
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	4a0e      	ldr	r2, [pc, #56]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 80051b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051bc:	6413      	str	r3, [r2, #64]	; 0x40
 80051be:	4b0c      	ldr	r3, [pc, #48]	; (80051f0 <HAL_RCC_OscConfig+0x2ac>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c6:	60bb      	str	r3, [r7, #8]
 80051c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ca:	2301      	movs	r3, #1
 80051cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ce:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <HAL_RCC_OscConfig+0x2b8>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d121      	bne.n	800521e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051da:	4b08      	ldr	r3, [pc, #32]	; (80051fc <HAL_RCC_OscConfig+0x2b8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a07      	ldr	r2, [pc, #28]	; (80051fc <HAL_RCC_OscConfig+0x2b8>)
 80051e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051e6:	f7fc f8bf 	bl	8001368 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ec:	e011      	b.n	8005212 <HAL_RCC_OscConfig+0x2ce>
 80051ee:	bf00      	nop
 80051f0:	40023800 	.word	0x40023800
 80051f4:	42470000 	.word	0x42470000
 80051f8:	42470e80 	.word	0x42470e80
 80051fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005200:	f7fc f8b2 	bl	8001368 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e106      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005212:	4b85      	ldr	r3, [pc, #532]	; (8005428 <HAL_RCC_OscConfig+0x4e4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d106      	bne.n	8005234 <HAL_RCC_OscConfig+0x2f0>
 8005226:	4b81      	ldr	r3, [pc, #516]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	4a80      	ldr	r2, [pc, #512]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 800522c:	f043 0301 	orr.w	r3, r3, #1
 8005230:	6713      	str	r3, [r2, #112]	; 0x70
 8005232:	e01c      	b.n	800526e <HAL_RCC_OscConfig+0x32a>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	2b05      	cmp	r3, #5
 800523a:	d10c      	bne.n	8005256 <HAL_RCC_OscConfig+0x312>
 800523c:	4b7b      	ldr	r3, [pc, #492]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	4a7a      	ldr	r2, [pc, #488]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 8005242:	f043 0304 	orr.w	r3, r3, #4
 8005246:	6713      	str	r3, [r2, #112]	; 0x70
 8005248:	4b78      	ldr	r3, [pc, #480]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 800524a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524c:	4a77      	ldr	r2, [pc, #476]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	6713      	str	r3, [r2, #112]	; 0x70
 8005254:	e00b      	b.n	800526e <HAL_RCC_OscConfig+0x32a>
 8005256:	4b75      	ldr	r3, [pc, #468]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 8005258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525a:	4a74      	ldr	r2, [pc, #464]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	6713      	str	r3, [r2, #112]	; 0x70
 8005262:	4b72      	ldr	r3, [pc, #456]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005266:	4a71      	ldr	r2, [pc, #452]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 8005268:	f023 0304 	bic.w	r3, r3, #4
 800526c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d015      	beq.n	80052a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005276:	f7fc f877 	bl	8001368 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800527c:	e00a      	b.n	8005294 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800527e:	f7fc f873 	bl	8001368 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	f241 3288 	movw	r2, #5000	; 0x1388
 800528c:	4293      	cmp	r3, r2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e0c5      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005294:	4b65      	ldr	r3, [pc, #404]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 8005296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d0ee      	beq.n	800527e <HAL_RCC_OscConfig+0x33a>
 80052a0:	e014      	b.n	80052cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a2:	f7fc f861 	bl	8001368 <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a8:	e00a      	b.n	80052c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052aa:	f7fc f85d 	bl	8001368 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e0af      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052c0:	4b5a      	ldr	r3, [pc, #360]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 80052c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1ee      	bne.n	80052aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d105      	bne.n	80052de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d2:	4b56      	ldr	r3, [pc, #344]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	4a55      	ldr	r2, [pc, #340]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 80052d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 809b 	beq.w	800541e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052e8:	4b50      	ldr	r3, [pc, #320]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 030c 	and.w	r3, r3, #12
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d05c      	beq.n	80053ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d141      	bne.n	8005380 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052fc:	4b4c      	ldr	r3, [pc, #304]	; (8005430 <HAL_RCC_OscConfig+0x4ec>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005302:	f7fc f831 	bl	8001368 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800530a:	f7fc f82d 	bl	8001368 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e081      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531c:	4b43      	ldr	r3, [pc, #268]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f0      	bne.n	800530a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	019b      	lsls	r3, r3, #6
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	085b      	lsrs	r3, r3, #1
 8005340:	3b01      	subs	r3, #1
 8005342:	041b      	lsls	r3, r3, #16
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	061b      	lsls	r3, r3, #24
 800534c:	4937      	ldr	r1, [pc, #220]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 800534e:	4313      	orrs	r3, r2
 8005350:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005352:	4b37      	ldr	r3, [pc, #220]	; (8005430 <HAL_RCC_OscConfig+0x4ec>)
 8005354:	2201      	movs	r2, #1
 8005356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005358:	f7fc f806 	bl	8001368 <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005360:	f7fc f802 	bl	8001368 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e056      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005372:	4b2e      	ldr	r3, [pc, #184]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0x41c>
 800537e:	e04e      	b.n	800541e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005380:	4b2b      	ldr	r3, [pc, #172]	; (8005430 <HAL_RCC_OscConfig+0x4ec>)
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005386:	f7fb ffef 	bl	8001368 <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800538e:	f7fb ffeb 	bl	8001368 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e03f      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053a0:	4b22      	ldr	r3, [pc, #136]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1f0      	bne.n	800538e <HAL_RCC_OscConfig+0x44a>
 80053ac:	e037      	b.n	800541e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e032      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053ba:	4b1c      	ldr	r3, [pc, #112]	; (800542c <HAL_RCC_OscConfig+0x4e8>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d028      	beq.n	800541a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d121      	bne.n	800541a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d11a      	bne.n	800541a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053ea:	4013      	ands	r3, r2
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053f0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d111      	bne.n	800541a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005400:	085b      	lsrs	r3, r3, #1
 8005402:	3b01      	subs	r3, #1
 8005404:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005406:	429a      	cmp	r2, r3
 8005408:	d107      	bne.n	800541a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005416:	429a      	cmp	r2, r3
 8005418:	d001      	beq.n	800541e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40007000 	.word	0x40007000
 800542c:	40023800 	.word	0x40023800
 8005430:	42470060 	.word	0x42470060

08005434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e0cc      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005448:	4b68      	ldr	r3, [pc, #416]	; (80055ec <HAL_RCC_ClockConfig+0x1b8>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d90c      	bls.n	8005470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005456:	4b65      	ldr	r3, [pc, #404]	; (80055ec <HAL_RCC_ClockConfig+0x1b8>)
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800545e:	4b63      	ldr	r3, [pc, #396]	; (80055ec <HAL_RCC_ClockConfig+0x1b8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	429a      	cmp	r2, r3
 800546a:	d001      	beq.n	8005470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e0b8      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d020      	beq.n	80054be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005488:	4b59      	ldr	r3, [pc, #356]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	4a58      	ldr	r2, [pc, #352]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054a0:	4b53      	ldr	r3, [pc, #332]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	4a52      	ldr	r2, [pc, #328]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ac:	4b50      	ldr	r3, [pc, #320]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	494d      	ldr	r1, [pc, #308]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d044      	beq.n	8005554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d107      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054d2:	4b47      	ldr	r3, [pc, #284]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d119      	bne.n	8005512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e07f      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d003      	beq.n	80054f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d107      	bne.n	8005502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f2:	4b3f      	ldr	r3, [pc, #252]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e06f      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005502:	4b3b      	ldr	r3, [pc, #236]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e067      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005512:	4b37      	ldr	r3, [pc, #220]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f023 0203 	bic.w	r2, r3, #3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4934      	ldr	r1, [pc, #208]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005520:	4313      	orrs	r3, r2
 8005522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005524:	f7fb ff20 	bl	8001368 <HAL_GetTick>
 8005528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800552a:	e00a      	b.n	8005542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800552c:	f7fb ff1c 	bl	8001368 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	f241 3288 	movw	r2, #5000	; 0x1388
 800553a:	4293      	cmp	r3, r2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e04f      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005542:	4b2b      	ldr	r3, [pc, #172]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 020c 	and.w	r2, r3, #12
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	429a      	cmp	r2, r3
 8005552:	d1eb      	bne.n	800552c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005554:	4b25      	ldr	r3, [pc, #148]	; (80055ec <HAL_RCC_ClockConfig+0x1b8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d20c      	bcs.n	800557c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005562:	4b22      	ldr	r3, [pc, #136]	; (80055ec <HAL_RCC_ClockConfig+0x1b8>)
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800556a:	4b20      	ldr	r3, [pc, #128]	; (80055ec <HAL_RCC_ClockConfig+0x1b8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d001      	beq.n	800557c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e032      	b.n	80055e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005588:	4b19      	ldr	r3, [pc, #100]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4916      	ldr	r1, [pc, #88]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	4313      	orrs	r3, r2
 8005598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	490e      	ldr	r1, [pc, #56]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055ba:	f000 f821 	bl	8005600 <HAL_RCC_GetSysClockFreq>
 80055be:	4602      	mov	r2, r0
 80055c0:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	091b      	lsrs	r3, r3, #4
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	490a      	ldr	r1, [pc, #40]	; (80055f4 <HAL_RCC_ClockConfig+0x1c0>)
 80055cc:	5ccb      	ldrb	r3, [r1, r3]
 80055ce:	fa22 f303 	lsr.w	r3, r2, r3
 80055d2:	4a09      	ldr	r2, [pc, #36]	; (80055f8 <HAL_RCC_ClockConfig+0x1c4>)
 80055d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055d6:	4b09      	ldr	r3, [pc, #36]	; (80055fc <HAL_RCC_ClockConfig+0x1c8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fb fe80 	bl	80012e0 <HAL_InitTick>

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40023c00 	.word	0x40023c00
 80055f0:	40023800 	.word	0x40023800
 80055f4:	08009a24 	.word	0x08009a24
 80055f8:	20000000 	.word	0x20000000
 80055fc:	20000004 	.word	0x20000004

08005600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005600:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	607b      	str	r3, [r7, #4]
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	2300      	movs	r3, #0
 8005612:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005618:	4b67      	ldr	r3, [pc, #412]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 030c 	and.w	r3, r3, #12
 8005620:	2b08      	cmp	r3, #8
 8005622:	d00d      	beq.n	8005640 <HAL_RCC_GetSysClockFreq+0x40>
 8005624:	2b08      	cmp	r3, #8
 8005626:	f200 80bd 	bhi.w	80057a4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_RCC_GetSysClockFreq+0x34>
 800562e:	2b04      	cmp	r3, #4
 8005630:	d003      	beq.n	800563a <HAL_RCC_GetSysClockFreq+0x3a>
 8005632:	e0b7      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005634:	4b61      	ldr	r3, [pc, #388]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005636:	60bb      	str	r3, [r7, #8]
       break;
 8005638:	e0b7      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800563a:	4b61      	ldr	r3, [pc, #388]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800563c:	60bb      	str	r3, [r7, #8]
      break;
 800563e:	e0b4      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005640:	4b5d      	ldr	r3, [pc, #372]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005648:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800564a:	4b5b      	ldr	r3, [pc, #364]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d04d      	beq.n	80056f2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005656:	4b58      	ldr	r3, [pc, #352]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	099b      	lsrs	r3, r3, #6
 800565c:	461a      	mov	r2, r3
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005666:	f04f 0100 	mov.w	r1, #0
 800566a:	ea02 0800 	and.w	r8, r2, r0
 800566e:	ea03 0901 	and.w	r9, r3, r1
 8005672:	4640      	mov	r0, r8
 8005674:	4649      	mov	r1, r9
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	014b      	lsls	r3, r1, #5
 8005680:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005684:	0142      	lsls	r2, r0, #5
 8005686:	4610      	mov	r0, r2
 8005688:	4619      	mov	r1, r3
 800568a:	ebb0 0008 	subs.w	r0, r0, r8
 800568e:	eb61 0109 	sbc.w	r1, r1, r9
 8005692:	f04f 0200 	mov.w	r2, #0
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	018b      	lsls	r3, r1, #6
 800569c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80056a0:	0182      	lsls	r2, r0, #6
 80056a2:	1a12      	subs	r2, r2, r0
 80056a4:	eb63 0301 	sbc.w	r3, r3, r1
 80056a8:	f04f 0000 	mov.w	r0, #0
 80056ac:	f04f 0100 	mov.w	r1, #0
 80056b0:	00d9      	lsls	r1, r3, #3
 80056b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056b6:	00d0      	lsls	r0, r2, #3
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	eb12 0208 	adds.w	r2, r2, r8
 80056c0:	eb43 0309 	adc.w	r3, r3, r9
 80056c4:	f04f 0000 	mov.w	r0, #0
 80056c8:	f04f 0100 	mov.w	r1, #0
 80056cc:	0259      	lsls	r1, r3, #9
 80056ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80056d2:	0250      	lsls	r0, r2, #9
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4610      	mov	r0, r2
 80056da:	4619      	mov	r1, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	461a      	mov	r2, r3
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	f7fa fd70 	bl	80001c8 <__aeabi_uldivmod>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4613      	mov	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	e04a      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056f2:	4b31      	ldr	r3, [pc, #196]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	099b      	lsrs	r3, r3, #6
 80056f8:	461a      	mov	r2, r3
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005702:	f04f 0100 	mov.w	r1, #0
 8005706:	ea02 0400 	and.w	r4, r2, r0
 800570a:	ea03 0501 	and.w	r5, r3, r1
 800570e:	4620      	mov	r0, r4
 8005710:	4629      	mov	r1, r5
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	014b      	lsls	r3, r1, #5
 800571c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005720:	0142      	lsls	r2, r0, #5
 8005722:	4610      	mov	r0, r2
 8005724:	4619      	mov	r1, r3
 8005726:	1b00      	subs	r0, r0, r4
 8005728:	eb61 0105 	sbc.w	r1, r1, r5
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	018b      	lsls	r3, r1, #6
 8005736:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800573a:	0182      	lsls	r2, r0, #6
 800573c:	1a12      	subs	r2, r2, r0
 800573e:	eb63 0301 	sbc.w	r3, r3, r1
 8005742:	f04f 0000 	mov.w	r0, #0
 8005746:	f04f 0100 	mov.w	r1, #0
 800574a:	00d9      	lsls	r1, r3, #3
 800574c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005750:	00d0      	lsls	r0, r2, #3
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	1912      	adds	r2, r2, r4
 8005758:	eb45 0303 	adc.w	r3, r5, r3
 800575c:	f04f 0000 	mov.w	r0, #0
 8005760:	f04f 0100 	mov.w	r1, #0
 8005764:	0299      	lsls	r1, r3, #10
 8005766:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800576a:	0290      	lsls	r0, r2, #10
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4610      	mov	r0, r2
 8005772:	4619      	mov	r1, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	461a      	mov	r2, r3
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	f7fa fd24 	bl	80001c8 <__aeabi_uldivmod>
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4613      	mov	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005788:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	0c1b      	lsrs	r3, r3, #16
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	3301      	adds	r3, #1
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	60bb      	str	r3, [r7, #8]
      break;
 80057a2:	e002      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80057a6:	60bb      	str	r3, [r7, #8]
      break;
 80057a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057aa:	68bb      	ldr	r3, [r7, #8]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80057b6:	bf00      	nop
 80057b8:	40023800 	.word	0x40023800
 80057bc:	00f42400 	.word	0x00f42400
 80057c0:	007a1200 	.word	0x007a1200

080057c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c8:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057ca:	681b      	ldr	r3, [r3, #0]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20000000 	.word	0x20000000

080057dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057e0:	f7ff fff0 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 80057e4:	4602      	mov	r2, r0
 80057e6:	4b05      	ldr	r3, [pc, #20]	; (80057fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	0a9b      	lsrs	r3, r3, #10
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	4903      	ldr	r1, [pc, #12]	; (8005800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057f2:	5ccb      	ldrb	r3, [r1, r3]
 80057f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40023800 	.word	0x40023800
 8005800:	08009a34 	.word	0x08009a34

08005804 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d105      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005828:	2b00      	cmp	r3, #0
 800582a:	d035      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800582c:	4b62      	ldr	r3, [pc, #392]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005832:	f7fb fd99 	bl	8001368 <HAL_GetTick>
 8005836:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005838:	e008      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800583a:	f7fb fd95 	bl	8001368 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e0b0      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800584c:	4b5b      	ldr	r3, [pc, #364]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f0      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	019a      	lsls	r2, r3, #6
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	071b      	lsls	r3, r3, #28
 8005864:	4955      	ldr	r1, [pc, #340]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800586c:	4b52      	ldr	r3, [pc, #328]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800586e:	2201      	movs	r2, #1
 8005870:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005872:	f7fb fd79 	bl	8001368 <HAL_GetTick>
 8005876:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005878:	e008      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800587a:	f7fb fd75 	bl	8001368 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e090      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800588c:	4b4b      	ldr	r3, [pc, #300]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0f0      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8083 	beq.w	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	4b44      	ldr	r3, [pc, #272]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	4a43      	ldr	r2, [pc, #268]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b4:	6413      	str	r3, [r2, #64]	; 0x40
 80058b6:	4b41      	ldr	r3, [pc, #260]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058c2:	4b3f      	ldr	r3, [pc, #252]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a3e      	ldr	r2, [pc, #248]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058ce:	f7fb fd4b 	bl	8001368 <HAL_GetTick>
 80058d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058d4:	e008      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058d6:	f7fb fd47 	bl	8001368 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e062      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058e8:	4b35      	ldr	r3, [pc, #212]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058f4:	4b31      	ldr	r3, [pc, #196]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d02f      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	429a      	cmp	r2, r3
 8005910:	d028      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005912:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800591c:	4b29      	ldr	r3, [pc, #164]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800591e:	2201      	movs	r2, #1
 8005920:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005922:	4b28      	ldr	r3, [pc, #160]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005928:	4a24      	ldr	r2, [pc, #144]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800592e:	4b23      	ldr	r3, [pc, #140]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b01      	cmp	r3, #1
 8005938:	d114      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800593a:	f7fb fd15 	bl	8001368 <HAL_GetTick>
 800593e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005940:	e00a      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005942:	f7fb fd11 	bl	8001368 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005950:	4293      	cmp	r3, r2
 8005952:	d901      	bls.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e02a      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005958:	4b18      	ldr	r3, [pc, #96]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800595a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0ee      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005970:	d10d      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005972:	4b12      	ldr	r3, [pc, #72]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005986:	490d      	ldr	r1, [pc, #52]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005988:	4313      	orrs	r3, r2
 800598a:	608b      	str	r3, [r1, #8]
 800598c:	e005      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800598e:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005994:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005998:	6093      	str	r3, [r2, #8]
 800599a:	4b08      	ldr	r3, [pc, #32]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800599c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a6:	4905      	ldr	r1, [pc, #20]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3718      	adds	r7, #24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	42470068 	.word	0x42470068
 80059bc:	40023800 	.word	0x40023800
 80059c0:	40007000 	.word	0x40007000
 80059c4:	42470e40 	.word	0x42470e40

080059c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b087      	sub	sp, #28
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d13e      	bne.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80059e6:	4b23      	ldr	r3, [pc, #140]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d12f      	bne.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80059fc:	4b1e      	ldr	r3, [pc, #120]	; (8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059fe:	617b      	str	r3, [r7, #20]
          break;
 8005a00:	e02f      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a02:	4b1c      	ldr	r3, [pc, #112]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a0e:	d108      	bne.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a10:	4b18      	ldr	r3, [pc, #96]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a18:	4a18      	ldr	r2, [pc, #96]	; (8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	e007      	b.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a22:	4b14      	ldr	r3, [pc, #80]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a2a:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a32:	4b10      	ldr	r3, [pc, #64]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a38:	099b      	lsrs	r3, r3, #6
 8005a3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	fb02 f303 	mul.w	r3, r2, r3
 8005a44:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005a46:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a4c:	0f1b      	lsrs	r3, r3, #28
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]
          break;
 8005a5a:	e002      	b.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
          break;
 8005a60:	bf00      	nop
        }
      }
      break;
 8005a62:	bf00      	nop
    }
  }
  return frequency;
 8005a64:	697b      	ldr	r3, [r7, #20]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	40023800 	.word	0x40023800
 8005a78:	00bb8000 	.word	0x00bb8000
 8005a7c:	007a1200 	.word	0x007a1200
 8005a80:	00f42400 	.word	0x00f42400

08005a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e07b      	b.n	8005b8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d108      	bne.n	8005ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa6:	d009      	beq.n	8005abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	61da      	str	r2, [r3, #28]
 8005aae:	e005      	b.n	8005abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fb fa82 	bl	8000fe0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b40:	ea42 0103 	orr.w	r1, r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	0c1b      	lsrs	r3, r3, #16
 8005b5a:	f003 0104 	and.w	r1, r3, #4
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	f003 0210 	and.w	r2, r3, #16
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e041      	b.n	8005c2c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d106      	bne.n	8005bc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7fb fa57 	bl	8001070 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	f000 f9b3 	bl	8005f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d109      	bne.n	8005c58 <HAL_TIM_PWM_Start+0x24>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	bf14      	ite	ne
 8005c50:	2301      	movne	r3, #1
 8005c52:	2300      	moveq	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	e022      	b.n	8005c9e <HAL_TIM_PWM_Start+0x6a>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d109      	bne.n	8005c72 <HAL_TIM_PWM_Start+0x3e>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	bf14      	ite	ne
 8005c6a:	2301      	movne	r3, #1
 8005c6c:	2300      	moveq	r3, #0
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	e015      	b.n	8005c9e <HAL_TIM_PWM_Start+0x6a>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b08      	cmp	r3, #8
 8005c76:	d109      	bne.n	8005c8c <HAL_TIM_PWM_Start+0x58>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	bf14      	ite	ne
 8005c84:	2301      	movne	r3, #1
 8005c86:	2300      	moveq	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	e008      	b.n	8005c9e <HAL_TIM_PWM_Start+0x6a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	bf14      	ite	ne
 8005c98:	2301      	movne	r3, #1
 8005c9a:	2300      	moveq	r3, #0
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e07c      	b.n	8005da0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_PWM_Start+0x82>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb4:	e013      	b.n	8005cde <HAL_TIM_PWM_Start+0xaa>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d104      	bne.n	8005cc6 <HAL_TIM_PWM_Start+0x92>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cc4:	e00b      	b.n	8005cde <HAL_TIM_PWM_Start+0xaa>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d104      	bne.n	8005cd6 <HAL_TIM_PWM_Start+0xa2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cd4:	e003      	b.n	8005cde <HAL_TIM_PWM_Start+0xaa>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 fb7a 	bl	80063e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a2d      	ldr	r2, [pc, #180]	; (8005da8 <HAL_TIM_PWM_Start+0x174>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <HAL_TIM_PWM_Start+0xcc>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a2c      	ldr	r2, [pc, #176]	; (8005dac <HAL_TIM_PWM_Start+0x178>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d101      	bne.n	8005d04 <HAL_TIM_PWM_Start+0xd0>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <HAL_TIM_PWM_Start+0xd2>
 8005d04:	2300      	movs	r3, #0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a22      	ldr	r2, [pc, #136]	; (8005da8 <HAL_TIM_PWM_Start+0x174>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d022      	beq.n	8005d6a <HAL_TIM_PWM_Start+0x136>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2c:	d01d      	beq.n	8005d6a <HAL_TIM_PWM_Start+0x136>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1f      	ldr	r2, [pc, #124]	; (8005db0 <HAL_TIM_PWM_Start+0x17c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d018      	beq.n	8005d6a <HAL_TIM_PWM_Start+0x136>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <HAL_TIM_PWM_Start+0x180>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d013      	beq.n	8005d6a <HAL_TIM_PWM_Start+0x136>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <HAL_TIM_PWM_Start+0x184>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d00e      	beq.n	8005d6a <HAL_TIM_PWM_Start+0x136>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a16      	ldr	r2, [pc, #88]	; (8005dac <HAL_TIM_PWM_Start+0x178>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d009      	beq.n	8005d6a <HAL_TIM_PWM_Start+0x136>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a18      	ldr	r2, [pc, #96]	; (8005dbc <HAL_TIM_PWM_Start+0x188>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d004      	beq.n	8005d6a <HAL_TIM_PWM_Start+0x136>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a16      	ldr	r2, [pc, #88]	; (8005dc0 <HAL_TIM_PWM_Start+0x18c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d111      	bne.n	8005d8e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b06      	cmp	r3, #6
 8005d7a:	d010      	beq.n	8005d9e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d8c:	e007      	b.n	8005d9e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f042 0201 	orr.w	r2, r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40010000 	.word	0x40010000
 8005dac:	40010400 	.word	0x40010400
 8005db0:	40000400 	.word	0x40000400
 8005db4:	40000800 	.word	0x40000800
 8005db8:	40000c00 	.word	0x40000c00
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40001800 	.word	0x40001800

08005dc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e0ac      	b.n	8005f38 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b0c      	cmp	r3, #12
 8005dea:	f200 809f 	bhi.w	8005f2c <HAL_TIM_PWM_ConfigChannel+0x168>
 8005dee:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df4:	08005e29 	.word	0x08005e29
 8005df8:	08005f2d 	.word	0x08005f2d
 8005dfc:	08005f2d 	.word	0x08005f2d
 8005e00:	08005f2d 	.word	0x08005f2d
 8005e04:	08005e69 	.word	0x08005e69
 8005e08:	08005f2d 	.word	0x08005f2d
 8005e0c:	08005f2d 	.word	0x08005f2d
 8005e10:	08005f2d 	.word	0x08005f2d
 8005e14:	08005eab 	.word	0x08005eab
 8005e18:	08005f2d 	.word	0x08005f2d
 8005e1c:	08005f2d 	.word	0x08005f2d
 8005e20:	08005f2d 	.word	0x08005f2d
 8005e24:	08005eeb 	.word	0x08005eeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f926 	bl	8006080 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f042 0208 	orr.w	r2, r2, #8
 8005e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0204 	bic.w	r2, r2, #4
 8005e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6999      	ldr	r1, [r3, #24]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	691a      	ldr	r2, [r3, #16]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	619a      	str	r2, [r3, #24]
      break;
 8005e66:	e062      	b.n	8005f2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 f976 	bl	8006160 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699a      	ldr	r2, [r3, #24]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6999      	ldr	r1, [r3, #24]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	021a      	lsls	r2, r3, #8
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	619a      	str	r2, [r3, #24]
      break;
 8005ea8:	e041      	b.n	8005f2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 f9cb 	bl	800624c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69da      	ldr	r2, [r3, #28]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0208 	orr.w	r2, r2, #8
 8005ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69da      	ldr	r2, [r3, #28]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0204 	bic.w	r2, r2, #4
 8005ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69d9      	ldr	r1, [r3, #28]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	61da      	str	r2, [r3, #28]
      break;
 8005ee8:	e021      	b.n	8005f2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 fa1f 	bl	8006334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	69da      	ldr	r2, [r3, #28]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69da      	ldr	r2, [r3, #28]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69d9      	ldr	r1, [r3, #28]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	021a      	lsls	r2, r3, #8
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	61da      	str	r2, [r3, #28]
      break;
 8005f2a:	e000      	b.n	8005f2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005f2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a40      	ldr	r2, [pc, #256]	; (8006054 <TIM_Base_SetConfig+0x114>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d013      	beq.n	8005f80 <TIM_Base_SetConfig+0x40>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5e:	d00f      	beq.n	8005f80 <TIM_Base_SetConfig+0x40>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a3d      	ldr	r2, [pc, #244]	; (8006058 <TIM_Base_SetConfig+0x118>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00b      	beq.n	8005f80 <TIM_Base_SetConfig+0x40>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a3c      	ldr	r2, [pc, #240]	; (800605c <TIM_Base_SetConfig+0x11c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d007      	beq.n	8005f80 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a3b      	ldr	r2, [pc, #236]	; (8006060 <TIM_Base_SetConfig+0x120>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a3a      	ldr	r2, [pc, #232]	; (8006064 <TIM_Base_SetConfig+0x124>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d108      	bne.n	8005f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a2f      	ldr	r2, [pc, #188]	; (8006054 <TIM_Base_SetConfig+0x114>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d02b      	beq.n	8005ff2 <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa0:	d027      	beq.n	8005ff2 <TIM_Base_SetConfig+0xb2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a2c      	ldr	r2, [pc, #176]	; (8006058 <TIM_Base_SetConfig+0x118>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d023      	beq.n	8005ff2 <TIM_Base_SetConfig+0xb2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2b      	ldr	r2, [pc, #172]	; (800605c <TIM_Base_SetConfig+0x11c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01f      	beq.n	8005ff2 <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a2a      	ldr	r2, [pc, #168]	; (8006060 <TIM_Base_SetConfig+0x120>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d01b      	beq.n	8005ff2 <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a29      	ldr	r2, [pc, #164]	; (8006064 <TIM_Base_SetConfig+0x124>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d017      	beq.n	8005ff2 <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a28      	ldr	r2, [pc, #160]	; (8006068 <TIM_Base_SetConfig+0x128>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a27      	ldr	r2, [pc, #156]	; (800606c <TIM_Base_SetConfig+0x12c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d00f      	beq.n	8005ff2 <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a26      	ldr	r2, [pc, #152]	; (8006070 <TIM_Base_SetConfig+0x130>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a25      	ldr	r2, [pc, #148]	; (8006074 <TIM_Base_SetConfig+0x134>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d007      	beq.n	8005ff2 <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a24      	ldr	r2, [pc, #144]	; (8006078 <TIM_Base_SetConfig+0x138>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d003      	beq.n	8005ff2 <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a23      	ldr	r2, [pc, #140]	; (800607c <TIM_Base_SetConfig+0x13c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d108      	bne.n	8006004 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a0a      	ldr	r2, [pc, #40]	; (8006054 <TIM_Base_SetConfig+0x114>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d003      	beq.n	8006038 <TIM_Base_SetConfig+0xf8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a0c      	ldr	r2, [pc, #48]	; (8006064 <TIM_Base_SetConfig+0x124>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d103      	bne.n	8006040 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	615a      	str	r2, [r3, #20]
}
 8006046:	bf00      	nop
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	40010000 	.word	0x40010000
 8006058:	40000400 	.word	0x40000400
 800605c:	40000800 	.word	0x40000800
 8006060:	40000c00 	.word	0x40000c00
 8006064:	40010400 	.word	0x40010400
 8006068:	40014000 	.word	0x40014000
 800606c:	40014400 	.word	0x40014400
 8006070:	40014800 	.word	0x40014800
 8006074:	40001800 	.word	0x40001800
 8006078:	40001c00 	.word	0x40001c00
 800607c:	40002000 	.word	0x40002000

08006080 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	f023 0201 	bic.w	r2, r3, #1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 0303 	bic.w	r3, r3, #3
 80060b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 0302 	bic.w	r3, r3, #2
 80060c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a20      	ldr	r2, [pc, #128]	; (8006158 <TIM_OC1_SetConfig+0xd8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d003      	beq.n	80060e4 <TIM_OC1_SetConfig+0x64>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a1f      	ldr	r2, [pc, #124]	; (800615c <TIM_OC1_SetConfig+0xdc>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d10c      	bne.n	80060fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f023 0308 	bic.w	r3, r3, #8
 80060ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f023 0304 	bic.w	r3, r3, #4
 80060fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a15      	ldr	r2, [pc, #84]	; (8006158 <TIM_OC1_SetConfig+0xd8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d003      	beq.n	800610e <TIM_OC1_SetConfig+0x8e>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a14      	ldr	r2, [pc, #80]	; (800615c <TIM_OC1_SetConfig+0xdc>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d111      	bne.n	8006132 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800611c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	621a      	str	r2, [r3, #32]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40010000 	.word	0x40010000
 800615c:	40010400 	.word	0x40010400

08006160 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f023 0210 	bic.w	r2, r3, #16
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f023 0320 	bic.w	r3, r3, #32
 80061aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	011b      	lsls	r3, r3, #4
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a22      	ldr	r2, [pc, #136]	; (8006244 <TIM_OC2_SetConfig+0xe4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_OC2_SetConfig+0x68>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a21      	ldr	r2, [pc, #132]	; (8006248 <TIM_OC2_SetConfig+0xe8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d10d      	bne.n	80061e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a17      	ldr	r2, [pc, #92]	; (8006244 <TIM_OC2_SetConfig+0xe4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_OC2_SetConfig+0x94>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a16      	ldr	r2, [pc, #88]	; (8006248 <TIM_OC2_SetConfig+0xe8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d113      	bne.n	800621c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006202:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40010000 	.word	0x40010000
 8006248:	40010400 	.word	0x40010400

0800624c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0303 	bic.w	r3, r3, #3
 8006282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	4313      	orrs	r3, r2
 80062a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a21      	ldr	r2, [pc, #132]	; (800632c <TIM_OC3_SetConfig+0xe0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d003      	beq.n	80062b2 <TIM_OC3_SetConfig+0x66>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a20      	ldr	r2, [pc, #128]	; (8006330 <TIM_OC3_SetConfig+0xe4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d10d      	bne.n	80062ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	021b      	lsls	r3, r3, #8
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a16      	ldr	r2, [pc, #88]	; (800632c <TIM_OC3_SetConfig+0xe0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d003      	beq.n	80062de <TIM_OC3_SetConfig+0x92>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a15      	ldr	r2, [pc, #84]	; (8006330 <TIM_OC3_SetConfig+0xe4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d113      	bne.n	8006306 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	621a      	str	r2, [r3, #32]
}
 8006320:	bf00      	nop
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	40010000 	.word	0x40010000
 8006330:	40010400 	.word	0x40010400

08006334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800636a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	021b      	lsls	r3, r3, #8
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800637e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	031b      	lsls	r3, r3, #12
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a12      	ldr	r2, [pc, #72]	; (80063d8 <TIM_OC4_SetConfig+0xa4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d003      	beq.n	800639c <TIM_OC4_SetConfig+0x68>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a11      	ldr	r2, [pc, #68]	; (80063dc <TIM_OC4_SetConfig+0xa8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d109      	bne.n	80063b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	019b      	lsls	r3, r3, #6
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	621a      	str	r2, [r3, #32]
}
 80063ca:	bf00      	nop
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40010000 	.word	0x40010000
 80063dc:	40010400 	.word	0x40010400

080063e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f003 031f 	and.w	r3, r3, #31
 80063f2:	2201      	movs	r2, #1
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1a      	ldr	r2, [r3, #32]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	43db      	mvns	r3, r3
 8006402:	401a      	ands	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a1a      	ldr	r2, [r3, #32]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	fa01 f303 	lsl.w	r3, r1, r3
 8006418:	431a      	orrs	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	621a      	str	r2, [r3, #32]
}
 800641e:	bf00      	nop
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
	...

0800642c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006440:	2302      	movs	r3, #2
 8006442:	e05a      	b.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a21      	ldr	r2, [pc, #132]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d022      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006490:	d01d      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1d      	ldr	r2, [pc, #116]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d018      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a1b      	ldr	r2, [pc, #108]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d013      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1a      	ldr	r2, [pc, #104]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00e      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a18      	ldr	r2, [pc, #96]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d009      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a17      	ldr	r2, [pc, #92]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d004      	beq.n	80064ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a15      	ldr	r2, [pc, #84]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d10c      	bne.n	80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40010000 	.word	0x40010000
 800650c:	40000400 	.word	0x40000400
 8006510:	40000800 	.word	0x40000800
 8006514:	40000c00 	.word	0x40000c00
 8006518:	40010400 	.word	0x40010400
 800651c:	40014000 	.word	0x40014000
 8006520:	40001800 	.word	0x40001800

08006524 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006524:	b084      	sub	sp, #16
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	f107 001c 	add.w	r0, r7, #28
 8006532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	2b01      	cmp	r3, #1
 800653a:	d122      	bne.n	8006582 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006540:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006566:	2b01      	cmp	r3, #1
 8006568:	d105      	bne.n	8006576 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f94a 	bl	8006810 <USB_CoreReset>
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]
 8006580:	e01a      	b.n	80065b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f93e 	bl	8006810 <USB_CoreReset>
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38
 80065aa:	e005      	b.n	80065b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d10b      	bne.n	80065d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f043 0206 	orr.w	r2, r3, #6
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f043 0220 	orr.w	r2, r3, #32
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065e2:	b004      	add	sp, #16
 80065e4:	4770      	bx	lr

080065e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f043 0201 	orr.w	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f023 0201 	bic.w	r2, r3, #1
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b082      	sub	sp, #8
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	460b      	mov	r3, r1
 8006634:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d106      	bne.n	8006656 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	60da      	str	r2, [r3, #12]
 8006654:	e00b      	b.n	800666e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006656:	78fb      	ldrb	r3, [r7, #3]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d106      	bne.n	800666a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60da      	str	r2, [r3, #12]
 8006668:	e001      	b.n	800666e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e003      	b.n	8006676 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800666e:	2032      	movs	r0, #50	; 0x32
 8006670:	f7fa fe86 	bl	8001380 <HAL_Delay>

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	019b      	lsls	r3, r3, #6
 8006692:	f043 0220 	orr.w	r2, r3, #32
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	3301      	adds	r3, #1
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4a09      	ldr	r2, [pc, #36]	; (80066c8 <USB_FlushTxFifo+0x48>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d901      	bls.n	80066ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e006      	b.n	80066ba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f003 0320 	and.w	r3, r3, #32
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d0f0      	beq.n	800669a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	00030d40 	.word	0x00030d40

080066cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2210      	movs	r2, #16
 80066dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3301      	adds	r3, #1
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4a09      	ldr	r2, [pc, #36]	; (800670c <USB_FlushRxFifo+0x40>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d901      	bls.n	80066f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e006      	b.n	80066fe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b10      	cmp	r3, #16
 80066fa:	d0f0      	beq.n	80066de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	00030d40 	.word	0x00030d40

08006710 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006710:	b480      	push	{r7}
 8006712:	b089      	sub	sp, #36	; 0x24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4611      	mov	r1, r2
 800671c:	461a      	mov	r2, r3
 800671e:	460b      	mov	r3, r1
 8006720:	71fb      	strb	r3, [r7, #7]
 8006722:	4613      	mov	r3, r2
 8006724:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800672e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006732:	2b00      	cmp	r3, #0
 8006734:	d11a      	bne.n	800676c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006736:	88bb      	ldrh	r3, [r7, #4]
 8006738:	3303      	adds	r3, #3
 800673a:	089b      	lsrs	r3, r3, #2
 800673c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800673e:	2300      	movs	r3, #0
 8006740:	61bb      	str	r3, [r7, #24]
 8006742:	e00f      	b.n	8006764 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006744:	79fb      	ldrb	r3, [r7, #7]
 8006746:	031a      	lsls	r2, r3, #12
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	4413      	add	r3, r2
 800674c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006750:	461a      	mov	r2, r3
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	3304      	adds	r3, #4
 800675c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	3301      	adds	r3, #1
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	429a      	cmp	r2, r3
 800676a:	d3eb      	bcc.n	8006744 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3724      	adds	r7, #36	; 0x24
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800677a:	b480      	push	{r7}
 800677c:	b089      	sub	sp, #36	; 0x24
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	4613      	mov	r3, r2
 8006786:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006790:	88fb      	ldrh	r3, [r7, #6]
 8006792:	3303      	adds	r3, #3
 8006794:	089b      	lsrs	r3, r3, #2
 8006796:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006798:	2300      	movs	r3, #0
 800679a:	61bb      	str	r3, [r7, #24]
 800679c:	e00b      	b.n	80067b6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	601a      	str	r2, [r3, #0]
    pDest++;
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	3304      	adds	r3, #4
 80067ae:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	3301      	adds	r3, #1
 80067b4:	61bb      	str	r3, [r7, #24]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d3ef      	bcc.n	800679e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80067be:	69fb      	ldr	r3, [r7, #28]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3724      	adds	r7, #36	; 0x24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	4013      	ands	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067e4:	68fb      	ldr	r3, [r7, #12]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	f003 0301 	and.w	r3, r3, #1
}
 8006802:	4618      	mov	r0, r3
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
	...

08006810 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3301      	adds	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4a13      	ldr	r2, [pc, #76]	; (8006874 <USB_CoreReset+0x64>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d901      	bls.n	800682e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e01b      	b.n	8006866 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	daf2      	bge.n	800681c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f043 0201 	orr.w	r2, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3301      	adds	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4a09      	ldr	r2, [pc, #36]	; (8006874 <USB_CoreReset+0x64>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d901      	bls.n	8006858 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e006      	b.n	8006866 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b01      	cmp	r3, #1
 8006862:	d0f0      	beq.n	8006846 <USB_CoreReset+0x36>

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	00030d40 	.word	0x00030d40

08006878 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006878:	b084      	sub	sp, #16
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	f107 001c 	add.w	r0, r7, #28
 8006886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006894:	461a      	mov	r2, r3
 8006896:	2300      	movs	r3, #0
 8006898:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d018      	beq.n	80068fc <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d10a      	bne.n	80068e6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068de:	f043 0304 	orr.w	r3, r3, #4
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	e014      	b.n	8006910 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068f4:	f023 0304 	bic.w	r3, r3, #4
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	e009      	b.n	8006910 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800690a:	f023 0304 	bic.w	r3, r3, #4
 800690e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006910:	2110      	movs	r1, #16
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff feb4 	bl	8006680 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff fed7 	bl	80066cc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800691e:	2300      	movs	r3, #0
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	e015      	b.n	8006950 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4413      	add	r3, r2
 800692c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006930:	461a      	mov	r2, r3
 8006932:	f04f 33ff 	mov.w	r3, #4294967295
 8006936:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4413      	add	r3, r2
 8006940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006944:	461a      	mov	r2, r3
 8006946:	2300      	movs	r3, #0
 8006948:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3301      	adds	r3, #1
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	429a      	cmp	r2, r3
 8006956:	d3e5      	bcc.n	8006924 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006958:	2101      	movs	r1, #1
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f8ac 	bl	8006ab8 <USB_DriveVbus>

  HAL_Delay(200U);
 8006960:	20c8      	movs	r0, #200	; 0xc8
 8006962:	f7fa fd0d 	bl	8001380 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f04f 32ff 	mov.w	r2, #4294967295
 8006972:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00b      	beq.n	8006998 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006986:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a14      	ldr	r2, [pc, #80]	; (80069dc <USB_HostInit+0x164>)
 800698c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a13      	ldr	r2, [pc, #76]	; (80069e0 <USB_HostInit+0x168>)
 8006992:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006996:	e009      	b.n	80069ac <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2280      	movs	r2, #128	; 0x80
 800699c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a10      	ldr	r2, [pc, #64]	; (80069e4 <USB_HostInit+0x16c>)
 80069a2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a10      	ldr	r2, [pc, #64]	; (80069e8 <USB_HostInit+0x170>)
 80069a8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d105      	bne.n	80069be <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	f043 0210 	orr.w	r2, r3, #16
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699a      	ldr	r2, [r3, #24]
 80069c2:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <USB_HostInit+0x174>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069d6:	b004      	add	sp, #16
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	01000200 	.word	0x01000200
 80069e0:	00e00300 	.word	0x00e00300
 80069e4:	00600080 	.word	0x00600080
 80069e8:	004000e0 	.word	0x004000e0
 80069ec:	a3200008 	.word	0xa3200008

080069f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a0e:	f023 0303 	bic.w	r3, r3, #3
 8006a12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006a2c:	78fb      	ldrb	r3, [r7, #3]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d107      	bne.n	8006a42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a3e:	6053      	str	r3, [r2, #4]
 8006a40:	e009      	b.n	8006a56 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d106      	bne.n	8006a56 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f241 7370 	movw	r3, #6000	; 0x1770
 8006a54:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006a84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a92:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006a94:	2064      	movs	r0, #100	; 0x64
 8006a96:	f7fa fc73 	bl	8001380 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006aa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aa6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006aa8:	200a      	movs	r0, #10
 8006aaa:	f7fa fc69 	bl	8001380 <HAL_Delay>

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006adc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d109      	bne.n	8006afc <USB_DriveVbus+0x44>
 8006ae8:	78fb      	ldrb	r3, [r7, #3]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d106      	bne.n	8006afc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006af6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006afa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b06:	d109      	bne.n	8006b1c <USB_DriveVbus+0x64>
 8006b08:	78fb      	ldrb	r3, [r7, #3]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b1a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	0c5b      	lsrs	r3, r3, #17
 8006b48:	f003 0303 	and.w	r3, r3, #3
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3714      	adds	r7, #20
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	b29b      	uxth	r3, r3
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	4608      	mov	r0, r1
 8006b86:	4611      	mov	r1, r2
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	70fb      	strb	r3, [r7, #3]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	70bb      	strb	r3, [r7, #2]
 8006b92:	4613      	mov	r3, r2
 8006b94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006baa:	461a      	mov	r2, r3
 8006bac:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006bb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	d87e      	bhi.n	8006cb8 <USB_HC_Init+0x13c>
 8006bba:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <USB_HC_Init+0x44>)
 8006bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc0:	08006bd1 	.word	0x08006bd1
 8006bc4:	08006c7b 	.word	0x08006c7b
 8006bc8:	08006bd1 	.word	0x08006bd1
 8006bcc:	08006c3d 	.word	0x08006c3d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bd0:	78fb      	ldrb	r3, [r7, #3]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bdc:	461a      	mov	r2, r3
 8006bde:	f240 439d 	movw	r3, #1181	; 0x49d
 8006be2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006be4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	da10      	bge.n	8006c0e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	78fa      	ldrb	r2, [r7, #3]
 8006bfc:	0151      	lsls	r1, r2, #5
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	440a      	add	r2, r1
 8006c02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c0a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006c0c:	e057      	b.n	8006cbe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d051      	beq.n	8006cbe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	78fa      	ldrb	r2, [r7, #3]
 8006c2a:	0151      	lsls	r1, r2, #5
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	440a      	add	r2, r1
 8006c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c38:	60d3      	str	r3, [r2, #12]
      break;
 8006c3a:	e040      	b.n	8006cbe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f240 639d 	movw	r3, #1693	; 0x69d
 8006c4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	da34      	bge.n	8006cc2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	78fa      	ldrb	r2, [r7, #3]
 8006c68:	0151      	lsls	r1, r2, #5
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	440a      	add	r2, r1
 8006c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c76:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006c78:	e023      	b.n	8006cc2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c86:	461a      	mov	r2, r3
 8006c88:	f240 2325 	movw	r3, #549	; 0x225
 8006c8c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	da17      	bge.n	8006cc6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006c96:	78fb      	ldrb	r3, [r7, #3]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	78fa      	ldrb	r2, [r7, #3]
 8006ca6:	0151      	lsls	r1, r2, #5
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	440a      	add	r2, r1
 8006cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cb0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006cb4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006cb6:	e006      	b.n	8006cc6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	77fb      	strb	r3, [r7, #31]
      break;
 8006cbc:	e004      	b.n	8006cc8 <USB_HC_Init+0x14c>
      break;
 8006cbe:	bf00      	nop
 8006cc0:	e002      	b.n	8006cc8 <USB_HC_Init+0x14c>
      break;
 8006cc2:	bf00      	nop
 8006cc4:	e000      	b.n	8006cc8 <USB_HC_Init+0x14c>
      break;
 8006cc6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cce:	699a      	ldr	r2, [r3, #24]
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cdc:	6939      	ldr	r1, [r7, #16]
 8006cde:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006cf2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	da03      	bge.n	8006d02 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	e001      	b.n	8006d06 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7ff ff0f 	bl	8006b2a <USB_GetHostSpeed>
 8006d0c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006d0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d106      	bne.n	8006d24 <USB_HC_Init+0x1a8>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d003      	beq.n	8006d24 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	e001      	b.n	8006d28 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d28:	787b      	ldrb	r3, [r7, #1]
 8006d2a:	059b      	lsls	r3, r3, #22
 8006d2c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d30:	78bb      	ldrb	r3, [r7, #2]
 8006d32:	02db      	lsls	r3, r3, #11
 8006d34:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d38:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d3e:	049b      	lsls	r3, r3, #18
 8006d40:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d44:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d46:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006d48:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d4c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	0159      	lsls	r1, r3, #5
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	440b      	add	r3, r1
 8006d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d5e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d64:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006d66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d10f      	bne.n	8006d8e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006d6e:	78fb      	ldrb	r3, [r7, #3]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	78fa      	ldrb	r2, [r7, #3]
 8006d7e:	0151      	lsls	r1, r2, #5
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	440a      	add	r2, r1
 8006d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d8c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006d8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3720      	adds	r7, #32
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b08c      	sub	sp, #48	; 0x30
 8006d9c:	af02      	add	r7, sp, #8
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	4613      	mov	r3, r2
 8006da4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	785b      	ldrb	r3, [r3, #1]
 8006dae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006db4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d02d      	beq.n	8006e1e <USB_HC_StartXfer+0x86>
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	791b      	ldrb	r3, [r3, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d129      	bne.n	8006e1e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006dca:	79fb      	ldrb	r3, [r7, #7]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d117      	bne.n	8006e00 <USB_HC_StartXfer+0x68>
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	79db      	ldrb	r3, [r3, #7]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <USB_HC_StartXfer+0x48>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	79db      	ldrb	r3, [r3, #7]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d10f      	bne.n	8006e00 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	69fa      	ldr	r2, [r7, #28]
 8006df0:	0151      	lsls	r1, r2, #5
 8006df2:	6a3a      	ldr	r2, [r7, #32]
 8006df4:	440a      	add	r2, r1
 8006df6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfe:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10b      	bne.n	8006e1e <USB_HC_StartXfer+0x86>
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	795b      	ldrb	r3, [r3, #5]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d107      	bne.n	8006e1e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	4619      	mov	r1, r3
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 fa2f 	bl	8007278 <USB_DoPing>
      return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e0f8      	b.n	8007010 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d018      	beq.n	8006e58 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	8912      	ldrh	r2, [r2, #8]
 8006e2e:	4413      	add	r3, r2
 8006e30:	3b01      	subs	r3, #1
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	8912      	ldrh	r2, [r2, #8]
 8006e36:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e3a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006e3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e3e:	8b7b      	ldrh	r3, [r7, #26]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d90b      	bls.n	8006e5c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006e44:	8b7b      	ldrh	r3, [r7, #26]
 8006e46:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	8912      	ldrh	r2, [r2, #8]
 8006e4e:	fb02 f203 	mul.w	r2, r2, r3
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	611a      	str	r2, [r3, #16]
 8006e56:	e001      	b.n	8006e5c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	78db      	ldrb	r3, [r3, #3]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d007      	beq.n	8006e74 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	8912      	ldrh	r2, [r2, #8]
 8006e6a:	fb02 f203 	mul.w	r2, r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	611a      	str	r2, [r3, #16]
 8006e72:	e003      	b.n	8006e7c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e86:	04d9      	lsls	r1, r3, #19
 8006e88:	4b63      	ldr	r3, [pc, #396]	; (8007018 <USB_HC_StartXfer+0x280>)
 8006e8a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e8c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	7a9b      	ldrb	r3, [r3, #10]
 8006e92:	075b      	lsls	r3, r3, #29
 8006e94:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e98:	69f9      	ldr	r1, [r7, #28]
 8006e9a:	0148      	lsls	r0, r1, #5
 8006e9c:	6a39      	ldr	r1, [r7, #32]
 8006e9e:	4401      	add	r1, r0
 8006ea0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ea4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006ea6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d009      	beq.n	8006ec2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	68d9      	ldr	r1, [r3, #12]
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	015a      	lsls	r2, r3, #5
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	4413      	add	r3, r2
 8006eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ebe:	460a      	mov	r2, r1
 8006ec0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	bf0c      	ite	eq
 8006ed2:	2301      	moveq	r3, #1
 8006ed4:	2300      	movne	r3, #0
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	69fa      	ldr	r2, [r7, #28]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	6a3a      	ldr	r2, [r7, #32]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ef4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ef8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	7e7b      	ldrb	r3, [r7, #25]
 8006f0a:	075b      	lsls	r3, r3, #29
 8006f0c:	69f9      	ldr	r1, [r7, #28]
 8006f0e:	0148      	lsls	r0, r1, #5
 8006f10:	6a39      	ldr	r1, [r7, #32]
 8006f12:	4401      	add	r1, r0
 8006f14:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f32:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	78db      	ldrb	r3, [r3, #3]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d004      	beq.n	8006f46 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	e003      	b.n	8006f4e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f4c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f54:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f62:	461a      	mov	r2, r3
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e04e      	b.n	8007010 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	78db      	ldrb	r3, [r3, #3]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d149      	bne.n	800700e <USB_HC_StartXfer+0x276>
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d045      	beq.n	800700e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	79db      	ldrb	r3, [r3, #7]
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d830      	bhi.n	8006fec <USB_HC_StartXfer+0x254>
 8006f8a:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <USB_HC_StartXfer+0x1f8>)
 8006f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f90:	08006fa1 	.word	0x08006fa1
 8006f94:	08006fc5 	.word	0x08006fc5
 8006f98:	08006fa1 	.word	0x08006fa1
 8006f9c:	08006fc5 	.word	0x08006fc5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	3303      	adds	r3, #3
 8006fa6:	089b      	lsrs	r3, r3, #2
 8006fa8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006faa:	8afa      	ldrh	r2, [r7, #22]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d91c      	bls.n	8006ff0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	f043 0220 	orr.w	r2, r3, #32
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fc2:	e015      	b.n	8006ff0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	3303      	adds	r3, #3
 8006fca:	089b      	lsrs	r3, r3, #2
 8006fcc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006fce:	8afa      	ldrh	r2, [r7, #22]
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d90a      	bls.n	8006ff4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fea:	e003      	b.n	8006ff4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006fec:	bf00      	nop
 8006fee:	e002      	b.n	8006ff6 <USB_HC_StartXfer+0x25e>
        break;
 8006ff0:	bf00      	nop
 8006ff2:	e000      	b.n	8006ff6 <USB_HC_StartXfer+0x25e>
        break;
 8006ff4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	68d9      	ldr	r1, [r3, #12]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	785a      	ldrb	r2, [r3, #1]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	b29b      	uxth	r3, r3
 8007004:	2000      	movs	r0, #0
 8007006:	9000      	str	r0, [sp, #0]
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f7ff fb81 	bl	8006710 <USB_WritePacket>
  }

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3728      	adds	r7, #40	; 0x28
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	1ff80000 	.word	0x1ff80000

0800701c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	b29b      	uxth	r3, r3
}
 8007032:	4618      	mov	r0, r3
 8007034:	3714      	adds	r7, #20
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800703e:	b480      	push	{r7}
 8007040:	b089      	sub	sp, #36	; 0x24
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	460b      	mov	r3, r1
 8007048:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800704e:	78fb      	ldrb	r3, [r7, #3]
 8007050:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	4413      	add	r3, r2
 800705e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	0c9b      	lsrs	r3, r3, #18
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	4413      	add	r3, r2
 8007074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	0fdb      	lsrs	r3, r3, #31
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b20      	cmp	r3, #32
 800708c:	d104      	bne.n	8007098 <USB_HC_Halt+0x5a>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	e0e8      	b.n	800726a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <USB_HC_Halt+0x66>
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d173      	bne.n	800718c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	0151      	lsls	r1, r2, #5
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	440a      	add	r2, r1
 80070ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070c2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f003 0320 	and.w	r3, r3, #32
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f040 80cb 	bne.w	8007268 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d143      	bne.n	8007166 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	0151      	lsls	r1, r2, #5
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	440a      	add	r2, r1
 80070f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070fc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	4413      	add	r3, r2
 8007106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	0151      	lsls	r1, r2, #5
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	440a      	add	r2, r1
 8007114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800711c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	4413      	add	r3, r2
 8007126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	0151      	lsls	r1, r2, #5
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	440a      	add	r2, r1
 8007134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007138:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800713c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	3301      	adds	r3, #1
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800714a:	d81d      	bhi.n	8007188 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	4413      	add	r3, r2
 8007154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800715e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007162:	d0ec      	beq.n	800713e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007164:	e080      	b.n	8007268 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	015a      	lsls	r2, r3, #5
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	4413      	add	r3, r2
 800716e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	0151      	lsls	r1, r2, #5
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	440a      	add	r2, r1
 800717c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007180:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007184:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007186:	e06f      	b.n	8007268 <USB_HC_Halt+0x22a>
            break;
 8007188:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800718a:	e06d      	b.n	8007268 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	015a      	lsls	r2, r3, #5
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	4413      	add	r3, r2
 8007194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	0151      	lsls	r1, r2, #5
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	440a      	add	r2, r1
 80071a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071aa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d143      	bne.n	8007244 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	0151      	lsls	r1, r2, #5
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	440a      	add	r2, r1
 80071f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071fa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	4413      	add	r3, r2
 8007204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	697a      	ldr	r2, [r7, #20]
 800720c:	0151      	lsls	r1, r2, #5
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	440a      	add	r2, r1
 8007212:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007216:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800721a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	3301      	adds	r3, #1
 8007220:	61fb      	str	r3, [r7, #28]
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007228:	d81d      	bhi.n	8007266 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	4413      	add	r3, r2
 8007232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800723c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007240:	d0ec      	beq.n	800721c <USB_HC_Halt+0x1de>
 8007242:	e011      	b.n	8007268 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	4413      	add	r3, r2
 800724c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	69ba      	ldr	r2, [r7, #24]
 8007258:	440a      	add	r2, r1
 800725a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800725e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	e000      	b.n	8007268 <USB_HC_Halt+0x22a>
          break;
 8007266:	bf00      	nop
    }
  }

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3724      	adds	r7, #36	; 0x24
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
	...

08007278 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007288:	78fb      	ldrb	r3, [r7, #3]
 800728a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800728c:	2301      	movs	r3, #1
 800728e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	04da      	lsls	r2, r3, #19
 8007294:	4b15      	ldr	r3, [pc, #84]	; (80072ec <USB_DoPing+0x74>)
 8007296:	4013      	ands	r3, r2
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	0151      	lsls	r1, r2, #5
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	440a      	add	r2, r1
 80072a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072a8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072c0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072c8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d6:	461a      	mov	r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	1ff80000 	.word	0x1ff80000

080072f0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff f981 	bl	8006608 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007306:	2110      	movs	r1, #16
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7ff f9b9 	bl	8006680 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff f9dc 	bl	80066cc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007314:	2300      	movs	r3, #0
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	e01f      	b.n	800735a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4413      	add	r3, r2
 8007322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007330:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007338:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007340:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	4413      	add	r3, r2
 800734a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800734e:	461a      	mov	r2, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	3301      	adds	r3, #1
 8007358:	613b      	str	r3, [r7, #16]
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	2b0f      	cmp	r3, #15
 800735e:	d9dc      	bls.n	800731a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007360:	2300      	movs	r3, #0
 8007362:	613b      	str	r3, [r7, #16]
 8007364:	e034      	b.n	80073d0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4413      	add	r3, r2
 800736e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800737c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007384:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800738c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800739a:	461a      	mov	r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	3301      	adds	r3, #1
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073ac:	d80c      	bhi.n	80073c8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c4:	d0ec      	beq.n	80073a0 <USB_StopHost+0xb0>
 80073c6:	e000      	b.n	80073ca <USB_StopHost+0xda>
        break;
 80073c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	3301      	adds	r3, #1
 80073ce:	613b      	str	r3, [r7, #16]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	2b0f      	cmp	r3, #15
 80073d4:	d9c7      	bls.n	8007366 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073dc:	461a      	mov	r2, r3
 80073de:	f04f 33ff 	mov.w	r3, #4294967295
 80073e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff f8fa 	bl	80065e6 <USB_EnableGlobalInt>

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073fc:	b590      	push	{r4, r7, lr}
 80073fe:	b089      	sub	sp, #36	; 0x24
 8007400:	af04      	add	r7, sp, #16
 8007402:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007404:	2301      	movs	r3, #1
 8007406:	2202      	movs	r2, #2
 8007408:	2102      	movs	r1, #2
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fc66 	bl	8007cdc <USBH_FindInterface>
 8007410:	4603      	mov	r3, r0
 8007412:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	2bff      	cmp	r3, #255	; 0xff
 8007418:	d002      	beq.n	8007420 <USBH_CDC_InterfaceInit+0x24>
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d901      	bls.n	8007424 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007420:	2302      	movs	r3, #2
 8007422:	e13d      	b.n	80076a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fc3b 	bl	8007ca4 <USBH_SelectInterface>
 800742e:	4603      	mov	r3, r0
 8007430:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007438:	2302      	movs	r3, #2
 800743a:	e131      	b.n	80076a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007442:	2050      	movs	r0, #80	; 0x50
 8007444:	f002 fa00 	bl	8009848 <malloc>
 8007448:	4603      	mov	r3, r0
 800744a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800745c:	2302      	movs	r3, #2
 800745e:	e11f      	b.n	80076a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007460:	2250      	movs	r2, #80	; 0x50
 8007462:	2100      	movs	r1, #0
 8007464:	68b8      	ldr	r0, [r7, #8]
 8007466:	f002 f9ff 	bl	8009868 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	211a      	movs	r1, #26
 8007470:	fb01 f303 	mul.w	r3, r1, r3
 8007474:	4413      	add	r3, r2
 8007476:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	b25b      	sxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	da15      	bge.n	80074ae <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	211a      	movs	r1, #26
 8007488:	fb01 f303 	mul.w	r3, r1, r3
 800748c:	4413      	add	r3, r2
 800748e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007492:	781a      	ldrb	r2, [r3, #0]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	211a      	movs	r1, #26
 800749e:	fb01 f303 	mul.w	r3, r1, r3
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80074a8:	881a      	ldrh	r2, [r3, #0]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	785b      	ldrb	r3, [r3, #1]
 80074b2:	4619      	mov	r1, r3
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 fe32 	bl	800911e <USBH_AllocPipe>
 80074ba:	4603      	mov	r3, r0
 80074bc:	461a      	mov	r2, r3
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	7819      	ldrb	r1, [r3, #0]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	7858      	ldrb	r0, [r3, #1]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	8952      	ldrh	r2, [r2, #10]
 80074da:	9202      	str	r2, [sp, #8]
 80074dc:	2203      	movs	r2, #3
 80074de:	9201      	str	r2, [sp, #4]
 80074e0:	9300      	str	r3, [sp, #0]
 80074e2:	4623      	mov	r3, r4
 80074e4:	4602      	mov	r2, r0
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f001 fdea 	bl	80090c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2200      	movs	r2, #0
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f002 f8f9 	bl	80096ec <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80074fa:	2300      	movs	r3, #0
 80074fc:	2200      	movs	r2, #0
 80074fe:	210a      	movs	r1, #10
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fbeb 	bl	8007cdc <USBH_FindInterface>
 8007506:	4603      	mov	r3, r0
 8007508:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800750a:	7bfb      	ldrb	r3, [r7, #15]
 800750c:	2bff      	cmp	r3, #255	; 0xff
 800750e:	d002      	beq.n	8007516 <USBH_CDC_InterfaceInit+0x11a>
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d901      	bls.n	800751a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007516:	2302      	movs	r3, #2
 8007518:	e0c2      	b.n	80076a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800751a:	7bfb      	ldrb	r3, [r7, #15]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	211a      	movs	r1, #26
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	4413      	add	r3, r2
 8007526:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	b25b      	sxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	da16      	bge.n	8007560 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	211a      	movs	r1, #26
 8007538:	fb01 f303 	mul.w	r3, r1, r3
 800753c:	4413      	add	r3, r2
 800753e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007542:	781a      	ldrb	r2, [r3, #0]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	211a      	movs	r1, #26
 800754e:	fb01 f303 	mul.w	r3, r1, r3
 8007552:	4413      	add	r3, r2
 8007554:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007558:	881a      	ldrh	r2, [r3, #0]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	835a      	strh	r2, [r3, #26]
 800755e:	e015      	b.n	800758c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	211a      	movs	r1, #26
 8007566:	fb01 f303 	mul.w	r3, r1, r3
 800756a:	4413      	add	r3, r2
 800756c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007570:	781a      	ldrb	r2, [r3, #0]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	211a      	movs	r1, #26
 800757c:	fb01 f303 	mul.w	r3, r1, r3
 8007580:	4413      	add	r3, r2
 8007582:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007586:	881a      	ldrh	r2, [r3, #0]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	211a      	movs	r1, #26
 8007592:	fb01 f303 	mul.w	r3, r1, r3
 8007596:	4413      	add	r3, r2
 8007598:	f203 3356 	addw	r3, r3, #854	; 0x356
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	b25b      	sxtb	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	da16      	bge.n	80075d2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	211a      	movs	r1, #26
 80075aa:	fb01 f303 	mul.w	r3, r1, r3
 80075ae:	4413      	add	r3, r2
 80075b0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075b4:	781a      	ldrb	r2, [r3, #0]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	211a      	movs	r1, #26
 80075c0:	fb01 f303 	mul.w	r3, r1, r3
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075ca:	881a      	ldrh	r2, [r3, #0]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	835a      	strh	r2, [r3, #26]
 80075d0:	e015      	b.n	80075fe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	211a      	movs	r1, #26
 80075d8:	fb01 f303 	mul.w	r3, r1, r3
 80075dc:	4413      	add	r3, r2
 80075de:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075e2:	781a      	ldrb	r2, [r3, #0]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	211a      	movs	r1, #26
 80075ee:	fb01 f303 	mul.w	r3, r1, r3
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075f8:	881a      	ldrh	r2, [r3, #0]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	7b9b      	ldrb	r3, [r3, #14]
 8007602:	4619      	mov	r1, r3
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 fd8a 	bl	800911e <USBH_AllocPipe>
 800760a:	4603      	mov	r3, r0
 800760c:	461a      	mov	r2, r3
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	7bdb      	ldrb	r3, [r3, #15]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 fd80 	bl	800911e <USBH_AllocPipe>
 800761e:	4603      	mov	r3, r0
 8007620:	461a      	mov	r2, r3
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	7b59      	ldrb	r1, [r3, #13]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	7b98      	ldrb	r0, [r3, #14]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	8b12      	ldrh	r2, [r2, #24]
 800763e:	9202      	str	r2, [sp, #8]
 8007640:	2202      	movs	r2, #2
 8007642:	9201      	str	r2, [sp, #4]
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	4623      	mov	r3, r4
 8007648:	4602      	mov	r2, r0
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 fd38 	bl	80090c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	7b19      	ldrb	r1, [r3, #12]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	7bd8      	ldrb	r0, [r3, #15]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	8b52      	ldrh	r2, [r2, #26]
 8007668:	9202      	str	r2, [sp, #8]
 800766a:	2202      	movs	r2, #2
 800766c:	9201      	str	r2, [sp, #4]
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	4623      	mov	r3, r4
 8007672:	4602      	mov	r2, r0
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f001 fd23 	bl	80090c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	7b5b      	ldrb	r3, [r3, #13]
 8007686:	2200      	movs	r2, #0
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f002 f82e 	bl	80096ec <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	7b1b      	ldrb	r3, [r3, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f002 f827 	bl	80096ec <USBH_LL_SetToggle>

  return USBH_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd90      	pop	{r4, r7, pc}

080076a8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00e      	beq.n	80076e0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 fd18 	bl	80090fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 fd43 	bl	8009160 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	7b1b      	ldrb	r3, [r3, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00e      	beq.n	8007706 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	7b1b      	ldrb	r3, [r3, #12]
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f001 fd05 	bl	80090fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	7b1b      	ldrb	r3, [r3, #12]
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fd30 	bl	8009160 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	7b5b      	ldrb	r3, [r3, #13]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00e      	beq.n	800772c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	7b5b      	ldrb	r3, [r3, #13]
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 fcf2 	bl	80090fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	7b5b      	ldrb	r3, [r3, #13]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 fd1d 	bl	8009160 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2200      	movs	r2, #0
 800772a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00b      	beq.n	8007750 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800773e:	69db      	ldr	r3, [r3, #28]
 8007740:	4618      	mov	r0, r3
 8007742:	f002 f889 	bl	8009858 <free>
    phost->pActiveClass->pData = 0U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800774c:	2200      	movs	r2, #0
 800774e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007768:	69db      	ldr	r3, [r3, #28]
 800776a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3340      	adds	r3, #64	; 0x40
 8007770:	4619      	mov	r1, r3
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f8b1 	bl	80078da <GetLineCoding>
 8007778:	4603      	mov	r3, r0
 800777a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800777c:	7afb      	ldrb	r3, [r7, #11]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d105      	bne.n	800778e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007788:	2102      	movs	r1, #2
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800778e:	7afb      	ldrb	r3, [r7, #11]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80077a0:	2301      	movs	r3, #1
 80077a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d877      	bhi.n	80078ac <USBH_CDC_Process+0x114>
 80077bc:	a201      	add	r2, pc, #4	; (adr r2, 80077c4 <USBH_CDC_Process+0x2c>)
 80077be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c2:	bf00      	nop
 80077c4:	080077d9 	.word	0x080077d9
 80077c8:	080077df 	.word	0x080077df
 80077cc:	0800780f 	.word	0x0800780f
 80077d0:	08007883 	.word	0x08007883
 80077d4:	08007891 	.word	0x08007891
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	73fb      	strb	r3, [r7, #15]
      break;
 80077dc:	e06d      	b.n	80078ba <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f897 	bl	8007918 <SetLineCoding>
 80077ea:	4603      	mov	r3, r0
 80077ec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d104      	bne.n	80077fe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077fc:	e058      	b.n	80078b0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d055      	beq.n	80078b0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2204      	movs	r2, #4
 8007808:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800780c:	e050      	b.n	80078b0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	3340      	adds	r3, #64	; 0x40
 8007812:	4619      	mov	r1, r3
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f860 	bl	80078da <GetLineCoding>
 800781a:	4603      	mov	r3, r0
 800781c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d126      	bne.n	8007872 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007836:	791b      	ldrb	r3, [r3, #4]
 8007838:	429a      	cmp	r2, r3
 800783a:	d13b      	bne.n	80078b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007846:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007848:	429a      	cmp	r2, r3
 800784a:	d133      	bne.n	80078b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007856:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007858:	429a      	cmp	r2, r3
 800785a:	d12b      	bne.n	80078b4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007864:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007866:	429a      	cmp	r2, r3
 8007868:	d124      	bne.n	80078b4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f958 	bl	8007b20 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007870:	e020      	b.n	80078b4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d01d      	beq.n	80078b4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2204      	movs	r2, #4
 800787c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007880:	e018      	b.n	80078b4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f867 	bl	8007956 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f8da 	bl	8007a42 <CDC_ProcessReception>
      break;
 800788e:	e014      	b.n	80078ba <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007890:	2100      	movs	r1, #0
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 ffe3 	bl	800885e <USBH_ClrFeature>
 8007898:	4603      	mov	r3, r0
 800789a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80078aa:	e005      	b.n	80078b8 <USBH_CDC_Process+0x120>

    default:
      break;
 80078ac:	bf00      	nop
 80078ae:	e004      	b.n	80078ba <USBH_CDC_Process+0x122>
      break;
 80078b0:	bf00      	nop
 80078b2:	e002      	b.n	80078ba <USBH_CDC_Process+0x122>
      break;
 80078b4:	bf00      	nop
 80078b6:	e000      	b.n	80078ba <USBH_CDC_Process+0x122>
      break;
 80078b8:	bf00      	nop

  }

  return status;
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b082      	sub	sp, #8
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	22a1      	movs	r2, #161	; 0xa1
 80078e8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2221      	movs	r2, #33	; 0x21
 80078ee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2207      	movs	r2, #7
 8007900:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2207      	movs	r2, #7
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 f988 	bl	8008c1e <USBH_CtlReq>
 800790e:	4603      	mov	r3, r0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2221      	movs	r2, #33	; 0x21
 8007926:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2220      	movs	r2, #32
 800792c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2207      	movs	r2, #7
 800793e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2207      	movs	r2, #7
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f001 f969 	bl	8008c1e <USBH_CtlReq>
 800794c:	4603      	mov	r3, r0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b086      	sub	sp, #24
 800795a:	af02      	add	r7, sp, #8
 800795c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007968:	2300      	movs	r3, #0
 800796a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007972:	2b01      	cmp	r3, #1
 8007974:	d002      	beq.n	800797c <CDC_ProcessTransmission+0x26>
 8007976:	2b02      	cmp	r3, #2
 8007978:	d023      	beq.n	80079c2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800797a:	e05e      	b.n	8007a3a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	8b12      	ldrh	r2, [r2, #24]
 8007984:	4293      	cmp	r3, r2
 8007986:	d90b      	bls.n	80079a0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	69d9      	ldr	r1, [r3, #28]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8b1a      	ldrh	r2, [r3, #24]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	7b5b      	ldrb	r3, [r3, #13]
 8007994:	2001      	movs	r0, #1
 8007996:	9000      	str	r0, [sp, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 fb4e 	bl	800903a <USBH_BulkSendData>
 800799e:	e00b      	b.n	80079b8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80079a8:	b29a      	uxth	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	7b5b      	ldrb	r3, [r3, #13]
 80079ae:	2001      	movs	r0, #1
 80079b0:	9000      	str	r0, [sp, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f001 fb41 	bl	800903a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079c0:	e03b      	b.n	8007a3a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	7b5b      	ldrb	r3, [r3, #13]
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 fe65 	bl	8009698 <USBH_LL_GetURBState>
 80079ce:	4603      	mov	r3, r0
 80079d0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80079d2:	7afb      	ldrb	r3, [r7, #11]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d128      	bne.n	8007a2a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	8b12      	ldrh	r2, [r2, #24]
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d90e      	bls.n	8007a02 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	8b12      	ldrh	r2, [r2, #24]
 80079ec:	1a9a      	subs	r2, r3, r2
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	8b12      	ldrh	r2, [r2, #24]
 80079fa:	441a      	add	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	61da      	str	r2, [r3, #28]
 8007a00:	e002      	b.n	8007a08 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d004      	beq.n	8007a1a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a18:	e00e      	b.n	8007a38 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f868 	bl	8007af8 <USBH_CDC_TransmitCallback>
      break;
 8007a28:	e006      	b.n	8007a38 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a2a:	7afb      	ldrb	r3, [r7, #11]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d103      	bne.n	8007a38 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a38:	bf00      	nop
  }
}
 8007a3a:	bf00      	nop
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b086      	sub	sp, #24
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a54:	2300      	movs	r3, #0
 8007a56:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d002      	beq.n	8007a68 <CDC_ProcessReception+0x26>
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d00e      	beq.n	8007a84 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007a66:	e043      	b.n	8007af0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	6a19      	ldr	r1, [r3, #32]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	8b5a      	ldrh	r2, [r3, #26]
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	7b1b      	ldrb	r3, [r3, #12]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 fb05 	bl	8009084 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2204      	movs	r2, #4
 8007a7e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a82:	e035      	b.n	8007af0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	7b1b      	ldrb	r3, [r3, #12]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f001 fe04 	bl	8009698 <USBH_LL_GetURBState>
 8007a90:	4603      	mov	r3, r0
 8007a92:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a94:	7cfb      	ldrb	r3, [r7, #19]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d129      	bne.n	8007aee <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	7b1b      	ldrb	r3, [r3, #12]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f001 fd67 	bl	8009574 <USBH_LL_GetLastXferSize>
 8007aa6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d016      	beq.n	8007ae0 <CDC_ProcessReception+0x9e>
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	8b5b      	ldrh	r3, [r3, #26]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d910      	bls.n	8007ae0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	1ad2      	subs	r2, r2, r3
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	6a1a      	ldr	r2, [r3, #32]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	441a      	add	r2, r3
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2203      	movs	r2, #3
 8007ada:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007ade:	e006      	b.n	8007aee <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f80f 	bl	8007b0c <USBH_CDC_ReceiveCallback>
      break;
 8007aee:	bf00      	nop
  }
}
 8007af0:	bf00      	nop
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e029      	b.n	8007ba0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	79fa      	ldrb	r2, [r7, #7]
 8007b50:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 f81f 	bl	8007ba8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f001 fc37 	bl	800940c <USBH_LL_Init>

  return USBH_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	e009      	b.n	8007bce <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	33e0      	adds	r3, #224	; 0xe0
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2b0e      	cmp	r3, #14
 8007bd2:	d9f2      	bls.n	8007bba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	e009      	b.n	8007bee <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007be4:	2200      	movs	r2, #0
 8007be6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bf4:	d3f1      	bcc.n	8007bda <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2240      	movs	r2, #64	; 0x40
 8007c1a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d016      	beq.n	8007c92 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10e      	bne.n	8007c8c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c74:	1c59      	adds	r1, r3, #1
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	33de      	adds	r3, #222	; 0xde
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]
 8007c8a:	e004      	b.n	8007c96 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	73fb      	strb	r3, [r7, #15]
 8007c90:	e001      	b.n	8007c96 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007c92:	2302      	movs	r3, #2
 8007c94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007cba:	78fa      	ldrb	r2, [r7, #3]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d204      	bcs.n	8007cca <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	78fa      	ldrb	r2, [r7, #3]
 8007cc4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007cc8:	e001      	b.n	8007cce <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007cca:	2302      	movs	r3, #2
 8007ccc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	4608      	mov	r0, r1
 8007ce6:	4611      	mov	r1, r2
 8007ce8:	461a      	mov	r2, r3
 8007cea:	4603      	mov	r3, r0
 8007cec:	70fb      	strb	r3, [r7, #3]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70bb      	strb	r3, [r7, #2]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d04:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d06:	e025      	b.n	8007d54 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	221a      	movs	r2, #26
 8007d0c:	fb02 f303 	mul.w	r3, r2, r3
 8007d10:	3308      	adds	r3, #8
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	3302      	adds	r3, #2
 8007d18:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	795b      	ldrb	r3, [r3, #5]
 8007d1e:	78fa      	ldrb	r2, [r7, #3]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d002      	beq.n	8007d2a <USBH_FindInterface+0x4e>
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	2bff      	cmp	r3, #255	; 0xff
 8007d28:	d111      	bne.n	8007d4e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d2e:	78ba      	ldrb	r2, [r7, #2]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d002      	beq.n	8007d3a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d34:	78bb      	ldrb	r3, [r7, #2]
 8007d36:	2bff      	cmp	r3, #255	; 0xff
 8007d38:	d109      	bne.n	8007d4e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d3e:	787a      	ldrb	r2, [r7, #1]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d002      	beq.n	8007d4a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d44:	787b      	ldrb	r3, [r7, #1]
 8007d46:	2bff      	cmp	r3, #255	; 0xff
 8007d48:	d101      	bne.n	8007d4e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	e006      	b.n	8007d5c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	3301      	adds	r3, #1
 8007d52:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d9d6      	bls.n	8007d08 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d5a:	23ff      	movs	r3, #255	; 0xff
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	371c      	adds	r7, #28
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 fb87 	bl	8009484 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007d76:	2101      	movs	r1, #1
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 fca0 	bl	80096be <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b088      	sub	sp, #32
 8007d8c:	af04      	add	r7, sp, #16
 8007d8e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007d90:	2302      	movs	r3, #2
 8007d92:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d102      	bne.n	8007daa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2203      	movs	r2, #3
 8007da8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b0b      	cmp	r3, #11
 8007db2:	f200 81b3 	bhi.w	800811c <USBH_Process+0x394>
 8007db6:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <USBH_Process+0x34>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007ded 	.word	0x08007ded
 8007dc0:	08007e1f 	.word	0x08007e1f
 8007dc4:	08007e87 	.word	0x08007e87
 8007dc8:	080080b7 	.word	0x080080b7
 8007dcc:	0800811d 	.word	0x0800811d
 8007dd0:	08007f2b 	.word	0x08007f2b
 8007dd4:	0800805d 	.word	0x0800805d
 8007dd8:	08007f61 	.word	0x08007f61
 8007ddc:	08007f81 	.word	0x08007f81
 8007de0:	08007fa1 	.word	0x08007fa1
 8007de4:	08007fcf 	.word	0x08007fcf
 8007de8:	0800809f 	.word	0x0800809f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 8193 	beq.w	8008120 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007e00:	20c8      	movs	r0, #200	; 0xc8
 8007e02:	f001 fca3 	bl	800974c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fb99 	bl	800953e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007e1c:	e180      	b.n	8008120 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d107      	bne.n	8007e38 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e36:	e182      	b.n	800813e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e42:	d914      	bls.n	8007e6e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d903      	bls.n	8007e66 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	220d      	movs	r2, #13
 8007e62:	701a      	strb	r2, [r3, #0]
      break;
 8007e64:	e16b      	b.n	800813e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	701a      	strb	r2, [r3, #0]
      break;
 8007e6c:	e167      	b.n	800813e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e74:	f103 020a 	add.w	r2, r3, #10
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007e7e:	200a      	movs	r0, #10
 8007e80:	f001 fc64 	bl	800974c <USBH_Delay>
      break;
 8007e84:	e15b      	b.n	800813e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d005      	beq.n	8007e9c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e96:	2104      	movs	r1, #4
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007e9c:	2064      	movs	r0, #100	; 0x64
 8007e9e:	f001 fc55 	bl	800974c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f001 fb24 	bl	80094f0 <USBH_LL_GetSpeed>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	461a      	mov	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2205      	movs	r2, #5
 8007eb6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007eb8:	2100      	movs	r1, #0
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f001 f92f 	bl	800911e <USBH_AllocPipe>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007ec8:	2180      	movs	r1, #128	; 0x80
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f001 f927 	bl	800911e <USBH_AllocPipe>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	7919      	ldrb	r1, [r3, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007eec:	b292      	uxth	r2, r2
 8007eee:	9202      	str	r2, [sp, #8]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	9201      	str	r2, [sp, #4]
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2280      	movs	r2, #128	; 0x80
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f001 f8e0 	bl	80090c0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7959      	ldrb	r1, [r3, #5]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f14:	b292      	uxth	r2, r2
 8007f16:	9202      	str	r2, [sp, #8]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	9201      	str	r2, [sp, #4]
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2200      	movs	r2, #0
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f001 f8cc 	bl	80090c0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f28:	e109      	b.n	800813e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f90c 	bl	8008148 <USBH_HandleEnum>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f040 80f3 	bne.w	8008124 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d103      	bne.n	8007f58 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2208      	movs	r2, #8
 8007f54:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f56:	e0e5      	b.n	8008124 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2207      	movs	r2, #7
 8007f5c:	701a      	strb	r2, [r3, #0]
      break;
 8007f5e:	e0e1      	b.n	8008124 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 80de 	beq.w	8008128 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f72:	2101      	movs	r1, #1
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2208      	movs	r2, #8
 8007f7c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007f7e:	e0d3      	b.n	8008128 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fc20 	bl	80087d0 <USBH_SetCfg>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f040 80ca 	bne.w	800812c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2209      	movs	r2, #9
 8007f9c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f9e:	e0c5      	b.n	800812c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00b      	beq.n	8007fc6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007fae:	2101      	movs	r1, #1
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fc30 	bl	8008816 <USBH_SetFeature>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f040 80b9 	bne.w	8008130 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	220a      	movs	r2, #10
 8007fc2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007fc4:	e0b4      	b.n	8008130 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	220a      	movs	r2, #10
 8007fca:	701a      	strb	r2, [r3, #0]
      break;
 8007fcc:	e0b0      	b.n	8008130 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 80ad 	beq.w	8008134 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
 8007fe6:	e016      	b.n	8008016 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007fe8:	7bfa      	ldrb	r2, [r7, #15]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	32de      	adds	r2, #222	; 0xde
 8007fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff2:	791a      	ldrb	r2, [r3, #4]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d108      	bne.n	8008010 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007ffe:	7bfa      	ldrb	r2, [r7, #15]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	32de      	adds	r2, #222	; 0xde
 8008004:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800800e:	e005      	b.n	800801c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	3301      	adds	r3, #1
 8008014:	73fb      	strb	r3, [r7, #15]
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0e5      	beq.n	8007fe8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d016      	beq.n	8008054 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4798      	blx	r3
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d109      	bne.n	800804c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2206      	movs	r2, #6
 800803c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008044:	2103      	movs	r1, #3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800804a:	e073      	b.n	8008134 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	220d      	movs	r2, #13
 8008050:	701a      	strb	r2, [r3, #0]
      break;
 8008052:	e06f      	b.n	8008134 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	220d      	movs	r2, #13
 8008058:	701a      	strb	r2, [r3, #0]
      break;
 800805a:	e06b      	b.n	8008134 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d017      	beq.n	8008096 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	4798      	blx	r3
 8008072:	4603      	mov	r3, r0
 8008074:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008076:	7bbb      	ldrb	r3, [r7, #14]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b00      	cmp	r3, #0
 800807c:	d103      	bne.n	8008086 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	220b      	movs	r2, #11
 8008082:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008084:	e058      	b.n	8008138 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008086:	7bbb      	ldrb	r3, [r7, #14]
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b02      	cmp	r3, #2
 800808c:	d154      	bne.n	8008138 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	220d      	movs	r2, #13
 8008092:	701a      	strb	r2, [r3, #0]
      break;
 8008094:	e050      	b.n	8008138 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	220d      	movs	r2, #13
 800809a:	701a      	strb	r2, [r3, #0]
      break;
 800809c:	e04c      	b.n	8008138 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d049      	beq.n	800813c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	4798      	blx	r3
      }
      break;
 80080b4:	e042      	b.n	800813c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7ff fd72 	bl	8007ba8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d009      	beq.n	80080e2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d005      	beq.n	80080f8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080f2:	2105      	movs	r1, #5
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b01      	cmp	r3, #1
 8008102:	d107      	bne.n	8008114 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff fe2b 	bl	8007d68 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008112:	e014      	b.n	800813e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 f9b5 	bl	8009484 <USBH_LL_Start>
      break;
 800811a:	e010      	b.n	800813e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800811c:	bf00      	nop
 800811e:	e00e      	b.n	800813e <USBH_Process+0x3b6>
      break;
 8008120:	bf00      	nop
 8008122:	e00c      	b.n	800813e <USBH_Process+0x3b6>
      break;
 8008124:	bf00      	nop
 8008126:	e00a      	b.n	800813e <USBH_Process+0x3b6>
    break;
 8008128:	bf00      	nop
 800812a:	e008      	b.n	800813e <USBH_Process+0x3b6>
      break;
 800812c:	bf00      	nop
 800812e:	e006      	b.n	800813e <USBH_Process+0x3b6>
      break;
 8008130:	bf00      	nop
 8008132:	e004      	b.n	800813e <USBH_Process+0x3b6>
      break;
 8008134:	bf00      	nop
 8008136:	e002      	b.n	800813e <USBH_Process+0x3b6>
      break;
 8008138:	bf00      	nop
 800813a:	e000      	b.n	800813e <USBH_Process+0x3b6>
      break;
 800813c:	bf00      	nop
  }
  return USBH_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af04      	add	r7, sp, #16
 800814e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008150:	2301      	movs	r3, #1
 8008152:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008154:	2301      	movs	r3, #1
 8008156:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	785b      	ldrb	r3, [r3, #1]
 800815c:	2b07      	cmp	r3, #7
 800815e:	f200 81c1 	bhi.w	80084e4 <USBH_HandleEnum+0x39c>
 8008162:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <USBH_HandleEnum+0x20>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	08008189 	.word	0x08008189
 800816c:	08008247 	.word	0x08008247
 8008170:	080082b1 	.word	0x080082b1
 8008174:	0800833f 	.word	0x0800833f
 8008178:	080083a9 	.word	0x080083a9
 800817c:	08008419 	.word	0x08008419
 8008180:	0800845f 	.word	0x0800845f
 8008184:	080084a5 	.word	0x080084a5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008188:	2108      	movs	r1, #8
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fa50 	bl	8008630 <USBH_Get_DevDesc>
 8008190:	4603      	mov	r3, r0
 8008192:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d130      	bne.n	80081fc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	7919      	ldrb	r1, [r3, #4]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081be:	b292      	uxth	r2, r2
 80081c0:	9202      	str	r2, [sp, #8]
 80081c2:	2200      	movs	r2, #0
 80081c4:	9201      	str	r2, [sp, #4]
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	4603      	mov	r3, r0
 80081ca:	2280      	movs	r2, #128	; 0x80
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 ff77 	bl	80090c0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	7959      	ldrb	r1, [r3, #5]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081e6:	b292      	uxth	r2, r2
 80081e8:	9202      	str	r2, [sp, #8]
 80081ea:	2200      	movs	r2, #0
 80081ec:	9201      	str	r2, [sp, #4]
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	4603      	mov	r3, r0
 80081f2:	2200      	movs	r2, #0
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 ff63 	bl	80090c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081fa:	e175      	b.n	80084e8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	2b03      	cmp	r3, #3
 8008200:	f040 8172 	bne.w	80084e8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800820a:	3301      	adds	r3, #1
 800820c:	b2da      	uxtb	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800821a:	2b03      	cmp	r3, #3
 800821c:	d903      	bls.n	8008226 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	220d      	movs	r2, #13
 8008222:	701a      	strb	r2, [r3, #0]
      break;
 8008224:	e160      	b.n	80084e8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	795b      	ldrb	r3, [r3, #5]
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 ff97 	bl	8009160 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	791b      	ldrb	r3, [r3, #4]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 ff91 	bl	8009160 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	701a      	strb	r2, [r3, #0]
      break;
 8008244:	e150      	b.n	80084e8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008246:	2112      	movs	r1, #18
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f9f1 	bl	8008630 <USBH_Get_DevDesc>
 800824e:	4603      	mov	r3, r0
 8008250:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d103      	bne.n	8008260 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800825e:	e145      	b.n	80084ec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	2b03      	cmp	r3, #3
 8008264:	f040 8142 	bne.w	80084ec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800826e:	3301      	adds	r3, #1
 8008270:	b2da      	uxtb	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800827e:	2b03      	cmp	r3, #3
 8008280:	d903      	bls.n	800828a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	220d      	movs	r2, #13
 8008286:	701a      	strb	r2, [r3, #0]
      break;
 8008288:	e130      	b.n	80084ec <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	795b      	ldrb	r3, [r3, #5]
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 ff65 	bl	8009160 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	791b      	ldrb	r3, [r3, #4]
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 ff5f 	bl	8009160 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
      break;
 80082ae:	e11d      	b.n	80084ec <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80082b0:	2101      	movs	r1, #1
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fa68 	bl	8008788 <USBH_SetAddress>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d132      	bne.n	8008328 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80082c2:	2002      	movs	r0, #2
 80082c4:	f001 fa42 	bl	800974c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2203      	movs	r2, #3
 80082d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	7919      	ldrb	r1, [r3, #4]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082ea:	b292      	uxth	r2, r2
 80082ec:	9202      	str	r2, [sp, #8]
 80082ee:	2200      	movs	r2, #0
 80082f0:	9201      	str	r2, [sp, #4]
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	4603      	mov	r3, r0
 80082f6:	2280      	movs	r2, #128	; 0x80
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fee1 	bl	80090c0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	7959      	ldrb	r1, [r3, #5]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008312:	b292      	uxth	r2, r2
 8008314:	9202      	str	r2, [sp, #8]
 8008316:	2200      	movs	r2, #0
 8008318:	9201      	str	r2, [sp, #4]
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	4603      	mov	r3, r0
 800831e:	2200      	movs	r2, #0
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fecd 	bl	80090c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008326:	e0e3      	b.n	80084f0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008328:	7bbb      	ldrb	r3, [r7, #14]
 800832a:	2b03      	cmp	r3, #3
 800832c:	f040 80e0 	bne.w	80084f0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	220d      	movs	r2, #13
 8008334:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	705a      	strb	r2, [r3, #1]
      break;
 800833c:	e0d8      	b.n	80084f0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800833e:	2109      	movs	r1, #9
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f99d 	bl	8008680 <USBH_Get_CfgDesc>
 8008346:	4603      	mov	r3, r0
 8008348:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d103      	bne.n	8008358 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2204      	movs	r2, #4
 8008354:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008356:	e0cd      	b.n	80084f4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b03      	cmp	r3, #3
 800835c:	f040 80ca 	bne.w	80084f4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008366:	3301      	adds	r3, #1
 8008368:	b2da      	uxtb	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008376:	2b03      	cmp	r3, #3
 8008378:	d903      	bls.n	8008382 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	220d      	movs	r2, #13
 800837e:	701a      	strb	r2, [r3, #0]
      break;
 8008380:	e0b8      	b.n	80084f4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	795b      	ldrb	r3, [r3, #5]
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fee9 	bl	8009160 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	791b      	ldrb	r3, [r3, #4]
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fee3 	bl	8009160 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	701a      	strb	r2, [r3, #0]
      break;
 80083a6:	e0a5      	b.n	80084f4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f965 	bl	8008680 <USBH_Get_CfgDesc>
 80083b6:	4603      	mov	r3, r0
 80083b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d103      	bne.n	80083c8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2205      	movs	r2, #5
 80083c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083c6:	e097      	b.n	80084f8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083c8:	7bbb      	ldrb	r3, [r7, #14]
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	f040 8094 	bne.w	80084f8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083d6:	3301      	adds	r3, #1
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	d903      	bls.n	80083f2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	220d      	movs	r2, #13
 80083ee:	701a      	strb	r2, [r3, #0]
      break;
 80083f0:	e082      	b.n	80084f8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	795b      	ldrb	r3, [r3, #5]
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 feb1 	bl	8009160 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	791b      	ldrb	r3, [r3, #4]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 feab 	bl	8009160 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	701a      	strb	r2, [r3, #0]
      break;
 8008416:	e06f      	b.n	80084f8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800841e:	2b00      	cmp	r3, #0
 8008420:	d019      	beq.n	8008456 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800842e:	23ff      	movs	r3, #255	; 0xff
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f949 	bl	80086c8 <USBH_Get_StringDesc>
 8008436:	4603      	mov	r3, r0
 8008438:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d103      	bne.n	8008448 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2206      	movs	r2, #6
 8008444:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008446:	e059      	b.n	80084fc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	2b03      	cmp	r3, #3
 800844c:	d156      	bne.n	80084fc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2206      	movs	r2, #6
 8008452:	705a      	strb	r2, [r3, #1]
      break;
 8008454:	e052      	b.n	80084fc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2206      	movs	r2, #6
 800845a:	705a      	strb	r2, [r3, #1]
      break;
 800845c:	e04e      	b.n	80084fc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008464:	2b00      	cmp	r3, #0
 8008466:	d019      	beq.n	800849c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008474:	23ff      	movs	r3, #255	; 0xff
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f926 	bl	80086c8 <USBH_Get_StringDesc>
 800847c:	4603      	mov	r3, r0
 800847e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d103      	bne.n	800848e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2207      	movs	r2, #7
 800848a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800848c:	e038      	b.n	8008500 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800848e:	7bbb      	ldrb	r3, [r7, #14]
 8008490:	2b03      	cmp	r3, #3
 8008492:	d135      	bne.n	8008500 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2207      	movs	r2, #7
 8008498:	705a      	strb	r2, [r3, #1]
      break;
 800849a:	e031      	b.n	8008500 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2207      	movs	r2, #7
 80084a0:	705a      	strb	r2, [r3, #1]
      break;
 80084a2:	e02d      	b.n	8008500 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d017      	beq.n	80084de <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80084ba:	23ff      	movs	r3, #255	; 0xff
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 f903 	bl	80086c8 <USBH_Get_StringDesc>
 80084c2:	4603      	mov	r3, r0
 80084c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084c6:	7bbb      	ldrb	r3, [r7, #14]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d102      	bne.n	80084d2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80084d0:	e018      	b.n	8008504 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084d2:	7bbb      	ldrb	r3, [r7, #14]
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	d115      	bne.n	8008504 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80084d8:	2300      	movs	r3, #0
 80084da:	73fb      	strb	r3, [r7, #15]
      break;
 80084dc:	e012      	b.n	8008504 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	73fb      	strb	r3, [r7, #15]
      break;
 80084e2:	e00f      	b.n	8008504 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80084e4:	bf00      	nop
 80084e6:	e00e      	b.n	8008506 <USBH_HandleEnum+0x3be>
      break;
 80084e8:	bf00      	nop
 80084ea:	e00c      	b.n	8008506 <USBH_HandleEnum+0x3be>
      break;
 80084ec:	bf00      	nop
 80084ee:	e00a      	b.n	8008506 <USBH_HandleEnum+0x3be>
      break;
 80084f0:	bf00      	nop
 80084f2:	e008      	b.n	8008506 <USBH_HandleEnum+0x3be>
      break;
 80084f4:	bf00      	nop
 80084f6:	e006      	b.n	8008506 <USBH_HandleEnum+0x3be>
      break;
 80084f8:	bf00      	nop
 80084fa:	e004      	b.n	8008506 <USBH_HandleEnum+0x3be>
      break;
 80084fc:	bf00      	nop
 80084fe:	e002      	b.n	8008506 <USBH_HandleEnum+0x3be>
      break;
 8008500:	bf00      	nop
 8008502:	e000      	b.n	8008506 <USBH_HandleEnum+0x3be>
      break;
 8008504:	bf00      	nop
  }
  return Status;
 8008506:	7bfb      	ldrb	r3, [r7, #15]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008522:	bf00      	nop
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800853c:	1c5a      	adds	r2, r3, #1
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f804 	bl	8008552 <USBH_HandleSof>
}
 800854a:	bf00      	nop
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b082      	sub	sp, #8
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b0b      	cmp	r3, #11
 8008562:	d10a      	bne.n	800857a <USBH_HandleSof+0x28>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800856a:	2b00      	cmp	r3, #0
 800856c:	d005      	beq.n	800857a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	4798      	blx	r3
  }
}
 800857a:	bf00      	nop
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008592:	bf00      	nop
}
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80085ae:	bf00      	nop
}
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 ff56 	bl	80094ba <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	791b      	ldrb	r3, [r3, #4]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 fda3 	bl	8009160 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	795b      	ldrb	r3, [r3, #5]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fd9d 	bl	8009160 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af02      	add	r7, sp, #8
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008642:	78fb      	ldrb	r3, [r7, #3]
 8008644:	b29b      	uxth	r3, r3
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	4613      	mov	r3, r2
 800864a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800864e:	2100      	movs	r1, #0
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f864 	bl	800871e <USBH_GetDescriptor>
 8008656:	4603      	mov	r3, r0
 8008658:	73fb      	strb	r3, [r7, #15]
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10a      	bne.n	8008676 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800866c:	78fa      	ldrb	r2, [r7, #3]
 800866e:	b292      	uxth	r2, r2
 8008670:	4619      	mov	r1, r3
 8008672:	f000 f918 	bl	80088a6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008676:	7bfb      	ldrb	r3, [r7, #15]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af02      	add	r7, sp, #8
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	331c      	adds	r3, #28
 8008690:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008692:	887b      	ldrh	r3, [r7, #2]
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800869c:	2100      	movs	r1, #0
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f83d 	bl	800871e <USBH_GetDescriptor>
 80086a4:	4603      	mov	r3, r0
 80086a6:	72fb      	strb	r3, [r7, #11]
 80086a8:	7afb      	ldrb	r3, [r7, #11]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d107      	bne.n	80086be <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80086b4:	887a      	ldrh	r2, [r7, #2]
 80086b6:	68f9      	ldr	r1, [r7, #12]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 f964 	bl	8008986 <USBH_ParseCfgDesc>
  }

  return status;
 80086be:	7afb      	ldrb	r3, [r7, #11]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b088      	sub	sp, #32
 80086cc:	af02      	add	r7, sp, #8
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	607a      	str	r2, [r7, #4]
 80086d2:	461a      	mov	r2, r3
 80086d4:	460b      	mov	r3, r1
 80086d6:	72fb      	strb	r3, [r7, #11]
 80086d8:	4613      	mov	r3, r2
 80086da:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80086dc:	7afb      	ldrb	r3, [r7, #11]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80086e4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80086ec:	893b      	ldrh	r3, [r7, #8]
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	460b      	mov	r3, r1
 80086f2:	2100      	movs	r1, #0
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 f812 	bl	800871e <USBH_GetDescriptor>
 80086fa:	4603      	mov	r3, r0
 80086fc:	75fb      	strb	r3, [r7, #23]
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d107      	bne.n	8008714 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800870a:	893a      	ldrh	r2, [r7, #8]
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	4618      	mov	r0, r3
 8008710:	f000 fa37 	bl	8008b82 <USBH_ParseStringDesc>
  }

  return status;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b084      	sub	sp, #16
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	607b      	str	r3, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	72fb      	strb	r3, [r7, #11]
 800872c:	4613      	mov	r3, r2
 800872e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	789b      	ldrb	r3, [r3, #2]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d11c      	bne.n	8008772 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008738:	7afb      	ldrb	r3, [r7, #11]
 800873a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800873e:	b2da      	uxtb	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2206      	movs	r2, #6
 8008748:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	893a      	ldrh	r2, [r7, #8]
 800874e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008750:	893b      	ldrh	r3, [r7, #8]
 8008752:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800875a:	d104      	bne.n	8008766 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f240 4209 	movw	r2, #1033	; 0x409
 8008762:	829a      	strh	r2, [r3, #20]
 8008764:	e002      	b.n	800876c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	8b3a      	ldrh	r2, [r7, #24]
 8008770:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008772:	8b3b      	ldrh	r3, [r7, #24]
 8008774:	461a      	mov	r2, r3
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f000 fa50 	bl	8008c1e <USBH_CtlReq>
 800877e:	4603      	mov	r3, r0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	789b      	ldrb	r3, [r3, #2]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d10f      	bne.n	80087bc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2205      	movs	r2, #5
 80087a6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80087a8:	78fb      	ldrb	r3, [r7, #3]
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80087bc:	2200      	movs	r2, #0
 80087be:	2100      	movs	r1, #0
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fa2c 	bl	8008c1e <USBH_CtlReq>
 80087c6:	4603      	mov	r3, r0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	789b      	ldrb	r3, [r3, #2]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d10e      	bne.n	8008802 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2209      	movs	r2, #9
 80087ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	887a      	ldrh	r2, [r7, #2]
 80087f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008802:	2200      	movs	r2, #0
 8008804:	2100      	movs	r1, #0
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fa09 	bl	8008c1e <USBH_CtlReq>
 800880c:	4603      	mov	r3, r0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	460b      	mov	r3, r1
 8008820:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	789b      	ldrb	r3, [r3, #2]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d10f      	bne.n	800884a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2203      	movs	r2, #3
 8008834:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008836:	78fb      	ldrb	r3, [r7, #3]
 8008838:	b29a      	uxth	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800884a:	2200      	movs	r2, #0
 800884c:	2100      	movs	r1, #0
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f9e5 	bl	8008c1e <USBH_CtlReq>
 8008854:	4603      	mov	r3, r0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	460b      	mov	r3, r1
 8008868:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	789b      	ldrb	r3, [r3, #2]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d10f      	bne.n	8008892 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2202      	movs	r2, #2
 8008876:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008884:	78fb      	ldrb	r3, [r7, #3]
 8008886:	b29a      	uxth	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008892:	2200      	movs	r2, #0
 8008894:	2100      	movs	r1, #0
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f9c1 	bl	8008c1e <USBH_CtlReq>
 800889c:	4603      	mov	r3, r0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b085      	sub	sp, #20
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
 80088ae:	60b9      	str	r1, [r7, #8]
 80088b0:	4613      	mov	r3, r2
 80088b2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	781a      	ldrb	r2, [r3, #0]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	785a      	ldrb	r2, [r3, #1]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	3302      	adds	r3, #2
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	3303      	adds	r3, #3
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	021b      	lsls	r3, r3, #8
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	4313      	orrs	r3, r2
 80088da:	b29a      	uxth	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	791a      	ldrb	r2, [r3, #4]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	795a      	ldrb	r2, [r3, #5]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	799a      	ldrb	r2, [r3, #6]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	79da      	ldrb	r2, [r3, #7]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008900:	88fb      	ldrh	r3, [r7, #6]
 8008902:	2b08      	cmp	r3, #8
 8008904:	d939      	bls.n	800897a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	3308      	adds	r3, #8
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	b29a      	uxth	r2, r3
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	3309      	adds	r3, #9
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	b29b      	uxth	r3, r3
 8008916:	021b      	lsls	r3, r3, #8
 8008918:	b29b      	uxth	r3, r3
 800891a:	4313      	orrs	r3, r2
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	330a      	adds	r3, #10
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	b29a      	uxth	r2, r3
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	330b      	adds	r3, #11
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	b29b      	uxth	r3, r3
 8008932:	021b      	lsls	r3, r3, #8
 8008934:	b29b      	uxth	r3, r3
 8008936:	4313      	orrs	r3, r2
 8008938:	b29a      	uxth	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	330c      	adds	r3, #12
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	b29a      	uxth	r2, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	330d      	adds	r3, #13
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	b29b      	uxth	r3, r3
 800894e:	021b      	lsls	r3, r3, #8
 8008950:	b29b      	uxth	r3, r3
 8008952:	4313      	orrs	r3, r2
 8008954:	b29a      	uxth	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	7b9a      	ldrb	r2, [r3, #14]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	7bda      	ldrb	r2, [r3, #15]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	7c1a      	ldrb	r2, [r3, #16]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	7c5a      	ldrb	r2, [r3, #17]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	745a      	strb	r2, [r3, #17]
  }
}
 800897a:	bf00      	nop
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b08a      	sub	sp, #40	; 0x28
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	4613      	mov	r3, r2
 8008992:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	781a      	ldrb	r2, [r3, #0]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	785a      	ldrb	r2, [r3, #1]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	3302      	adds	r3, #2
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	b29a      	uxth	r2, r3
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	3303      	adds	r3, #3
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	021b      	lsls	r3, r3, #8
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	4313      	orrs	r3, r2
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	791a      	ldrb	r2, [r3, #4]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	795a      	ldrb	r2, [r3, #5]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	799a      	ldrb	r2, [r3, #6]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	79da      	ldrb	r2, [r3, #7]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	7a1a      	ldrb	r2, [r3, #8]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80089fc:	88fb      	ldrh	r3, [r7, #6]
 80089fe:	2b09      	cmp	r3, #9
 8008a00:	d95f      	bls.n	8008ac2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a02:	2309      	movs	r3, #9
 8008a04:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a0a:	e051      	b.n	8008ab0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a0c:	f107 0316 	add.w	r3, r7, #22
 8008a10:	4619      	mov	r1, r3
 8008a12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a14:	f000 f8e8 	bl	8008be8 <USBH_GetNextDesc>
 8008a18:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1c:	785b      	ldrb	r3, [r3, #1]
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d146      	bne.n	8008ab0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a26:	221a      	movs	r2, #26
 8008a28:	fb02 f303 	mul.w	r3, r2, r3
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	4413      	add	r3, r2
 8008a32:	3302      	adds	r3, #2
 8008a34:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a38:	69f8      	ldr	r0, [r7, #28]
 8008a3a:	f000 f846 	bl	8008aca <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a48:	e022      	b.n	8008a90 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a4a:	f107 0316 	add.w	r3, r7, #22
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a52:	f000 f8c9 	bl	8008be8 <USBH_GetNextDesc>
 8008a56:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	785b      	ldrb	r3, [r3, #1]
 8008a5c:	2b05      	cmp	r3, #5
 8008a5e:	d117      	bne.n	8008a90 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008a60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a64:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008a68:	3201      	adds	r2, #1
 8008a6a:	00d2      	lsls	r2, r2, #3
 8008a6c:	211a      	movs	r1, #26
 8008a6e:	fb01 f303 	mul.w	r3, r1, r3
 8008a72:	4413      	add	r3, r2
 8008a74:	3308      	adds	r3, #8
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	4413      	add	r3, r2
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a80:	69b8      	ldr	r0, [r7, #24]
 8008a82:	f000 f851 	bl	8008b28 <USBH_ParseEPDesc>
            ep_ix++;
 8008a86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	791b      	ldrb	r3, [r3, #4]
 8008a94:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d204      	bcs.n	8008aa6 <USBH_ParseCfgDesc+0x120>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	885a      	ldrh	r2, [r3, #2]
 8008aa0:	8afb      	ldrh	r3, [r7, #22]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d8d1      	bhi.n	8008a4a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008aa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008aaa:	3301      	adds	r3, #1
 8008aac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008ab0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d804      	bhi.n	8008ac2 <USBH_ParseCfgDesc+0x13c>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	885a      	ldrh	r2, [r3, #2]
 8008abc:	8afb      	ldrh	r3, [r7, #22]
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d8a4      	bhi.n	8008a0c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008ac2:	bf00      	nop
 8008ac4:	3728      	adds	r7, #40	; 0x28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b083      	sub	sp, #12
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781a      	ldrb	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	785a      	ldrb	r2, [r3, #1]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	789a      	ldrb	r2, [r3, #2]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	78da      	ldrb	r2, [r3, #3]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	791a      	ldrb	r2, [r3, #4]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	795a      	ldrb	r2, [r3, #5]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	799a      	ldrb	r2, [r3, #6]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	79da      	ldrb	r2, [r3, #7]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	7a1a      	ldrb	r2, [r3, #8]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	721a      	strb	r2, [r3, #8]
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	781a      	ldrb	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	785a      	ldrb	r2, [r3, #1]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	789a      	ldrb	r2, [r3, #2]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	78da      	ldrb	r2, [r3, #3]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	3304      	adds	r3, #4
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	3305      	adds	r3, #5
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	021b      	lsls	r3, r3, #8
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	4313      	orrs	r3, r2
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	799a      	ldrb	r2, [r3, #6]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	719a      	strb	r2, [r3, #6]
}
 8008b76:	bf00      	nop
 8008b78:	370c      	adds	r7, #12
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr

08008b82 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b087      	sub	sp, #28
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	60f8      	str	r0, [r7, #12]
 8008b8a:	60b9      	str	r1, [r7, #8]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	3301      	adds	r3, #1
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	2b03      	cmp	r3, #3
 8008b98:	d120      	bne.n	8008bdc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	1e9a      	subs	r2, r3, #2
 8008ba0:	88fb      	ldrh	r3, [r7, #6]
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	bf28      	it	cs
 8008ba6:	4613      	movcs	r3, r2
 8008ba8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	3302      	adds	r3, #2
 8008bae:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	82fb      	strh	r3, [r7, #22]
 8008bb4:	e00b      	b.n	8008bce <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008bb6:	8afb      	ldrh	r3, [r7, #22]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	4413      	add	r3, r2
 8008bbc:	781a      	ldrb	r2, [r3, #0]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008bc8:	8afb      	ldrh	r3, [r7, #22]
 8008bca:	3302      	adds	r3, #2
 8008bcc:	82fb      	strh	r3, [r7, #22]
 8008bce:	8afa      	ldrh	r2, [r7, #22]
 8008bd0:	8abb      	ldrh	r3, [r7, #20]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d3ef      	bcc.n	8008bb6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	701a      	strb	r2, [r3, #0]
  }
}
 8008bdc:	bf00      	nop
 8008bde:	371c      	adds	r7, #28
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	881a      	ldrh	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	4413      	add	r3, r2
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c10:	68fb      	ldr	r3, [r7, #12]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b086      	sub	sp, #24
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	789b      	ldrb	r3, [r3, #2]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d002      	beq.n	8008c3e <USBH_CtlReq+0x20>
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d00f      	beq.n	8008c5c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008c3c:	e027      	b.n	8008c8e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	88fa      	ldrh	r2, [r7, #6]
 8008c48:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2202      	movs	r2, #2
 8008c54:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008c56:	2301      	movs	r3, #1
 8008c58:	75fb      	strb	r3, [r7, #23]
      break;
 8008c5a:	e018      	b.n	8008c8e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 f81b 	bl	8008c98 <USBH_HandleControl>
 8008c62:	4603      	mov	r3, r0
 8008c64:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <USBH_CtlReq+0x54>
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d106      	bne.n	8008c80 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2201      	movs	r2, #1
 8008c76:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	761a      	strb	r2, [r3, #24]
      break;
 8008c7e:	e005      	b.n	8008c8c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d102      	bne.n	8008c8c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	709a      	strb	r2, [r3, #2]
      break;
 8008c8c:	bf00      	nop
  }
  return status;
 8008c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af02      	add	r7, sp, #8
 8008c9e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	7e1b      	ldrb	r3, [r3, #24]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	2b0a      	cmp	r3, #10
 8008cb0:	f200 8156 	bhi.w	8008f60 <USBH_HandleControl+0x2c8>
 8008cb4:	a201      	add	r2, pc, #4	; (adr r2, 8008cbc <USBH_HandleControl+0x24>)
 8008cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cba:	bf00      	nop
 8008cbc:	08008ce9 	.word	0x08008ce9
 8008cc0:	08008d03 	.word	0x08008d03
 8008cc4:	08008d6d 	.word	0x08008d6d
 8008cc8:	08008d93 	.word	0x08008d93
 8008ccc:	08008dcb 	.word	0x08008dcb
 8008cd0:	08008df5 	.word	0x08008df5
 8008cd4:	08008e47 	.word	0x08008e47
 8008cd8:	08008e69 	.word	0x08008e69
 8008cdc:	08008ea5 	.word	0x08008ea5
 8008ce0:	08008ecb 	.word	0x08008ecb
 8008ce4:	08008f09 	.word	0x08008f09
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f103 0110 	add.w	r1, r3, #16
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	795b      	ldrb	r3, [r3, #5]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f943 	bl	8008f80 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2202      	movs	r2, #2
 8008cfe:	761a      	strb	r2, [r3, #24]
      break;
 8008d00:	e139      	b.n	8008f76 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	795b      	ldrb	r3, [r3, #5]
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fcc5 	bl	8009698 <USBH_LL_GetURBState>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d11e      	bne.n	8008d56 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	7c1b      	ldrb	r3, [r3, #16]
 8008d1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d20:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	8adb      	ldrh	r3, [r3, #22]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d00a      	beq.n	8008d40 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008d2a:	7b7b      	ldrb	r3, [r7, #13]
 8008d2c:	2b80      	cmp	r3, #128	; 0x80
 8008d2e:	d103      	bne.n	8008d38 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2203      	movs	r2, #3
 8008d34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d36:	e115      	b.n	8008f64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2205      	movs	r2, #5
 8008d3c:	761a      	strb	r2, [r3, #24]
      break;
 8008d3e:	e111      	b.n	8008f64 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008d40:	7b7b      	ldrb	r3, [r7, #13]
 8008d42:	2b80      	cmp	r3, #128	; 0x80
 8008d44:	d103      	bne.n	8008d4e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2209      	movs	r2, #9
 8008d4a:	761a      	strb	r2, [r3, #24]
      break;
 8008d4c:	e10a      	b.n	8008f64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2207      	movs	r2, #7
 8008d52:	761a      	strb	r2, [r3, #24]
      break;
 8008d54:	e106      	b.n	8008f64 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	2b04      	cmp	r3, #4
 8008d5a:	d003      	beq.n	8008d64 <USBH_HandleControl+0xcc>
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	f040 8100 	bne.w	8008f64 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	220b      	movs	r2, #11
 8008d68:	761a      	strb	r2, [r3, #24]
      break;
 8008d6a:	e0fb      	b.n	8008f64 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6899      	ldr	r1, [r3, #8]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	899a      	ldrh	r2, [r3, #12]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	791b      	ldrb	r3, [r3, #4]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f93a 	bl	8008ffe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2204      	movs	r2, #4
 8008d8e:	761a      	strb	r2, [r3, #24]
      break;
 8008d90:	e0f1      	b.n	8008f76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	791b      	ldrb	r3, [r3, #4]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fc7d 	bl	8009698 <USBH_LL_GetURBState>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d102      	bne.n	8008dae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2209      	movs	r2, #9
 8008dac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	2b05      	cmp	r3, #5
 8008db2:	d102      	bne.n	8008dba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008db4:	2303      	movs	r3, #3
 8008db6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008db8:	e0d6      	b.n	8008f68 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	f040 80d3 	bne.w	8008f68 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	220b      	movs	r2, #11
 8008dc6:	761a      	strb	r2, [r3, #24]
      break;
 8008dc8:	e0ce      	b.n	8008f68 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6899      	ldr	r1, [r3, #8]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	899a      	ldrh	r2, [r3, #12]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	795b      	ldrb	r3, [r3, #5]
 8008dd6:	2001      	movs	r0, #1
 8008dd8:	9000      	str	r0, [sp, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f8ea 	bl	8008fb4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2206      	movs	r2, #6
 8008df0:	761a      	strb	r2, [r3, #24]
      break;
 8008df2:	e0c0      	b.n	8008f76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	795b      	ldrb	r3, [r3, #5]
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fc4c 	bl	8009698 <USBH_LL_GetURBState>
 8008e00:	4603      	mov	r3, r0
 8008e02:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d103      	bne.n	8008e12 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2207      	movs	r2, #7
 8008e0e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e10:	e0ac      	b.n	8008f6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	2b05      	cmp	r3, #5
 8008e16:	d105      	bne.n	8008e24 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	220c      	movs	r2, #12
 8008e1c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	73fb      	strb	r3, [r7, #15]
      break;
 8008e22:	e0a3      	b.n	8008f6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d103      	bne.n	8008e32 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2205      	movs	r2, #5
 8008e2e:	761a      	strb	r2, [r3, #24]
      break;
 8008e30:	e09c      	b.n	8008f6c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
 8008e34:	2b04      	cmp	r3, #4
 8008e36:	f040 8099 	bne.w	8008f6c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	220b      	movs	r2, #11
 8008e3e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008e40:	2302      	movs	r3, #2
 8008e42:	73fb      	strb	r3, [r7, #15]
      break;
 8008e44:	e092      	b.n	8008f6c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	791b      	ldrb	r3, [r3, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f8d5 	bl	8008ffe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2208      	movs	r2, #8
 8008e64:	761a      	strb	r2, [r3, #24]

      break;
 8008e66:	e086      	b.n	8008f76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	791b      	ldrb	r3, [r3, #4]
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fc12 	bl	8009698 <USBH_LL_GetURBState>
 8008e74:	4603      	mov	r3, r0
 8008e76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d105      	bne.n	8008e8a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	220d      	movs	r2, #13
 8008e82:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e88:	e072      	b.n	8008f70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
 8008e8c:	2b04      	cmp	r3, #4
 8008e8e:	d103      	bne.n	8008e98 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	220b      	movs	r2, #11
 8008e94:	761a      	strb	r2, [r3, #24]
      break;
 8008e96:	e06b      	b.n	8008f70 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	2b05      	cmp	r3, #5
 8008e9c:	d168      	bne.n	8008f70 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ea2:	e065      	b.n	8008f70 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	795b      	ldrb	r3, [r3, #5]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	9200      	str	r2, [sp, #0]
 8008eac:	2200      	movs	r2, #0
 8008eae:	2100      	movs	r1, #0
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f87f 	bl	8008fb4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	220a      	movs	r2, #10
 8008ec6:	761a      	strb	r2, [r3, #24]
      break;
 8008ec8:	e055      	b.n	8008f76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	795b      	ldrb	r3, [r3, #5]
 8008ece:	4619      	mov	r1, r3
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fbe1 	bl	8009698 <USBH_LL_GetURBState>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008eda:	7bbb      	ldrb	r3, [r7, #14]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d105      	bne.n	8008eec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	220d      	movs	r2, #13
 8008ee8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008eea:	e043      	b.n	8008f74 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d103      	bne.n	8008efa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2209      	movs	r2, #9
 8008ef6:	761a      	strb	r2, [r3, #24]
      break;
 8008ef8:	e03c      	b.n	8008f74 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	2b04      	cmp	r3, #4
 8008efe:	d139      	bne.n	8008f74 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	220b      	movs	r2, #11
 8008f04:	761a      	strb	r2, [r3, #24]
      break;
 8008f06:	e035      	b.n	8008f74 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	7e5b      	ldrb	r3, [r3, #25]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	765a      	strb	r2, [r3, #25]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	7e5b      	ldrb	r3, [r3, #25]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d806      	bhi.n	8008f2a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008f28:	e025      	b.n	8008f76 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f30:	2106      	movs	r1, #6
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	795b      	ldrb	r3, [r3, #5]
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f90c 	bl	8009160 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	791b      	ldrb	r3, [r3, #4]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f906 	bl	8009160 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008f5a:	2302      	movs	r3, #2
 8008f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f5e:	e00a      	b.n	8008f76 <USBH_HandleControl+0x2de>

    default:
      break;
 8008f60:	bf00      	nop
 8008f62:	e008      	b.n	8008f76 <USBH_HandleControl+0x2de>
      break;
 8008f64:	bf00      	nop
 8008f66:	e006      	b.n	8008f76 <USBH_HandleControl+0x2de>
      break;
 8008f68:	bf00      	nop
 8008f6a:	e004      	b.n	8008f76 <USBH_HandleControl+0x2de>
      break;
 8008f6c:	bf00      	nop
 8008f6e:	e002      	b.n	8008f76 <USBH_HandleControl+0x2de>
      break;
 8008f70:	bf00      	nop
 8008f72:	e000      	b.n	8008f76 <USBH_HandleControl+0x2de>
      break;
 8008f74:	bf00      	nop
  }

  return status;
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af04      	add	r7, sp, #16
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f8e:	79f9      	ldrb	r1, [r7, #7]
 8008f90:	2300      	movs	r3, #0
 8008f92:	9303      	str	r3, [sp, #12]
 8008f94:	2308      	movs	r3, #8
 8008f96:	9302      	str	r3, [sp, #8]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	9301      	str	r3, [sp, #4]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 fb46 	bl	8009636 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af04      	add	r7, sp, #16
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	4611      	mov	r1, r2
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	80fb      	strh	r3, [r7, #6]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008fd8:	7979      	ldrb	r1, [r7, #5]
 8008fda:	7e3b      	ldrb	r3, [r7, #24]
 8008fdc:	9303      	str	r3, [sp, #12]
 8008fde:	88fb      	ldrh	r3, [r7, #6]
 8008fe0:	9302      	str	r3, [sp, #8]
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	9301      	str	r3, [sp, #4]
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	2300      	movs	r3, #0
 8008fec:	2200      	movs	r2, #0
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f000 fb21 	bl	8009636 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b088      	sub	sp, #32
 8009002:	af04      	add	r7, sp, #16
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	4611      	mov	r1, r2
 800900a:	461a      	mov	r2, r3
 800900c:	460b      	mov	r3, r1
 800900e:	80fb      	strh	r3, [r7, #6]
 8009010:	4613      	mov	r3, r2
 8009012:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009014:	7979      	ldrb	r1, [r7, #5]
 8009016:	2300      	movs	r3, #0
 8009018:	9303      	str	r3, [sp, #12]
 800901a:	88fb      	ldrh	r3, [r7, #6]
 800901c:	9302      	str	r3, [sp, #8]
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	9301      	str	r3, [sp, #4]
 8009022:	2301      	movs	r3, #1
 8009024:	9300      	str	r3, [sp, #0]
 8009026:	2300      	movs	r3, #0
 8009028:	2201      	movs	r2, #1
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 fb03 	bl	8009636 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009030:	2300      	movs	r3, #0

}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b088      	sub	sp, #32
 800903e:	af04      	add	r7, sp, #16
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	4611      	mov	r1, r2
 8009046:	461a      	mov	r2, r3
 8009048:	460b      	mov	r3, r1
 800904a:	80fb      	strh	r3, [r7, #6]
 800904c:	4613      	mov	r3, r2
 800904e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800905e:	7979      	ldrb	r1, [r7, #5]
 8009060:	7e3b      	ldrb	r3, [r7, #24]
 8009062:	9303      	str	r3, [sp, #12]
 8009064:	88fb      	ldrh	r3, [r7, #6]
 8009066:	9302      	str	r3, [sp, #8]
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	2301      	movs	r3, #1
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	2302      	movs	r3, #2
 8009072:	2200      	movs	r2, #0
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f000 fade 	bl	8009636 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af04      	add	r7, sp, #16
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	4611      	mov	r1, r2
 8009090:	461a      	mov	r2, r3
 8009092:	460b      	mov	r3, r1
 8009094:	80fb      	strh	r3, [r7, #6]
 8009096:	4613      	mov	r3, r2
 8009098:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800909a:	7979      	ldrb	r1, [r7, #5]
 800909c:	2300      	movs	r3, #0
 800909e:	9303      	str	r3, [sp, #12]
 80090a0:	88fb      	ldrh	r3, [r7, #6]
 80090a2:	9302      	str	r3, [sp, #8]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	9301      	str	r3, [sp, #4]
 80090a8:	2301      	movs	r3, #1
 80090aa:	9300      	str	r3, [sp, #0]
 80090ac:	2302      	movs	r3, #2
 80090ae:	2201      	movs	r2, #1
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 fac0 	bl	8009636 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af04      	add	r7, sp, #16
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	4608      	mov	r0, r1
 80090ca:	4611      	mov	r1, r2
 80090cc:	461a      	mov	r2, r3
 80090ce:	4603      	mov	r3, r0
 80090d0:	70fb      	strb	r3, [r7, #3]
 80090d2:	460b      	mov	r3, r1
 80090d4:	70bb      	strb	r3, [r7, #2]
 80090d6:	4613      	mov	r3, r2
 80090d8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80090da:	7878      	ldrb	r0, [r7, #1]
 80090dc:	78ba      	ldrb	r2, [r7, #2]
 80090de:	78f9      	ldrb	r1, [r7, #3]
 80090e0:	8b3b      	ldrh	r3, [r7, #24]
 80090e2:	9302      	str	r3, [sp, #8]
 80090e4:	7d3b      	ldrb	r3, [r7, #20]
 80090e6:	9301      	str	r3, [sp, #4]
 80090e8:	7c3b      	ldrb	r3, [r7, #16]
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	4603      	mov	r3, r0
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fa53 	bl	800959a <USBH_LL_OpenPipe>

  return USBH_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	460b      	mov	r3, r1
 8009108:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800910a:	78fb      	ldrb	r3, [r7, #3]
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fa72 	bl	80095f8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b084      	sub	sp, #16
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	460b      	mov	r3, r1
 8009128:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f836 	bl	800919c <USBH_GetFreePipe>
 8009130:	4603      	mov	r3, r0
 8009132:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009134:	89fb      	ldrh	r3, [r7, #14]
 8009136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800913a:	4293      	cmp	r3, r2
 800913c:	d00a      	beq.n	8009154 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800913e:	78fa      	ldrb	r2, [r7, #3]
 8009140:	89fb      	ldrh	r3, [r7, #14]
 8009142:	f003 030f 	and.w	r3, r3, #15
 8009146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	33e0      	adds	r3, #224	; 0xe0
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	440b      	add	r3, r1
 8009152:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009154:	89fb      	ldrh	r3, [r7, #14]
 8009156:	b2db      	uxtb	r3, r3
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800916c:	78fb      	ldrb	r3, [r7, #3]
 800916e:	2b0a      	cmp	r3, #10
 8009170:	d80d      	bhi.n	800918e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009172:	78fb      	ldrb	r3, [r7, #3]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	33e0      	adds	r3, #224	; 0xe0
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	4413      	add	r3, r2
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	78fb      	ldrb	r3, [r7, #3]
 8009180:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009184:	6879      	ldr	r1, [r7, #4]
 8009186:	33e0      	adds	r3, #224	; 0xe0
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	440b      	add	r3, r1
 800918c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80091a8:	2300      	movs	r3, #0
 80091aa:	73fb      	strb	r3, [r7, #15]
 80091ac:	e00f      	b.n	80091ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	33e0      	adds	r3, #224	; 0xe0
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4413      	add	r3, r2
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d102      	bne.n	80091c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	e007      	b.n	80091d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
 80091ca:	3301      	adds	r3, #1
 80091cc:	73fb      	strb	r3, [r7, #15]
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
 80091d0:	2b0a      	cmp	r3, #10
 80091d2:	d9ec      	bls.n	80091ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80091d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80091e8:	2201      	movs	r2, #1
 80091ea:	490e      	ldr	r1, [pc, #56]	; (8009224 <MX_USB_HOST_Init+0x40>)
 80091ec:	480e      	ldr	r0, [pc, #56]	; (8009228 <MX_USB_HOST_Init+0x44>)
 80091ee:	f7fe fca1 	bl	8007b34 <USBH_Init>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80091f8:	f7f7 fd38 	bl	8000c6c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80091fc:	490b      	ldr	r1, [pc, #44]	; (800922c <MX_USB_HOST_Init+0x48>)
 80091fe:	480a      	ldr	r0, [pc, #40]	; (8009228 <MX_USB_HOST_Init+0x44>)
 8009200:	f7fe fd26 	bl	8007c50 <USBH_RegisterClass>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d001      	beq.n	800920e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800920a:	f7f7 fd2f 	bl	8000c6c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800920e:	4806      	ldr	r0, [pc, #24]	; (8009228 <MX_USB_HOST_Init+0x44>)
 8009210:	f7fe fdaa 	bl	8007d68 <USBH_Start>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800921a:	f7f7 fd27 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800921e:	bf00      	nop
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	08009245 	.word	0x08009245
 8009228:	2000435c 	.word	0x2000435c
 800922c:	2000000c 	.word	0x2000000c

08009230 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009234:	4802      	ldr	r0, [pc, #8]	; (8009240 <MX_USB_HOST_Process+0x10>)
 8009236:	f7fe fda7 	bl	8007d88 <USBH_Process>
}
 800923a:	bf00      	nop
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	2000435c 	.word	0x2000435c

08009244 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	3b01      	subs	r3, #1
 8009254:	2b04      	cmp	r3, #4
 8009256:	d819      	bhi.n	800928c <USBH_UserProcess+0x48>
 8009258:	a201      	add	r2, pc, #4	; (adr r2, 8009260 <USBH_UserProcess+0x1c>)
 800925a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925e:	bf00      	nop
 8009260:	0800928d 	.word	0x0800928d
 8009264:	0800927d 	.word	0x0800927d
 8009268:	0800928d 	.word	0x0800928d
 800926c:	08009285 	.word	0x08009285
 8009270:	08009275 	.word	0x08009275
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009274:	4b09      	ldr	r3, [pc, #36]	; (800929c <USBH_UserProcess+0x58>)
 8009276:	2203      	movs	r2, #3
 8009278:	701a      	strb	r2, [r3, #0]
  break;
 800927a:	e008      	b.n	800928e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800927c:	4b07      	ldr	r3, [pc, #28]	; (800929c <USBH_UserProcess+0x58>)
 800927e:	2202      	movs	r2, #2
 8009280:	701a      	strb	r2, [r3, #0]
  break;
 8009282:	e004      	b.n	800928e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009284:	4b05      	ldr	r3, [pc, #20]	; (800929c <USBH_UserProcess+0x58>)
 8009286:	2201      	movs	r2, #1
 8009288:	701a      	strb	r2, [r3, #0]
  break;
 800928a:	e000      	b.n	800928e <USBH_UserProcess+0x4a>

  default:
  break;
 800928c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800928e:	bf00      	nop
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	200000b4 	.word	0x200000b4

080092a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b08a      	sub	sp, #40	; 0x28
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092a8:	f107 0314 	add.w	r3, r7, #20
 80092ac:	2200      	movs	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]
 80092b0:	605a      	str	r2, [r3, #4]
 80092b2:	609a      	str	r2, [r3, #8]
 80092b4:	60da      	str	r2, [r3, #12]
 80092b6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092c0:	d147      	bne.n	8009352 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092c2:	2300      	movs	r3, #0
 80092c4:	613b      	str	r3, [r7, #16]
 80092c6:	4b25      	ldr	r3, [pc, #148]	; (800935c <HAL_HCD_MspInit+0xbc>)
 80092c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ca:	4a24      	ldr	r2, [pc, #144]	; (800935c <HAL_HCD_MspInit+0xbc>)
 80092cc:	f043 0301 	orr.w	r3, r3, #1
 80092d0:	6313      	str	r3, [r2, #48]	; 0x30
 80092d2:	4b22      	ldr	r3, [pc, #136]	; (800935c <HAL_HCD_MspInit+0xbc>)
 80092d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	613b      	str	r3, [r7, #16]
 80092dc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80092de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092e4:	2300      	movs	r3, #0
 80092e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092e8:	2300      	movs	r3, #0
 80092ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80092ec:	f107 0314 	add.w	r3, r7, #20
 80092f0:	4619      	mov	r1, r3
 80092f2:	481b      	ldr	r0, [pc, #108]	; (8009360 <HAL_HCD_MspInit+0xc0>)
 80092f4:	f7f9 f8f6 	bl	80024e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80092f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80092fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092fe:	2302      	movs	r3, #2
 8009300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009302:	2300      	movs	r3, #0
 8009304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009306:	2300      	movs	r3, #0
 8009308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800930a:	230a      	movs	r3, #10
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800930e:	f107 0314 	add.w	r3, r7, #20
 8009312:	4619      	mov	r1, r3
 8009314:	4812      	ldr	r0, [pc, #72]	; (8009360 <HAL_HCD_MspInit+0xc0>)
 8009316:	f7f9 f8e5 	bl	80024e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800931a:	4b10      	ldr	r3, [pc, #64]	; (800935c <HAL_HCD_MspInit+0xbc>)
 800931c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800931e:	4a0f      	ldr	r2, [pc, #60]	; (800935c <HAL_HCD_MspInit+0xbc>)
 8009320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009324:	6353      	str	r3, [r2, #52]	; 0x34
 8009326:	2300      	movs	r3, #0
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	4b0c      	ldr	r3, [pc, #48]	; (800935c <HAL_HCD_MspInit+0xbc>)
 800932c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800932e:	4a0b      	ldr	r2, [pc, #44]	; (800935c <HAL_HCD_MspInit+0xbc>)
 8009330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009334:	6453      	str	r3, [r2, #68]	; 0x44
 8009336:	4b09      	ldr	r3, [pc, #36]	; (800935c <HAL_HCD_MspInit+0xbc>)
 8009338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800933a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800933e:	60fb      	str	r3, [r7, #12]
 8009340:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009342:	2200      	movs	r2, #0
 8009344:	2100      	movs	r1, #0
 8009346:	2043      	movs	r0, #67	; 0x43
 8009348:	f7f8 fd25 	bl	8001d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800934c:	2043      	movs	r0, #67	; 0x43
 800934e:	f7f8 fd3e 	bl	8001dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009352:	bf00      	nop
 8009354:	3728      	adds	r7, #40	; 0x28
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	40023800 	.word	0x40023800
 8009360:	40020000 	.word	0x40020000

08009364 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009372:	4618      	mov	r0, r3
 8009374:	f7ff f8db 	bl	800852e <USBH_LL_IncTimer>
}
 8009378:	bf00      	nop
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800938e:	4618      	mov	r0, r3
 8009390:	f7ff f913 	bl	80085ba <USBH_LL_Connect>
}
 8009394:	bf00      	nop
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7ff f91c 	bl	80085e8 <USBH_LL_Disconnect>
}
 80093b0:	bf00      	nop
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
 80093c4:	4613      	mov	r3, r2
 80093c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff f8cd 	bl	8008582 <USBH_LL_PortEnabled>
}
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80093fe:	4618      	mov	r0, r3
 8009400:	f7ff f8cd 	bl	800859e <USBH_LL_PortDisabled>
}
 8009404:	bf00      	nop
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800941a:	2b01      	cmp	r3, #1
 800941c:	d12a      	bne.n	8009474 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800941e:	4a18      	ldr	r2, [pc, #96]	; (8009480 <USBH_LL_Init+0x74>)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a15      	ldr	r2, [pc, #84]	; (8009480 <USBH_LL_Init+0x74>)
 800942a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800942e:	4b14      	ldr	r3, [pc, #80]	; (8009480 <USBH_LL_Init+0x74>)
 8009430:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009434:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009436:	4b12      	ldr	r3, [pc, #72]	; (8009480 <USBH_LL_Init+0x74>)
 8009438:	2208      	movs	r2, #8
 800943a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800943c:	4b10      	ldr	r3, [pc, #64]	; (8009480 <USBH_LL_Init+0x74>)
 800943e:	2201      	movs	r2, #1
 8009440:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009442:	4b0f      	ldr	r3, [pc, #60]	; (8009480 <USBH_LL_Init+0x74>)
 8009444:	2200      	movs	r2, #0
 8009446:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009448:	4b0d      	ldr	r3, [pc, #52]	; (8009480 <USBH_LL_Init+0x74>)
 800944a:	2202      	movs	r2, #2
 800944c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800944e:	4b0c      	ldr	r3, [pc, #48]	; (8009480 <USBH_LL_Init+0x74>)
 8009450:	2200      	movs	r2, #0
 8009452:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009454:	480a      	ldr	r0, [pc, #40]	; (8009480 <USBH_LL_Init+0x74>)
 8009456:	f7f9 fa2c 	bl	80028b2 <HAL_HCD_Init>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009460:	f7f7 fc04 	bl	8000c6c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009464:	4806      	ldr	r0, [pc, #24]	; (8009480 <USBH_LL_Init+0x74>)
 8009466:	f7f9 fe09 	bl	800307c <HAL_HCD_GetCurrentFrame>
 800946a:	4603      	mov	r3, r0
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7ff f84e 	bl	8008510 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20004734 	.word	0x20004734

08009484 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800949a:	4618      	mov	r0, r3
 800949c:	f7f9 fd78 	bl	8002f90 <HAL_HCD_Start>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 f95c 	bl	8009764 <USBH_Get_USB_Status>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c2:	2300      	movs	r3, #0
 80094c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7f9 fd80 	bl	8002fd6 <HAL_HCD_Stop>
 80094d6:	4603      	mov	r3, r0
 80094d8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094da:	7bfb      	ldrb	r3, [r7, #15]
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 f941 	bl	8009764 <USBH_Get_USB_Status>
 80094e2:	4603      	mov	r3, r0
 80094e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3710      	adds	r7, #16
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80094f8:	2301      	movs	r3, #1
 80094fa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009502:	4618      	mov	r0, r3
 8009504:	f7f9 fdc8 	bl	8003098 <HAL_HCD_GetCurrentSpeed>
 8009508:	4603      	mov	r3, r0
 800950a:	2b02      	cmp	r3, #2
 800950c:	d00c      	beq.n	8009528 <USBH_LL_GetSpeed+0x38>
 800950e:	2b02      	cmp	r3, #2
 8009510:	d80d      	bhi.n	800952e <USBH_LL_GetSpeed+0x3e>
 8009512:	2b00      	cmp	r3, #0
 8009514:	d002      	beq.n	800951c <USBH_LL_GetSpeed+0x2c>
 8009516:	2b01      	cmp	r3, #1
 8009518:	d003      	beq.n	8009522 <USBH_LL_GetSpeed+0x32>
 800951a:	e008      	b.n	800952e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800951c:	2300      	movs	r3, #0
 800951e:	73fb      	strb	r3, [r7, #15]
    break;
 8009520:	e008      	b.n	8009534 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009522:	2301      	movs	r3, #1
 8009524:	73fb      	strb	r3, [r7, #15]
    break;
 8009526:	e005      	b.n	8009534 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009528:	2302      	movs	r3, #2
 800952a:	73fb      	strb	r3, [r7, #15]
    break;
 800952c:	e002      	b.n	8009534 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800952e:	2301      	movs	r3, #1
 8009530:	73fb      	strb	r3, [r7, #15]
    break;
 8009532:	bf00      	nop
  }
  return  speed;
 8009534:	7bfb      	ldrb	r3, [r7, #15]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b084      	sub	sp, #16
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009554:	4618      	mov	r0, r3
 8009556:	f7f9 fd5b 	bl	8003010 <HAL_HCD_ResetPort>
 800955a:	4603      	mov	r3, r0
 800955c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800955e:	7bfb      	ldrb	r3, [r7, #15]
 8009560:	4618      	mov	r0, r3
 8009562:	f000 f8ff 	bl	8009764 <USBH_Get_USB_Status>
 8009566:	4603      	mov	r3, r0
 8009568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800956a:	7bbb      	ldrb	r3, [r7, #14]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	460b      	mov	r3, r1
 800957e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009586:	78fa      	ldrb	r2, [r7, #3]
 8009588:	4611      	mov	r1, r2
 800958a:	4618      	mov	r0, r3
 800958c:	f7f9 fd62 	bl	8003054 <HAL_HCD_HC_GetXferCount>
 8009590:	4603      	mov	r3, r0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800959a:	b590      	push	{r4, r7, lr}
 800959c:	b089      	sub	sp, #36	; 0x24
 800959e:	af04      	add	r7, sp, #16
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	4608      	mov	r0, r1
 80095a4:	4611      	mov	r1, r2
 80095a6:	461a      	mov	r2, r3
 80095a8:	4603      	mov	r3, r0
 80095aa:	70fb      	strb	r3, [r7, #3]
 80095ac:	460b      	mov	r3, r1
 80095ae:	70bb      	strb	r3, [r7, #2]
 80095b0:	4613      	mov	r3, r2
 80095b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095b8:	2300      	movs	r3, #0
 80095ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80095c2:	787c      	ldrb	r4, [r7, #1]
 80095c4:	78ba      	ldrb	r2, [r7, #2]
 80095c6:	78f9      	ldrb	r1, [r7, #3]
 80095c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095ca:	9302      	str	r3, [sp, #8]
 80095cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	4623      	mov	r3, r4
 80095da:	f7f9 f9cc 	bl	8002976 <HAL_HCD_HC_Init>
 80095de:	4603      	mov	r3, r0
 80095e0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 f8bd 	bl	8009764 <USBH_Get_USB_Status>
 80095ea:	4603      	mov	r3, r0
 80095ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd90      	pop	{r4, r7, pc}

080095f8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	460b      	mov	r3, r1
 8009602:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009612:	78fa      	ldrb	r2, [r7, #3]
 8009614:	4611      	mov	r1, r2
 8009616:	4618      	mov	r0, r3
 8009618:	f7f9 fa3c 	bl	8002a94 <HAL_HCD_HC_Halt>
 800961c:	4603      	mov	r3, r0
 800961e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	4618      	mov	r0, r3
 8009624:	f000 f89e 	bl	8009764 <USBH_Get_USB_Status>
 8009628:	4603      	mov	r3, r0
 800962a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800962c:	7bbb      	ldrb	r3, [r7, #14]
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009636:	b590      	push	{r4, r7, lr}
 8009638:	b089      	sub	sp, #36	; 0x24
 800963a:	af04      	add	r7, sp, #16
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	4608      	mov	r0, r1
 8009640:	4611      	mov	r1, r2
 8009642:	461a      	mov	r2, r3
 8009644:	4603      	mov	r3, r0
 8009646:	70fb      	strb	r3, [r7, #3]
 8009648:	460b      	mov	r3, r1
 800964a:	70bb      	strb	r3, [r7, #2]
 800964c:	4613      	mov	r3, r2
 800964e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800965e:	787c      	ldrb	r4, [r7, #1]
 8009660:	78ba      	ldrb	r2, [r7, #2]
 8009662:	78f9      	ldrb	r1, [r7, #3]
 8009664:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009668:	9303      	str	r3, [sp, #12]
 800966a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800966c:	9302      	str	r3, [sp, #8]
 800966e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009670:	9301      	str	r3, [sp, #4]
 8009672:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	4623      	mov	r3, r4
 800967a:	f7f9 fa2f 	bl	8002adc <HAL_HCD_HC_SubmitRequest>
 800967e:	4603      	mov	r3, r0
 8009680:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009682:	7bfb      	ldrb	r3, [r7, #15]
 8009684:	4618      	mov	r0, r3
 8009686:	f000 f86d 	bl	8009764 <USBH_Get_USB_Status>
 800968a:	4603      	mov	r3, r0
 800968c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800968e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	bd90      	pop	{r4, r7, pc}

08009698 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	460b      	mov	r3, r1
 80096a2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096aa:	78fa      	ldrb	r2, [r7, #3]
 80096ac:	4611      	mov	r1, r2
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7f9 fcbc 	bl	800302c <HAL_HCD_HC_GetURBState>
 80096b4:	4603      	mov	r3, r0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b082      	sub	sp, #8
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	460b      	mov	r3, r1
 80096c8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d103      	bne.n	80096dc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80096d4:	78fb      	ldrb	r3, [r7, #3]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 f870 	bl	80097bc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80096dc:	20c8      	movs	r0, #200	; 0xc8
 80096de:	f7f7 fe4f 	bl	8001380 <HAL_Delay>
  return USBH_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	70fb      	strb	r3, [r7, #3]
 80096f8:	4613      	mov	r3, r2
 80096fa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009702:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	212c      	movs	r1, #44	; 0x2c
 800970a:	fb01 f303 	mul.w	r3, r1, r3
 800970e:	4413      	add	r3, r2
 8009710:	333b      	adds	r3, #59	; 0x3b
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d009      	beq.n	800972c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009718:	78fb      	ldrb	r3, [r7, #3]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	212c      	movs	r1, #44	; 0x2c
 800971e:	fb01 f303 	mul.w	r3, r1, r3
 8009722:	4413      	add	r3, r2
 8009724:	3354      	adds	r3, #84	; 0x54
 8009726:	78ba      	ldrb	r2, [r7, #2]
 8009728:	701a      	strb	r2, [r3, #0]
 800972a:	e008      	b.n	800973e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	212c      	movs	r1, #44	; 0x2c
 8009732:	fb01 f303 	mul.w	r3, r1, r3
 8009736:	4413      	add	r3, r2
 8009738:	3355      	adds	r3, #85	; 0x55
 800973a:	78ba      	ldrb	r2, [r7, #2]
 800973c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f7f7 fe13 	bl	8001380 <HAL_Delay>
}
 800975a:	bf00      	nop
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
	...

08009764 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	4603      	mov	r3, r0
 800976c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009772:	79fb      	ldrb	r3, [r7, #7]
 8009774:	2b03      	cmp	r3, #3
 8009776:	d817      	bhi.n	80097a8 <USBH_Get_USB_Status+0x44>
 8009778:	a201      	add	r2, pc, #4	; (adr r2, 8009780 <USBH_Get_USB_Status+0x1c>)
 800977a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977e:	bf00      	nop
 8009780:	08009791 	.word	0x08009791
 8009784:	08009797 	.word	0x08009797
 8009788:	0800979d 	.word	0x0800979d
 800978c:	080097a3 	.word	0x080097a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]
    break;
 8009794:	e00b      	b.n	80097ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009796:	2302      	movs	r3, #2
 8009798:	73fb      	strb	r3, [r7, #15]
    break;
 800979a:	e008      	b.n	80097ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800979c:	2301      	movs	r3, #1
 800979e:	73fb      	strb	r3, [r7, #15]
    break;
 80097a0:	e005      	b.n	80097ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80097a2:	2302      	movs	r3, #2
 80097a4:	73fb      	strb	r3, [r7, #15]
    break;
 80097a6:	e002      	b.n	80097ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80097a8:	2302      	movs	r3, #2
 80097aa:	73fb      	strb	r3, [r7, #15]
    break;
 80097ac:	bf00      	nop
  }
  return usb_status;
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4603      	mov	r3, r0
 80097c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80097c6:	79fb      	ldrb	r3, [r7, #7]
 80097c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80097d0:	2301      	movs	r3, #1
 80097d2:	73fb      	strb	r3, [r7, #15]
 80097d4:	e001      	b.n	80097da <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80097d6:	2300      	movs	r3, #0
 80097d8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	461a      	mov	r2, r3
 80097de:	2101      	movs	r1, #1
 80097e0:	4803      	ldr	r0, [pc, #12]	; (80097f0 <MX_DriverVbusFS+0x34>)
 80097e2:	f7f9 f833 	bl	800284c <HAL_GPIO_WritePin>
}
 80097e6:	bf00      	nop
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	40020800 	.word	0x40020800

080097f4 <__errno>:
 80097f4:	4b01      	ldr	r3, [pc, #4]	; (80097fc <__errno+0x8>)
 80097f6:	6818      	ldr	r0, [r3, #0]
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	2000002c 	.word	0x2000002c

08009800 <__libc_init_array>:
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	4d0d      	ldr	r5, [pc, #52]	; (8009838 <__libc_init_array+0x38>)
 8009804:	4c0d      	ldr	r4, [pc, #52]	; (800983c <__libc_init_array+0x3c>)
 8009806:	1b64      	subs	r4, r4, r5
 8009808:	10a4      	asrs	r4, r4, #2
 800980a:	2600      	movs	r6, #0
 800980c:	42a6      	cmp	r6, r4
 800980e:	d109      	bne.n	8009824 <__libc_init_array+0x24>
 8009810:	4d0b      	ldr	r5, [pc, #44]	; (8009840 <__libc_init_array+0x40>)
 8009812:	4c0c      	ldr	r4, [pc, #48]	; (8009844 <__libc_init_array+0x44>)
 8009814:	f000 f8f8 	bl	8009a08 <_init>
 8009818:	1b64      	subs	r4, r4, r5
 800981a:	10a4      	asrs	r4, r4, #2
 800981c:	2600      	movs	r6, #0
 800981e:	42a6      	cmp	r6, r4
 8009820:	d105      	bne.n	800982e <__libc_init_array+0x2e>
 8009822:	bd70      	pop	{r4, r5, r6, pc}
 8009824:	f855 3b04 	ldr.w	r3, [r5], #4
 8009828:	4798      	blx	r3
 800982a:	3601      	adds	r6, #1
 800982c:	e7ee      	b.n	800980c <__libc_init_array+0xc>
 800982e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009832:	4798      	blx	r3
 8009834:	3601      	adds	r6, #1
 8009836:	e7f2      	b.n	800981e <__libc_init_array+0x1e>
 8009838:	08009a4c 	.word	0x08009a4c
 800983c:	08009a4c 	.word	0x08009a4c
 8009840:	08009a4c 	.word	0x08009a4c
 8009844:	08009a50 	.word	0x08009a50

08009848 <malloc>:
 8009848:	4b02      	ldr	r3, [pc, #8]	; (8009854 <malloc+0xc>)
 800984a:	4601      	mov	r1, r0
 800984c:	6818      	ldr	r0, [r3, #0]
 800984e:	f000 b863 	b.w	8009918 <_malloc_r>
 8009852:	bf00      	nop
 8009854:	2000002c 	.word	0x2000002c

08009858 <free>:
 8009858:	4b02      	ldr	r3, [pc, #8]	; (8009864 <free+0xc>)
 800985a:	4601      	mov	r1, r0
 800985c:	6818      	ldr	r0, [r3, #0]
 800985e:	f000 b80b 	b.w	8009878 <_free_r>
 8009862:	bf00      	nop
 8009864:	2000002c 	.word	0x2000002c

08009868 <memset>:
 8009868:	4402      	add	r2, r0
 800986a:	4603      	mov	r3, r0
 800986c:	4293      	cmp	r3, r2
 800986e:	d100      	bne.n	8009872 <memset+0xa>
 8009870:	4770      	bx	lr
 8009872:	f803 1b01 	strb.w	r1, [r3], #1
 8009876:	e7f9      	b.n	800986c <memset+0x4>

08009878 <_free_r>:
 8009878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800987a:	2900      	cmp	r1, #0
 800987c:	d048      	beq.n	8009910 <_free_r+0x98>
 800987e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009882:	9001      	str	r0, [sp, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	f1a1 0404 	sub.w	r4, r1, #4
 800988a:	bfb8      	it	lt
 800988c:	18e4      	addlt	r4, r4, r3
 800988e:	f000 f8ad 	bl	80099ec <__malloc_lock>
 8009892:	4a20      	ldr	r2, [pc, #128]	; (8009914 <_free_r+0x9c>)
 8009894:	9801      	ldr	r0, [sp, #4]
 8009896:	6813      	ldr	r3, [r2, #0]
 8009898:	4615      	mov	r5, r2
 800989a:	b933      	cbnz	r3, 80098aa <_free_r+0x32>
 800989c:	6063      	str	r3, [r4, #4]
 800989e:	6014      	str	r4, [r2, #0]
 80098a0:	b003      	add	sp, #12
 80098a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098a6:	f000 b8a7 	b.w	80099f8 <__malloc_unlock>
 80098aa:	42a3      	cmp	r3, r4
 80098ac:	d90b      	bls.n	80098c6 <_free_r+0x4e>
 80098ae:	6821      	ldr	r1, [r4, #0]
 80098b0:	1862      	adds	r2, r4, r1
 80098b2:	4293      	cmp	r3, r2
 80098b4:	bf04      	itt	eq
 80098b6:	681a      	ldreq	r2, [r3, #0]
 80098b8:	685b      	ldreq	r3, [r3, #4]
 80098ba:	6063      	str	r3, [r4, #4]
 80098bc:	bf04      	itt	eq
 80098be:	1852      	addeq	r2, r2, r1
 80098c0:	6022      	streq	r2, [r4, #0]
 80098c2:	602c      	str	r4, [r5, #0]
 80098c4:	e7ec      	b.n	80098a0 <_free_r+0x28>
 80098c6:	461a      	mov	r2, r3
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	b10b      	cbz	r3, 80098d0 <_free_r+0x58>
 80098cc:	42a3      	cmp	r3, r4
 80098ce:	d9fa      	bls.n	80098c6 <_free_r+0x4e>
 80098d0:	6811      	ldr	r1, [r2, #0]
 80098d2:	1855      	adds	r5, r2, r1
 80098d4:	42a5      	cmp	r5, r4
 80098d6:	d10b      	bne.n	80098f0 <_free_r+0x78>
 80098d8:	6824      	ldr	r4, [r4, #0]
 80098da:	4421      	add	r1, r4
 80098dc:	1854      	adds	r4, r2, r1
 80098de:	42a3      	cmp	r3, r4
 80098e0:	6011      	str	r1, [r2, #0]
 80098e2:	d1dd      	bne.n	80098a0 <_free_r+0x28>
 80098e4:	681c      	ldr	r4, [r3, #0]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	6053      	str	r3, [r2, #4]
 80098ea:	4421      	add	r1, r4
 80098ec:	6011      	str	r1, [r2, #0]
 80098ee:	e7d7      	b.n	80098a0 <_free_r+0x28>
 80098f0:	d902      	bls.n	80098f8 <_free_r+0x80>
 80098f2:	230c      	movs	r3, #12
 80098f4:	6003      	str	r3, [r0, #0]
 80098f6:	e7d3      	b.n	80098a0 <_free_r+0x28>
 80098f8:	6825      	ldr	r5, [r4, #0]
 80098fa:	1961      	adds	r1, r4, r5
 80098fc:	428b      	cmp	r3, r1
 80098fe:	bf04      	itt	eq
 8009900:	6819      	ldreq	r1, [r3, #0]
 8009902:	685b      	ldreq	r3, [r3, #4]
 8009904:	6063      	str	r3, [r4, #4]
 8009906:	bf04      	itt	eq
 8009908:	1949      	addeq	r1, r1, r5
 800990a:	6021      	streq	r1, [r4, #0]
 800990c:	6054      	str	r4, [r2, #4]
 800990e:	e7c7      	b.n	80098a0 <_free_r+0x28>
 8009910:	b003      	add	sp, #12
 8009912:	bd30      	pop	{r4, r5, pc}
 8009914:	200000b8 	.word	0x200000b8

08009918 <_malloc_r>:
 8009918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991a:	1ccd      	adds	r5, r1, #3
 800991c:	f025 0503 	bic.w	r5, r5, #3
 8009920:	3508      	adds	r5, #8
 8009922:	2d0c      	cmp	r5, #12
 8009924:	bf38      	it	cc
 8009926:	250c      	movcc	r5, #12
 8009928:	2d00      	cmp	r5, #0
 800992a:	4606      	mov	r6, r0
 800992c:	db01      	blt.n	8009932 <_malloc_r+0x1a>
 800992e:	42a9      	cmp	r1, r5
 8009930:	d903      	bls.n	800993a <_malloc_r+0x22>
 8009932:	230c      	movs	r3, #12
 8009934:	6033      	str	r3, [r6, #0]
 8009936:	2000      	movs	r0, #0
 8009938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800993a:	f000 f857 	bl	80099ec <__malloc_lock>
 800993e:	4921      	ldr	r1, [pc, #132]	; (80099c4 <_malloc_r+0xac>)
 8009940:	680a      	ldr	r2, [r1, #0]
 8009942:	4614      	mov	r4, r2
 8009944:	b99c      	cbnz	r4, 800996e <_malloc_r+0x56>
 8009946:	4f20      	ldr	r7, [pc, #128]	; (80099c8 <_malloc_r+0xb0>)
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	b923      	cbnz	r3, 8009956 <_malloc_r+0x3e>
 800994c:	4621      	mov	r1, r4
 800994e:	4630      	mov	r0, r6
 8009950:	f000 f83c 	bl	80099cc <_sbrk_r>
 8009954:	6038      	str	r0, [r7, #0]
 8009956:	4629      	mov	r1, r5
 8009958:	4630      	mov	r0, r6
 800995a:	f000 f837 	bl	80099cc <_sbrk_r>
 800995e:	1c43      	adds	r3, r0, #1
 8009960:	d123      	bne.n	80099aa <_malloc_r+0x92>
 8009962:	230c      	movs	r3, #12
 8009964:	6033      	str	r3, [r6, #0]
 8009966:	4630      	mov	r0, r6
 8009968:	f000 f846 	bl	80099f8 <__malloc_unlock>
 800996c:	e7e3      	b.n	8009936 <_malloc_r+0x1e>
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	1b5b      	subs	r3, r3, r5
 8009972:	d417      	bmi.n	80099a4 <_malloc_r+0x8c>
 8009974:	2b0b      	cmp	r3, #11
 8009976:	d903      	bls.n	8009980 <_malloc_r+0x68>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	441c      	add	r4, r3
 800997c:	6025      	str	r5, [r4, #0]
 800997e:	e004      	b.n	800998a <_malloc_r+0x72>
 8009980:	6863      	ldr	r3, [r4, #4]
 8009982:	42a2      	cmp	r2, r4
 8009984:	bf0c      	ite	eq
 8009986:	600b      	streq	r3, [r1, #0]
 8009988:	6053      	strne	r3, [r2, #4]
 800998a:	4630      	mov	r0, r6
 800998c:	f000 f834 	bl	80099f8 <__malloc_unlock>
 8009990:	f104 000b 	add.w	r0, r4, #11
 8009994:	1d23      	adds	r3, r4, #4
 8009996:	f020 0007 	bic.w	r0, r0, #7
 800999a:	1ac2      	subs	r2, r0, r3
 800999c:	d0cc      	beq.n	8009938 <_malloc_r+0x20>
 800999e:	1a1b      	subs	r3, r3, r0
 80099a0:	50a3      	str	r3, [r4, r2]
 80099a2:	e7c9      	b.n	8009938 <_malloc_r+0x20>
 80099a4:	4622      	mov	r2, r4
 80099a6:	6864      	ldr	r4, [r4, #4]
 80099a8:	e7cc      	b.n	8009944 <_malloc_r+0x2c>
 80099aa:	1cc4      	adds	r4, r0, #3
 80099ac:	f024 0403 	bic.w	r4, r4, #3
 80099b0:	42a0      	cmp	r0, r4
 80099b2:	d0e3      	beq.n	800997c <_malloc_r+0x64>
 80099b4:	1a21      	subs	r1, r4, r0
 80099b6:	4630      	mov	r0, r6
 80099b8:	f000 f808 	bl	80099cc <_sbrk_r>
 80099bc:	3001      	adds	r0, #1
 80099be:	d1dd      	bne.n	800997c <_malloc_r+0x64>
 80099c0:	e7cf      	b.n	8009962 <_malloc_r+0x4a>
 80099c2:	bf00      	nop
 80099c4:	200000b8 	.word	0x200000b8
 80099c8:	200000bc 	.word	0x200000bc

080099cc <_sbrk_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4d06      	ldr	r5, [pc, #24]	; (80099e8 <_sbrk_r+0x1c>)
 80099d0:	2300      	movs	r3, #0
 80099d2:	4604      	mov	r4, r0
 80099d4:	4608      	mov	r0, r1
 80099d6:	602b      	str	r3, [r5, #0]
 80099d8:	f7f7 fbee 	bl	80011b8 <_sbrk>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_sbrk_r+0x1a>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_sbrk_r+0x1a>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	20004a38 	.word	0x20004a38

080099ec <__malloc_lock>:
 80099ec:	4801      	ldr	r0, [pc, #4]	; (80099f4 <__malloc_lock+0x8>)
 80099ee:	f000 b809 	b.w	8009a04 <__retarget_lock_acquire_recursive>
 80099f2:	bf00      	nop
 80099f4:	20004a40 	.word	0x20004a40

080099f8 <__malloc_unlock>:
 80099f8:	4801      	ldr	r0, [pc, #4]	; (8009a00 <__malloc_unlock+0x8>)
 80099fa:	f000 b804 	b.w	8009a06 <__retarget_lock_release_recursive>
 80099fe:	bf00      	nop
 8009a00:	20004a40 	.word	0x20004a40

08009a04 <__retarget_lock_acquire_recursive>:
 8009a04:	4770      	bx	lr

08009a06 <__retarget_lock_release_recursive>:
 8009a06:	4770      	bx	lr

08009a08 <_init>:
 8009a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a0a:	bf00      	nop
 8009a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a0e:	bc08      	pop	{r3}
 8009a10:	469e      	mov	lr, r3
 8009a12:	4770      	bx	lr

08009a14 <_fini>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	bf00      	nop
 8009a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1a:	bc08      	pop	{r3}
 8009a1c:	469e      	mov	lr, r3
 8009a1e:	4770      	bx	lr
