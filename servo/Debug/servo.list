
servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800777c  0800777c  0001777c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d4  080077d4  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  080077d4  080077d4  000177d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077dc  080077dc  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077dc  080077dc  000177dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080077e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b64  20000180  08007964  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ce4  08007964  00021ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017266  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032f3  00000000  00000000  00037416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  0003a710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  0003b780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002397d  00000000  00000000  0003c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ad1  00000000  00000000  00060015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbf03  00000000  00000000  00073ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013f9e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004578  00000000  00000000  0013fa3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007764 	.word	0x08007764

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	08007764 	.word	0x08007764

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96e 	b.w	8000ca8 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468c      	mov	ip, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 8083 	bne.w	8000afa <__udivmoddi4+0x116>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4617      	mov	r7, r2
 80009f8:	d947      	bls.n	8000a8a <__udivmoddi4+0xa6>
 80009fa:	fab2 f282 	clz	r2, r2
 80009fe:	b142      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	f1c2 0020 	rsb	r0, r2, #32
 8000a04:	fa24 f000 	lsr.w	r0, r4, r0
 8000a08:	4091      	lsls	r1, r2
 8000a0a:	4097      	lsls	r7, r2
 8000a0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbbc f6f8 	udiv	r6, ip, r8
 8000a1c:	fa1f fe87 	uxth.w	lr, r7
 8000a20:	fb08 c116 	mls	r1, r8, r6, ip
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f10e 	mul.w	r1, r6, lr
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a36:	f080 8119 	bcs.w	8000c6c <__udivmoddi4+0x288>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8116 	bls.w	8000c6c <__udivmoddi4+0x288>
 8000a40:	3e02      	subs	r6, #2
 8000a42:	443b      	add	r3, r7
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a58:	45a6      	cmp	lr, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8105 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a66:	45a6      	cmp	lr, r4
 8000a68:	f240 8102 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	443c      	add	r4, r7
 8000a70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a74:	eba4 040e 	sub.w	r4, r4, lr
 8000a78:	2600      	movs	r6, #0
 8000a7a:	b11d      	cbz	r5, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c5 4300 	strd	r4, r3, [r5]
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	b902      	cbnz	r2, 8000a8e <__udivmoddi4+0xaa>
 8000a8c:	deff      	udf	#255	; 0xff
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d150      	bne.n	8000b38 <__udivmoddi4+0x154>
 8000a96:	1bcb      	subs	r3, r1, r7
 8000a98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	2601      	movs	r6, #1
 8000aa2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000aa6:	0c21      	lsrs	r1, r4, #16
 8000aa8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	d907      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 8000ab8:	1879      	adds	r1, r7, r1
 8000aba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0xe2>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	f200 80e9 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000ac6:	4684      	mov	ip, r0
 8000ac8:	1ac9      	subs	r1, r1, r3
 8000aca:	b2a3      	uxth	r3, r4
 8000acc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ad4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad8:	fb08 f800 	mul.w	r8, r8, r0
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d907      	bls.n	8000af0 <__udivmoddi4+0x10c>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x10a>
 8000ae8:	45a0      	cmp	r8, r4
 8000aea:	f200 80d9 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000aee:	4618      	mov	r0, r3
 8000af0:	eba4 0408 	sub.w	r4, r4, r8
 8000af4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af8:	e7bf      	b.n	8000a7a <__udivmoddi4+0x96>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x12e>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	f000 80b1 	beq.w	8000c66 <__udivmoddi4+0x282>
 8000b04:	2600      	movs	r6, #0
 8000b06:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	fab3 f683 	clz	r6, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d14a      	bne.n	8000bb0 <__udivmoddi4+0x1cc>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0x140>
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	f200 80b8 	bhi.w	8000c94 <__udivmoddi4+0x2b0>
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0103 	sbc.w	r1, r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d0a8      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000b32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b36:	e7a5      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000b38:	f1c2 0320 	rsb	r3, r2, #32
 8000b3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b40:	4097      	lsls	r7, r2
 8000b42:	fa01 f002 	lsl.w	r0, r1, r2
 8000b46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b4a:	40d9      	lsrs	r1, r3
 8000b4c:	4330      	orrs	r0, r6
 8000b4e:	0c03      	lsrs	r3, r0, #16
 8000b50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f108 	mul.w	r1, r6, r8
 8000b64:	4299      	cmp	r1, r3
 8000b66:	fa04 f402 	lsl.w	r4, r4, r2
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x19c>
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b72:	f080 808d 	bcs.w	8000c90 <__udivmoddi4+0x2ac>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 808a 	bls.w	8000c90 <__udivmoddi4+0x2ac>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	443b      	add	r3, r7
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b281      	uxth	r1, r0
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b90:	fb00 f308 	mul.w	r3, r0, r8
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x1c4>
 8000b98:	1879      	adds	r1, r7, r1
 8000b9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b9e:	d273      	bcs.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d971      	bls.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4439      	add	r1, r7
 8000ba8:	1acb      	subs	r3, r1, r3
 8000baa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bae:	e778      	b.n	8000aa2 <__udivmoddi4+0xbe>
 8000bb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bbc:	431c      	orrs	r4, r3
 8000bbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	0c3b      	lsrs	r3, r7, #16
 8000bd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd6:	fa1f f884 	uxth.w	r8, r4
 8000bda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000be2:	fb09 fa08 	mul.w	sl, r9, r8
 8000be6:	458a      	cmp	sl, r1
 8000be8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bec:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x220>
 8000bf2:	1861      	adds	r1, r4, r1
 8000bf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf8:	d248      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfa:	458a      	cmp	sl, r1
 8000bfc:	d946      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000c02:	4421      	add	r1, r4
 8000c04:	eba1 010a 	sub.w	r1, r1, sl
 8000c08:	b2bf      	uxth	r7, r7
 8000c0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c16:	fb00 f808 	mul.w	r8, r0, r8
 8000c1a:	45b8      	cmp	r8, r7
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x24a>
 8000c1e:	19e7      	adds	r7, r4, r7
 8000c20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c24:	d22e      	bcs.n	8000c84 <__udivmoddi4+0x2a0>
 8000c26:	45b8      	cmp	r8, r7
 8000c28:	d92c      	bls.n	8000c84 <__udivmoddi4+0x2a0>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4427      	add	r7, r4
 8000c2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c32:	eba7 0708 	sub.w	r7, r7, r8
 8000c36:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3a:	454f      	cmp	r7, r9
 8000c3c:	46c6      	mov	lr, r8
 8000c3e:	4649      	mov	r1, r9
 8000c40:	d31a      	bcc.n	8000c78 <__udivmoddi4+0x294>
 8000c42:	d017      	beq.n	8000c74 <__udivmoddi4+0x290>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x27a>
 8000c46:	ebb3 020e 	subs.w	r2, r3, lr
 8000c4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c52:	40f2      	lsrs	r2, r6
 8000c54:	ea4c 0202 	orr.w	r2, ip, r2
 8000c58:	40f7      	lsrs	r7, r6
 8000c5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e70b      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e9      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6fd      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c74:	4543      	cmp	r3, r8
 8000c76:	d2e5      	bcs.n	8000c44 <__udivmoddi4+0x260>
 8000c78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7df      	b.n	8000c44 <__udivmoddi4+0x260>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e7d2      	b.n	8000c2e <__udivmoddi4+0x24a>
 8000c88:	4660      	mov	r0, ip
 8000c8a:	e78d      	b.n	8000ba8 <__udivmoddi4+0x1c4>
 8000c8c:	4681      	mov	r9, r0
 8000c8e:	e7b9      	b.n	8000c04 <__udivmoddi4+0x220>
 8000c90:	4666      	mov	r6, ip
 8000c92:	e775      	b.n	8000b80 <__udivmoddi4+0x19c>
 8000c94:	4630      	mov	r0, r6
 8000c96:	e74a      	b.n	8000b2e <__udivmoddi4+0x14a>
 8000c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c9c:	4439      	add	r1, r7
 8000c9e:	e713      	b.n	8000ac8 <__udivmoddi4+0xe4>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	e724      	b.n	8000af0 <__udivmoddi4+0x10c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb0:	f000 faa4 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb4:	f000 f816 	bl	8000ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb8:	f000 f8d8 	bl	8000e6c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cbc:	f000 f87e 	bl	8000dbc <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000cc0:	f006 f830 	bl	8006d24 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <main+0x30>)
 8000cc8:	f002 fc2e 	bl	8003528 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000ccc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <main+0x34>)
 8000cd2:	f000 fdf0 	bl	80018b6 <HAL_GPIO_TogglePin>
 //HAL_Delay(2000);
  //htim2.Instance->CCR1 =5*2000/20;  // duty cycle is 2.5 ms

 // HAL_Delay(2000);

servo_sweep();
 8000cd6:	f000 f975 	bl	8000fc4 <servo_sweep>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000cda:	e7f7      	b.n	8000ccc <main+0x20>
 8000cdc:	200003c0 	.word	0x200003c0
 8000ce0:	40020c00 	.word	0x40020c00

08000ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b094      	sub	sp, #80	; 0x50
 8000ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2230      	movs	r2, #48	; 0x30
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f006 fd2e 	bl	8007754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <SystemClock_Config+0xd0>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	4a28      	ldr	r2, [pc, #160]	; (8000db4 <SystemClock_Config+0xd0>)
 8000d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d16:	6413      	str	r3, [r2, #64]	; 0x40
 8000d18:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <SystemClock_Config+0xd0>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d24:	2300      	movs	r3, #0
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <SystemClock_Config+0xd4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <SystemClock_Config+0xd4>)
 8000d2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <SystemClock_Config+0xd4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d40:	2303      	movs	r3, #3
 8000d42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d4e:	2310      	movs	r3, #16
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d52:	2302      	movs	r3, #2
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d60:	2348      	movs	r3, #72	; 0x48
 8000d62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 ff3d 	bl	8002bf0 <HAL_RCC_OscConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d7c:	f000 f948 	bl	8001010 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d80:	230f      	movs	r3, #15
 8000d82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 f9a0 	bl	80030e0 <HAL_RCC_ClockConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000da6:	f000 f933 	bl	8001010 <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	3750      	adds	r7, #80	; 0x50
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40007000 	.word	0x40007000

08000dbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc2:	f107 0320 	add.w	r3, r7, #32
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]
 8000dda:	615a      	str	r2, [r3, #20]
 8000ddc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dde:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <MX_TIM2_Init+0xac>)
 8000de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <MX_TIM2_Init+0xac>)
 8000de8:	229f      	movs	r2, #159	; 0x9f
 8000dea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <MX_TIM2_Init+0xac>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_TIM2_Init+0xac>)
 8000df4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000df8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_TIM2_Init+0xac>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e00:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_TIM2_Init+0xac>)
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e06:	4818      	ldr	r0, [pc, #96]	; (8000e68 <MX_TIM2_Init+0xac>)
 8000e08:	f002 fb3e 	bl	8003488 <HAL_TIM_PWM_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000e12:	f000 f8fd 	bl	8001010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	4619      	mov	r1, r3
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <MX_TIM2_Init+0xac>)
 8000e26:	f002 ff7b 	bl	8003d20 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e30:	f000 f8ee 	bl	8001010 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e34:	2360      	movs	r3, #96	; 0x60
 8000e36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8000e38:	2332      	movs	r3, #50	; 0x32
 8000e3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4807      	ldr	r0, [pc, #28]	; (8000e68 <MX_TIM2_Init+0xac>)
 8000e4c:	f002 fc34 	bl	80036b8 <HAL_TIM_PWM_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000e56:	f000 f8db 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <MX_TIM2_Init+0xac>)
 8000e5c:	f000 f926 	bl	80010ac <HAL_TIM_MspPostInit>

}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200003c0 	.word	0x200003c0

08000e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <MX_GPIO_Init+0x9c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a1f      	ldr	r2, [pc, #124]	; (8000f08 <MX_GPIO_Init+0x9c>)
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <MX_GPIO_Init+0x9c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <MX_GPIO_Init+0x9c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a18      	ldr	r2, [pc, #96]	; (8000f08 <MX_GPIO_Init+0x9c>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_GPIO_Init+0x9c>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_GPIO_Init+0x9c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <MX_GPIO_Init+0x9c>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_GPIO_Init+0x9c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <MX_GPIO_Init+0xa0>)
 8000ede:	f000 fcd1 	bl	8001884 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef4:	f107 030c 	add.w	r3, r7, #12
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4804      	ldr	r0, [pc, #16]	; (8000f0c <MX_GPIO_Init+0xa0>)
 8000efc:	f000 fb26 	bl	800154c <HAL_GPIO_Init>

}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020c00 	.word	0x40020c00

08000f10 <map>:

/* USER CODE BEGIN 4 */
int map(int st1, int fn1, int st2, int fn2, int value)
{
 8000f10:	b5b0      	push	{r4, r5, r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	603b      	str	r3, [r7, #0]
    return (1.0*(value-st1))/((fn1-st1)*1.0) * (fn2-st2)+st2;
 8000f1e:	6a3a      	ldr	r2, [r7, #32]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff faa1 	bl	800046c <__aeabi_i2d>
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	460d      	mov	r5, r1
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fa99 	bl	800046c <__aeabi_i2d>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4620      	mov	r0, r4
 8000f40:	4629      	mov	r1, r5
 8000f42:	f7ff fc27 	bl	8000794 <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4614      	mov	r4, r2
 8000f4c:	461d      	mov	r5, r3
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fa89 	bl	800046c <__aeabi_i2d>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4620      	mov	r0, r4
 8000f60:	4629      	mov	r1, r5
 8000f62:	f7ff faed 	bl	8000540 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4614      	mov	r4, r2
 8000f6c:	461d      	mov	r5, r3
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff fa7c 	bl	800046c <__aeabi_i2d>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4620      	mov	r0, r4
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	f7ff f92a 	bl	80001d4 <__adddf3>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff fcec 	bl	8000964 <__aeabi_d2iz>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000f98 <servo_write>:
void servo_write(int angle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	6078      	str	r0, [r7, #4]
	htim2.Instance->CCR1 = map(0,180,50,250,angle);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	23fa      	movs	r3, #250	; 0xfa
 8000fa6:	2232      	movs	r2, #50	; 0x32
 8000fa8:	21b4      	movs	r1, #180	; 0xb4
 8000faa:	2000      	movs	r0, #0
 8000fac:	f7ff ffb0 	bl	8000f10 <map>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <servo_write+0x28>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200003c0 	.word	0x200003c0

08000fc4 <servo_sweep>:
void servo_sweep(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
		for(int i = 0; i <= 180; i++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	e008      	b.n	8000fe2 <servo_sweep+0x1e>
		{
			servo_write(i);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ffe1 	bl	8000f98 <servo_write>
			HAL_Delay(10);
 8000fd6:	200a      	movs	r0, #10
 8000fd8:	f000 f982 	bl	80012e0 <HAL_Delay>
		for(int i = 0; i <= 180; i++)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2bb4      	cmp	r3, #180	; 0xb4
 8000fe6:	ddf3      	ble.n	8000fd0 <servo_sweep+0xc>
		}
		for(int i = 180; i >= 0; i--)
 8000fe8:	23b4      	movs	r3, #180	; 0xb4
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	e008      	b.n	8001000 <servo_sweep+0x3c>
		{
			servo_write(i);
 8000fee:	6838      	ldr	r0, [r7, #0]
 8000ff0:	f7ff ffd2 	bl	8000f98 <servo_write>
			HAL_Delay(10);
 8000ff4:	200a      	movs	r0, #10
 8000ff6:	f000 f973 	bl	80012e0 <HAL_Delay>
		for(int i = 180; i >= 0; i--)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	daf3      	bge.n	8000fee <servo_sweep+0x2a>
		}
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001014:	b672      	cpsid	i
}
 8001016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001018:	e7fe      	b.n	8001018 <Error_Handler+0x8>
	...

0800101c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <HAL_MspInit+0x4c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <HAL_MspInit+0x4c>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_MspInit+0x4c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_MspInit+0x4c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a08      	ldr	r2, [pc, #32]	; (8001068 <HAL_MspInit+0x4c>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_MspInit+0x4c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800

0800106c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800107c:	d10d      	bne.n	800109a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010cc:	d11d      	bne.n	800110a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <HAL_TIM_MspPostInit+0x68>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <HAL_TIM_MspPostInit+0x68>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <HAL_TIM_MspPostInit+0x68>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010ea:	2301      	movs	r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010fa:	2301      	movs	r3, #1
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	4619      	mov	r1, r3
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <HAL_TIM_MspPostInit+0x6c>)
 8001106:	f000 fa21 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3720      	adds	r7, #32
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <NMI_Handler+0x4>

08001122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <HardFault_Handler+0x4>

08001128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <MemManage_Handler+0x4>

0800112e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <BusFault_Handler+0x4>

08001134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <UsageFault_Handler+0x4>

0800113a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001168:	f000 f89a 	bl	80012a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <OTG_FS_IRQHandler+0x10>)
 8001176:	f000 fd08 	bl	8001b8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200018dc 	.word	0x200018dc

08001184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <SystemInit+0x20>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <SystemInit+0x20>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ae:	490e      	ldr	r1, [pc, #56]	; (80011e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b0:	4a0e      	ldr	r2, [pc, #56]	; (80011ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c4:	4c0b      	ldr	r4, [pc, #44]	; (80011f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011d2:	f7ff ffd7 	bl	8001184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d6:	f006 fa99 	bl	800770c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011da:	f7ff fd67 	bl	8000cac <main>
  bx  lr    
 80011de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80011ec:	080077e4 	.word	0x080077e4
  ldr r2, =_sbss
 80011f0:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80011f4:	20001ce4 	.word	0x20001ce4

080011f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <ADC_IRQHandler>
	...

080011fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_Init+0x40>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <HAL_Init+0x40>)
 8001206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_Init+0x40>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0a      	ldr	r2, [pc, #40]	; (800123c <HAL_Init+0x40>)
 8001212:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001216:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a07      	ldr	r2, [pc, #28]	; (800123c <HAL_Init+0x40>)
 800121e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001222:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001224:	2003      	movs	r0, #3
 8001226:	f000 f94f 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122a:	2000      	movs	r0, #0
 800122c:	f000 f808 	bl	8001240 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001230:	f7ff fef4 	bl	800101c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023c00 	.word	0x40023c00

08001240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_InitTick+0x54>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x58>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	fbb3 f3f1 	udiv	r3, r3, r1
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f967 	bl	8001532 <HAL_SYSTICK_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e00e      	b.n	800128c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d80a      	bhi.n	800128a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001274:	2200      	movs	r2, #0
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f000 f92f 	bl	80014de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001280:	4a06      	ldr	r2, [pc, #24]	; (800129c <HAL_InitTick+0x5c>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000000 	.word	0x20000000
 8001298:	20000008 	.word	0x20000008
 800129c:	20000004 	.word	0x20000004

080012a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x20>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x24>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_IncTick+0x24>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000408 	.word	0x20000408

080012c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <HAL_GetTick+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000408 	.word	0x20000408

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff ffee 	bl	80012c8 <HAL_GetTick>
 80012ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d005      	beq.n	8001306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_Delay+0x44>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001306:	bf00      	nop
 8001308:	f7ff ffde 	bl	80012c8 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d8f7      	bhi.n	8001308 <HAL_Delay+0x28>
  {
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000008 	.word	0x20000008

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0b      	blt.n	80013b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 021f 	and.w	r2, r3, #31
 80013a4:	4907      	ldr	r1, [pc, #28]	; (80013c4 <__NVIC_EnableIRQ+0x38>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	095b      	lsrs	r3, r3, #5
 80013ac:	2001      	movs	r0, #1
 80013ae:	fa00 f202 	lsl.w	r2, r0, r2
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000e100 	.word	0xe000e100

080013c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	db0a      	blt.n	80013f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	490c      	ldr	r1, [pc, #48]	; (8001414 <__NVIC_SetPriority+0x4c>)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	0112      	lsls	r2, r2, #4
 80013e8:	b2d2      	uxtb	r2, r2
 80013ea:	440b      	add	r3, r1
 80013ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f0:	e00a      	b.n	8001408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4908      	ldr	r1, [pc, #32]	; (8001418 <__NVIC_SetPriority+0x50>)
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	3b04      	subs	r3, #4
 8001400:	0112      	lsls	r2, r2, #4
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	440b      	add	r3, r1
 8001406:	761a      	strb	r2, [r3, #24]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f1c3 0307 	rsb	r3, r3, #7
 8001436:	2b04      	cmp	r3, #4
 8001438:	bf28      	it	cs
 800143a:	2304      	movcs	r3, #4
 800143c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	3304      	adds	r3, #4
 8001442:	2b06      	cmp	r3, #6
 8001444:	d902      	bls.n	800144c <NVIC_EncodePriority+0x30>
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3b03      	subs	r3, #3
 800144a:	e000      	b.n	800144e <NVIC_EncodePriority+0x32>
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	43da      	mvns	r2, r3
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	401a      	ands	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	fa01 f303 	lsl.w	r3, r1, r3
 800146e:	43d9      	mvns	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	4313      	orrs	r3, r2
         );
}
 8001476:	4618      	mov	r0, r3
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001494:	d301      	bcc.n	800149a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001496:	2301      	movs	r3, #1
 8001498:	e00f      	b.n	80014ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <SysTick_Config+0x40>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a2:	210f      	movs	r1, #15
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f7ff ff8e 	bl	80013c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SysTick_Config+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <SysTick_Config+0x40>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff29 	bl	8001328 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff3e 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff8e 	bl	800141c <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5d 	bl	80013c8 <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff31 	bl	800138c <__NVIC_EnableIRQ>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa2 	bl	8001484 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	e16b      	b.n	8001840 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 815a 	bne.w	800183a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d005      	beq.n	800159e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159a:	2b02      	cmp	r3, #2
 800159c:	d130      	bne.n	8001600 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	2203      	movs	r2, #3
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 0201 	and.w	r2, r3, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b03      	cmp	r3, #3
 800160a:	d017      	beq.n	800163c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d123      	bne.n	8001690 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0203 	and.w	r2, r3, #3
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80b4 	beq.w	800183a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b60      	ldr	r3, [pc, #384]	; (8001858 <HAL_GPIO_Init+0x30c>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	4a5f      	ldr	r2, [pc, #380]	; (8001858 <HAL_GPIO_Init+0x30c>)
 80016dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e0:	6453      	str	r3, [r2, #68]	; 0x44
 80016e2:	4b5d      	ldr	r3, [pc, #372]	; (8001858 <HAL_GPIO_Init+0x30c>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ee:	4a5b      	ldr	r2, [pc, #364]	; (800185c <HAL_GPIO_Init+0x310>)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	220f      	movs	r2, #15
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a52      	ldr	r2, [pc, #328]	; (8001860 <HAL_GPIO_Init+0x314>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d02b      	beq.n	8001772 <HAL_GPIO_Init+0x226>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a51      	ldr	r2, [pc, #324]	; (8001864 <HAL_GPIO_Init+0x318>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d025      	beq.n	800176e <HAL_GPIO_Init+0x222>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a50      	ldr	r2, [pc, #320]	; (8001868 <HAL_GPIO_Init+0x31c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d01f      	beq.n	800176a <HAL_GPIO_Init+0x21e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4f      	ldr	r2, [pc, #316]	; (800186c <HAL_GPIO_Init+0x320>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d019      	beq.n	8001766 <HAL_GPIO_Init+0x21a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4e      	ldr	r2, [pc, #312]	; (8001870 <HAL_GPIO_Init+0x324>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x216>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4d      	ldr	r2, [pc, #308]	; (8001874 <HAL_GPIO_Init+0x328>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x212>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4c      	ldr	r2, [pc, #304]	; (8001878 <HAL_GPIO_Init+0x32c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x20e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4b      	ldr	r2, [pc, #300]	; (800187c <HAL_GPIO_Init+0x330>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x20a>
 8001752:	2307      	movs	r3, #7
 8001754:	e00e      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001756:	2308      	movs	r3, #8
 8001758:	e00c      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800175a:	2306      	movs	r3, #6
 800175c:	e00a      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800175e:	2305      	movs	r3, #5
 8001760:	e008      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001762:	2304      	movs	r3, #4
 8001764:	e006      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001766:	2303      	movs	r3, #3
 8001768:	e004      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800176a:	2302      	movs	r3, #2
 800176c:	e002      	b.n	8001774 <HAL_GPIO_Init+0x228>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <HAL_GPIO_Init+0x228>
 8001772:	2300      	movs	r3, #0
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	f002 0203 	and.w	r2, r2, #3
 800177a:	0092      	lsls	r2, r2, #2
 800177c:	4093      	lsls	r3, r2
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001784:	4935      	ldr	r1, [pc, #212]	; (800185c <HAL_GPIO_Init+0x310>)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	089b      	lsrs	r3, r3, #2
 800178a:	3302      	adds	r3, #2
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <HAL_GPIO_Init+0x334>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017b6:	4a32      	ldr	r2, [pc, #200]	; (8001880 <HAL_GPIO_Init+0x334>)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017bc:	4b30      	ldr	r3, [pc, #192]	; (8001880 <HAL_GPIO_Init+0x334>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017e0:	4a27      	ldr	r2, [pc, #156]	; (8001880 <HAL_GPIO_Init+0x334>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017e6:	4b26      	ldr	r3, [pc, #152]	; (8001880 <HAL_GPIO_Init+0x334>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800180a:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_GPIO_Init+0x334>)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <HAL_GPIO_Init+0x334>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001834:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_GPIO_Init+0x334>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3301      	adds	r3, #1
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	2b0f      	cmp	r3, #15
 8001844:	f67f ae90 	bls.w	8001568 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40013800 	.word	0x40013800
 8001860:	40020000 	.word	0x40020000
 8001864:	40020400 	.word	0x40020400
 8001868:	40020800 	.word	0x40020800
 800186c:	40020c00 	.word	0x40020c00
 8001870:	40021000 	.word	0x40021000
 8001874:	40021400 	.word	0x40021400
 8001878:	40021800 	.word	0x40021800
 800187c:	40021c00 	.word	0x40021c00
 8001880:	40013c00 	.word	0x40013c00

08001884 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	807b      	strh	r3, [r7, #2]
 8001890:	4613      	mov	r3, r2
 8001892:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001894:	787b      	ldrb	r3, [r7, #1]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189a:	887a      	ldrh	r2, [r7, #2]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018a0:	e003      	b.n	80018aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	041a      	lsls	r2, r3, #16
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	619a      	str	r2, [r3, #24]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b085      	sub	sp, #20
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018c8:	887a      	ldrh	r2, [r7, #2]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4013      	ands	r3, r2
 80018ce:	041a      	lsls	r2, r3, #16
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	400b      	ands	r3, r1
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	619a      	str	r2, [r3, #24]
}
 80018de:	bf00      	nop
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ec:	b08f      	sub	sp, #60	; 0x3c
 80018ee:	af0a      	add	r7, sp, #40	; 0x28
 80018f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e10f      	b.n	8001b1c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d106      	bne.n	800191c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f005 fbe4 	bl	80070e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2203      	movs	r2, #3
 8001920:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f002 fb81 	bl	8004042 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	687e      	ldr	r6, [r7, #4]
 8001948:	466d      	mov	r5, sp
 800194a:	f106 0410 	add.w	r4, r6, #16
 800194e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001956:	e894 0003 	ldmia.w	r4, {r0, r1}
 800195a:	e885 0003 	stmia.w	r5, {r0, r1}
 800195e:	1d33      	adds	r3, r6, #4
 8001960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001962:	6838      	ldr	r0, [r7, #0]
 8001964:	f002 fa58 	bl	8003e18 <USB_CoreInit>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2202      	movs	r2, #2
 8001972:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0d0      	b.n	8001b1c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2100      	movs	r1, #0
 8001980:	4618      	mov	r0, r3
 8001982:	f002 fb6f 	bl	8004064 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001986:	2300      	movs	r3, #0
 8001988:	73fb      	strb	r3, [r7, #15]
 800198a:	e04a      	b.n	8001a22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	333d      	adds	r3, #61	; 0x3d
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019a0:	7bfa      	ldrb	r2, [r7, #15]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	333c      	adds	r3, #60	; 0x3c
 80019b0:	7bfa      	ldrb	r2, [r7, #15]
 80019b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	b298      	uxth	r0, r3
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	3342      	adds	r3, #66	; 0x42
 80019c8:	4602      	mov	r2, r0
 80019ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	333f      	adds	r3, #63	; 0x3f
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	1a9b      	subs	r3, r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	3344      	adds	r3, #68	; 0x44
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	3348      	adds	r3, #72	; 0x48
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	3350      	adds	r3, #80	; 0x50
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d3af      	bcc.n	800198c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	e044      	b.n	8001abc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	1a9b      	subs	r3, r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a48:	7bfa      	ldrb	r2, [r7, #15]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001a5a:	7bfa      	ldrb	r2, [r7, #15]
 8001a5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	1a9b      	subs	r3, r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a74:	7bfa      	ldrb	r2, [r7, #15]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a8a:	7bfa      	ldrb	r2, [r7, #15]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d3b5      	bcc.n	8001a32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	687e      	ldr	r6, [r7, #4]
 8001ace:	466d      	mov	r5, sp
 8001ad0:	f106 0410 	add.w	r4, r6, #16
 8001ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001adc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ae0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ae4:	1d33      	adds	r3, r6, #4
 8001ae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ae8:	6838      	ldr	r0, [r7, #0]
 8001aea:	f002 fae5 	bl	80040b8 <USB_DevInit>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2202      	movs	r2, #2
 8001af8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e00d      	b.n	8001b1c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f003 fb2d 	bl	8005174 <USB_DevDisconnect>

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_PCD_Start+0x1c>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e020      	b.n	8001b82 <HAL_PCD_Start+0x5e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d109      	bne.n	8001b64 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d005      	beq.n	8001b64 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f002 fa59 	bl	8004020 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 fadd 	bl	8005132 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b8a:	b590      	push	{r4, r7, lr}
 8001b8c:	b08d      	sub	sp, #52	; 0x34
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 fb9b 	bl	80052dc <USB_GetMode>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f040 839d 	bne.w	80022e8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 faff 	bl	80051b6 <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8393 	beq.w	80022e6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 faf6 	bl	80051b6 <USB_ReadInterrupts>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d107      	bne.n	8001be4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f002 0202 	and.w	r2, r2, #2
 8001be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 fae4 	bl	80051b6 <USB_ReadInterrupts>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	2b10      	cmp	r3, #16
 8001bf6:	d161      	bne.n	8001cbc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0210 	bic.w	r2, r2, #16
 8001c06:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	f003 020f 	and.w	r2, r3, #15
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	3304      	adds	r3, #4
 8001c26:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	0c5b      	lsrs	r3, r3, #17
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d124      	bne.n	8001c7e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d035      	beq.n	8001cac <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	6a38      	ldr	r0, [r7, #32]
 8001c54:	f003 f94a 	bl	8004eec <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c64:	441a      	add	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c76:	441a      	add	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	619a      	str	r2, [r3, #24]
 8001c7c:	e016      	b.n	8001cac <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	0c5b      	lsrs	r3, r3, #17
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d110      	bne.n	8001cac <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c90:	2208      	movs	r2, #8
 8001c92:	4619      	mov	r1, r3
 8001c94:	6a38      	ldr	r0, [r7, #32]
 8001c96:	f003 f929 	bl	8004eec <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ca6:	441a      	add	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0210 	orr.w	r2, r2, #16
 8001cba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 fa78 	bl	80051b6 <USB_ReadInterrupts>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ccc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001cd0:	d16e      	bne.n	8001db0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fa7e 	bl	80051dc <USB_ReadDevAllOutEpInterrupt>
 8001ce0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ce2:	e062      	b.n	8001daa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d057      	beq.n	8001d9e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 faa3 	bl	8005244 <USB_ReadDevOutEPInterrupt>
 8001cfe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d00c      	beq.n	8001d24 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	015a      	lsls	r2, r3, #5
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d16:	461a      	mov	r2, r3
 8001d18:	2301      	movs	r3, #1
 8001d1a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fdb0 	bl	8002884 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00c      	beq.n	8001d48 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	015a      	lsls	r2, r3, #5
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 feaa 	bl	8002a9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d008      	beq.n	8001d64 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2310      	movs	r3, #16
 8001d62:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d96:	461a      	mov	r2, r3
 8001d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d9c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	3301      	adds	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da6:	085b      	lsrs	r3, r3, #1
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d199      	bne.n	8001ce4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 f9fe 	bl	80051b6 <USB_ReadInterrupts>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dc4:	f040 80c0 	bne.w	8001f48 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fa1f 	bl	8005210 <USB_ReadDevAllInEpInterrupt>
 8001dd2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001dd8:	e0b2      	b.n	8001f40 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80a7 	beq.w	8001f34 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f003 fa45 	bl	8005280 <USB_ReadDevInEPInterrupt>
 8001df6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d057      	beq.n	8001eb2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	2201      	movs	r2, #1
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	69f9      	ldr	r1, [r7, #28]
 8001e1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e22:	4013      	ands	r3, r2
 8001e24:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e32:	461a      	mov	r2, r3
 8001e34:	2301      	movs	r3, #1
 8001e36:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d132      	bne.n	8001ea6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e44:	4613      	mov	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3348      	adds	r3, #72	; 0x48
 8001e50:	6819      	ldr	r1, [r3, #0]
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e56:	4613      	mov	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	1a9b      	subs	r3, r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4403      	add	r3, r0
 8001e60:	3344      	adds	r3, #68	; 0x44
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4419      	add	r1, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4403      	add	r3, r0
 8001e74:	3348      	adds	r3, #72	; 0x48
 8001e76:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d113      	bne.n	8001ea6 <HAL_PCD_IRQHandler+0x31c>
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3350      	adds	r3, #80	; 0x50
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d108      	bne.n	8001ea6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	f003 fa4d 	bl	8005340 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f005 f99a 	bl	80071e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d008      	beq.n	8001ece <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2308      	movs	r3, #8
 8001ecc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	015a      	lsls	r2, r3, #5
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	4413      	add	r3, r2
 8001ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	2310      	movs	r3, #16
 8001ee8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f00:	461a      	mov	r2, r3
 8001f02:	2340      	movs	r3, #64	; 0x40
 8001f04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2302      	movs	r3, #2
 8001f20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fc1b 	bl	800276a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	3301      	adds	r3, #1
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f47f af49 	bne.w	8001dda <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 f932 	bl	80051b6 <USB_ReadInterrupts>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f5c:	d122      	bne.n	8001fa4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d108      	bne.n	8001f8e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f84:	2100      	movs	r1, #0
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fe26 	bl	8002bd8 <HAL_PCDEx_LPM_Callback>
 8001f8c:	e002      	b.n	8001f94 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f005 f9a0 	bl	80072d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 f904 	bl	80051b6 <USB_ReadInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fb8:	d112      	bne.n	8001fe0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f005 f95c 	bl	8007288 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fde:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 f8e6 	bl	80051b6 <USB_ReadInterrupts>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ff4:	f040 80c7 	bne.w	8002186 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2110      	movs	r1, #16
 8002012:	4618      	mov	r0, r3
 8002014:	f002 f9b4 	bl	8004380 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800201c:	e056      	b.n	80020cc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800202a:	461a      	mov	r2, r3
 800202c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002030:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	4413      	add	r3, r2
 800203a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002042:	0151      	lsls	r1, r2, #5
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	440a      	add	r2, r1
 8002048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800204c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002050:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	4413      	add	r3, r2
 800205a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002062:	0151      	lsls	r1, r2, #5
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	440a      	add	r2, r1
 8002068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800206c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002070:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	4413      	add	r3, r2
 800207a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800207e:	461a      	mov	r2, r3
 8002080:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002084:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002096:	0151      	lsls	r1, r2, #5
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	440a      	add	r2, r1
 800209c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	015a      	lsls	r2, r3, #5
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	4413      	add	r3, r2
 80020ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b6:	0151      	lsls	r1, r2, #5
 80020b8:	69fa      	ldr	r2, [r7, #28]
 80020ba:	440a      	add	r2, r1
 80020bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c8:	3301      	adds	r3, #1
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d3a3      	bcc.n	800201e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020e4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d016      	beq.n	8002120 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002102:	f043 030b 	orr.w	r3, r3, #11
 8002106:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002118:	f043 030b 	orr.w	r3, r3, #11
 800211c:	6453      	str	r3, [r2, #68]	; 0x44
 800211e:	e015      	b.n	800214c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800212e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002132:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002136:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002146:	f043 030b 	orr.w	r3, r3, #11
 800214a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800215a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800215e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002170:	461a      	mov	r2, r3
 8002172:	f003 f8e5 	bl	8005340 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002184:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f003 f813 	bl	80051b6 <USB_ReadInterrupts>
 8002190:	4603      	mov	r3, r0
 8002192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800219a:	d124      	bne.n	80021e6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f003 f8a9 	bl	80052f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f002 f949 	bl	8004442 <USB_GetDevSpeed>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681c      	ldr	r4, [r3, #0]
 80021bc:	f001 f958 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 80021c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	4620      	mov	r0, r4
 80021cc:	f001 fe86 	bl	8003edc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f005 f830 	bl	8007236 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80021e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f002 ffe3 	bl	80051b6 <USB_ReadInterrupts>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f003 0308 	and.w	r3, r3, #8
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d10a      	bne.n	8002210 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f005 f80d 	bl	800721a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f002 0208 	and.w	r2, r2, #8
 800220e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f002 ffce 	bl	80051b6 <USB_ReadInterrupts>
 800221a:	4603      	mov	r3, r0
 800221c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002224:	d10f      	bne.n	8002246 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	b2db      	uxtb	r3, r3
 800222e:	4619      	mov	r1, r3
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f005 f86f 	bl	8007314 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	695a      	ldr	r2, [r3, #20]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002244:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f002 ffb3 	bl	80051b6 <USB_ReadInterrupts>
 8002250:	4603      	mov	r3, r0
 8002252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002256:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800225a:	d10f      	bne.n	800227c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	b2db      	uxtb	r3, r3
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f005 f842 	bl	80072f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800227a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f002 ff98 	bl	80051b6 <USB_ReadInterrupts>
 8002286:	4603      	mov	r3, r0
 8002288:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002290:	d10a      	bne.n	80022a8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f005 f850 	bl	8007338 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 ff82 	bl	80051b6 <USB_ReadInterrupts>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d115      	bne.n	80022e8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f005 f840 	bl	8007354 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	e000      	b.n	80022e8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80022e6:	bf00      	nop
    }
  }
}
 80022e8:	3734      	adds	r7, #52	; 0x34
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd90      	pop	{r4, r7, pc}

080022ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_PCD_SetAddress+0x1a>
 8002304:	2302      	movs	r3, #2
 8002306:	e013      	b.n	8002330 <HAL_PCD_SetAddress+0x42>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f002 fee0 	bl	80050e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	4608      	mov	r0, r1
 8002342:	4611      	mov	r1, r2
 8002344:	461a      	mov	r2, r3
 8002346:	4603      	mov	r3, r0
 8002348:	70fb      	strb	r3, [r7, #3]
 800234a:	460b      	mov	r3, r1
 800234c:	803b      	strh	r3, [r7, #0]
 800234e:	4613      	mov	r3, r2
 8002350:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800235a:	2b00      	cmp	r3, #0
 800235c:	da0f      	bge.n	800237e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	f003 020f 	and.w	r2, r3, #15
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	3338      	adds	r3, #56	; 0x38
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	3304      	adds	r3, #4
 8002374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2201      	movs	r2, #1
 800237a:	705a      	strb	r2, [r3, #1]
 800237c:	e00f      	b.n	800239e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	f003 020f 	and.w	r2, r3, #15
 8002384:	4613      	mov	r3, r2
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	3304      	adds	r3, #4
 8002396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023aa:	883a      	ldrh	r2, [r7, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	78ba      	ldrb	r2, [r7, #2]
 80023b4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	785b      	ldrb	r3, [r3, #1]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d004      	beq.n	80023c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023c8:	78bb      	ldrb	r3, [r7, #2]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d102      	bne.n	80023d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_PCD_EP_Open+0xaa>
 80023de:	2302      	movs	r3, #2
 80023e0:	e00e      	b.n	8002400 <HAL_PCD_EP_Open+0xc8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68f9      	ldr	r1, [r7, #12]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f002 f84b 	bl	800448c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80023fe:	7afb      	ldrb	r3, [r7, #11]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002414:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002418:	2b00      	cmp	r3, #0
 800241a:	da0f      	bge.n	800243c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241c:	78fb      	ldrb	r3, [r7, #3]
 800241e:	f003 020f 	and.w	r2, r3, #15
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	3338      	adds	r3, #56	; 0x38
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	705a      	strb	r2, [r3, #1]
 800243a:	e00f      	b.n	800245c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	f003 020f 	and.w	r2, r3, #15
 8002442:	4613      	mov	r3, r2
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	3304      	adds	r3, #4
 8002454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	b2da      	uxtb	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_PCD_EP_Close+0x6e>
 8002472:	2302      	movs	r3, #2
 8002474:	e00e      	b.n	8002494 <HAL_PCD_EP_Close+0x8c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68f9      	ldr	r1, [r7, #12]
 8002484:	4618      	mov	r0, r3
 8002486:	f002 f889 	bl	800459c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	460b      	mov	r3, r1
 80024aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ac:	7afb      	ldrb	r3, [r7, #11]
 80024ae:	f003 020f 	and.w	r2, r3, #15
 80024b2:	4613      	mov	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4413      	add	r3, r2
 80024c2:	3304      	adds	r3, #4
 80024c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2200      	movs	r2, #0
 80024dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024de:	7afb      	ldrb	r3, [r7, #11]
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d102      	bne.n	80024f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024f8:	7afb      	ldrb	r3, [r7, #11]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	6979      	ldr	r1, [r7, #20]
 8002510:	f002 fb64 	bl	8004bdc <USB_EP0StartXfer>
 8002514:	e008      	b.n	8002528 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	461a      	mov	r2, r3
 8002522:	6979      	ldr	r1, [r7, #20]
 8002524:	f002 f916 	bl	8004754 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800253e:	78fb      	ldrb	r3, [r7, #3]
 8002540:	f003 020f 	and.w	r2, r3, #15
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002554:	681b      	ldr	r3, [r3, #0]
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	60f8      	str	r0, [r7, #12]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	460b      	mov	r3, r1
 8002570:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002572:	7afb      	ldrb	r3, [r7, #11]
 8002574:	f003 020f 	and.w	r2, r3, #15
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	3338      	adds	r3, #56	; 0x38
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4413      	add	r3, r2
 8002586:	3304      	adds	r3, #4
 8002588:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2201      	movs	r2, #1
 80025a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025a2:	7afb      	ldrb	r3, [r7, #11]
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d102      	bne.n	80025bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025bc:	7afb      	ldrb	r3, [r7, #11]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	6979      	ldr	r1, [r7, #20]
 80025d4:	f002 fb02 	bl	8004bdc <USB_EP0StartXfer>
 80025d8:	e008      	b.n	80025ec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	6979      	ldr	r1, [r7, #20]
 80025e8:	f002 f8b4 	bl	8004754 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	f003 020f 	and.w	r2, r3, #15
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	d901      	bls.n	8002614 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e050      	b.n	80026b6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002618:	2b00      	cmp	r3, #0
 800261a:	da0f      	bge.n	800263c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800261c:	78fb      	ldrb	r3, [r7, #3]
 800261e:	f003 020f 	and.w	r2, r3, #15
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	3338      	adds	r3, #56	; 0x38
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	4413      	add	r3, r2
 8002630:	3304      	adds	r3, #4
 8002632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	705a      	strb	r2, [r3, #1]
 800263a:	e00d      	b.n	8002658 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	1a9b      	subs	r3, r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	3304      	adds	r3, #4
 8002650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_PCD_EP_SetStall+0x82>
 8002674:	2302      	movs	r3, #2
 8002676:	e01e      	b.n	80026b6 <HAL_PCD_EP_SetStall+0xc0>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68f9      	ldr	r1, [r7, #12]
 8002686:	4618      	mov	r0, r3
 8002688:	f002 fc59 	bl	8004f3e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10a      	bne.n	80026ac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	b2d9      	uxtb	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026a6:	461a      	mov	r2, r3
 80026a8:	f002 fe4a 	bl	8005340 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	460b      	mov	r3, r1
 80026c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	f003 020f 	and.w	r2, r3, #15
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d901      	bls.n	80026dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e042      	b.n	8002762 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	da0f      	bge.n	8002704 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	f003 020f 	and.w	r2, r3, #15
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	3338      	adds	r3, #56	; 0x38
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	4413      	add	r3, r2
 80026f8:	3304      	adds	r3, #4
 80026fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	705a      	strb	r2, [r3, #1]
 8002702:	e00f      	b.n	8002724 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	f003 020f 	and.w	r2, r3, #15
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	1a9b      	subs	r3, r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	3304      	adds	r3, #4
 800271c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800272a:	78fb      	ldrb	r3, [r7, #3]
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	b2da      	uxtb	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_PCD_EP_ClrStall+0x86>
 8002740:	2302      	movs	r3, #2
 8002742:	e00e      	b.n	8002762 <HAL_PCD_EP_ClrStall+0xa4>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68f9      	ldr	r1, [r7, #12]
 8002752:	4618      	mov	r0, r3
 8002754:	f002 fc61 	bl	800501a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b08a      	sub	sp, #40	; 0x28
 800276e:	af02      	add	r7, sp, #8
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	3338      	adds	r3, #56	; 0x38
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	4413      	add	r3, r2
 800278e:	3304      	adds	r3, #4
 8002790:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	429a      	cmp	r2, r3
 800279c:	d901      	bls.n	80027a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e06c      	b.n	800287c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d902      	bls.n	80027be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3303      	adds	r3, #3
 80027c2:	089b      	lsrs	r3, r3, #2
 80027c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80027c6:	e02b      	b.n	8002820 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d902      	bls.n	80027e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	3303      	adds	r3, #3
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	68d9      	ldr	r1, [r3, #12]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	4603      	mov	r3, r0
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f002 fb3d 	bl	8004e82 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	441a      	add	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	699a      	ldr	r2, [r3, #24]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	441a      	add	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	b29b      	uxth	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	429a      	cmp	r2, r3
 8002834:	d809      	bhi.n	800284a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800283e:	429a      	cmp	r2, r3
 8002840:	d203      	bcs.n	800284a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1be      	bne.n	80027c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	429a      	cmp	r2, r3
 8002854:	d811      	bhi.n	800287a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	2201      	movs	r2, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	43db      	mvns	r3, r3
 8002870:	6939      	ldr	r1, [r7, #16]
 8002872:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002876:	4013      	ands	r3, r2
 8002878:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	333c      	adds	r3, #60	; 0x3c
 800289c:	3304      	adds	r3, #4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	f040 80a0 	bne.w	80029fc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d015      	beq.n	80028f2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a72      	ldr	r2, [pc, #456]	; (8002a94 <PCD_EP_OutXfrComplete_int+0x210>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	f240 80dd 	bls.w	8002a8a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80d7 	beq.w	8002a8a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e8:	461a      	mov	r2, r3
 80028ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ee:	6093      	str	r3, [r2, #8]
 80028f0:	e0cb      	b.n	8002a8a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002908:	461a      	mov	r2, r3
 800290a:	2320      	movs	r3, #32
 800290c:	6093      	str	r3, [r2, #8]
 800290e:	e0bc      	b.n	8002a8a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 80b7 	bne.w	8002a8a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a5d      	ldr	r2, [pc, #372]	; (8002a94 <PCD_EP_OutXfrComplete_int+0x210>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d90f      	bls.n	8002944 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293a:	461a      	mov	r2, r3
 800293c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002940:	6093      	str	r3, [r2, #8]
 8002942:	e0a2      	b.n	8002a8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002956:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	0159      	lsls	r1, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	440b      	add	r3, r1
 8002960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800296a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4403      	add	r3, r0
 800297a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800297e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	4613      	mov	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	4613      	mov	r3, r2
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4403      	add	r3, r0
 80029a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4419      	add	r1, r3
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4403      	add	r3, r0
 80029b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029bc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d114      	bne.n	80029ee <PCD_EP_OutXfrComplete_int+0x16a>
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d108      	bne.n	80029ee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029e6:	461a      	mov	r2, r3
 80029e8:	2101      	movs	r1, #1
 80029ea:	f002 fca9 	bl	8005340 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	4619      	mov	r1, r3
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f004 fbdb 	bl	80071b0 <HAL_PCD_DataOutStageCallback>
 80029fa:	e046      	b.n	8002a8a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a26      	ldr	r2, [pc, #152]	; (8002a98 <PCD_EP_OutXfrComplete_int+0x214>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d124      	bne.n	8002a4e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00a      	beq.n	8002a24 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a20:	6093      	str	r3, [r2, #8]
 8002a22:	e032      	b.n	8002a8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	4619      	mov	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f004 fbb2 	bl	80071b0 <HAL_PCD_DataOutStageCallback>
 8002a4c:	e01d      	b.n	8002a8a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d114      	bne.n	8002a7e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d108      	bne.n	8002a7e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a76:	461a      	mov	r2, r3
 8002a78:	2100      	movs	r1, #0
 8002a7a:	f002 fc61 	bl	8005340 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f004 fb93 	bl	80071b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	4f54300a 	.word	0x4f54300a
 8002a98:	4f54310a 	.word	0x4f54310a

08002a9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	333c      	adds	r3, #60	; 0x3c
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4a15      	ldr	r2, [pc, #84]	; (8002b24 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d90e      	bls.n	8002af0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae8:	461a      	mov	r2, r3
 8002aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f004 fb4b 	bl	800718c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <PCD_EP_OutSetupPacket_int+0x88>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d90c      	bls.n	8002b18 <PCD_EP_OutSetupPacket_int+0x7c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d108      	bne.n	8002b18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b10:	461a      	mov	r2, r3
 8002b12:	2101      	movs	r1, #1
 8002b14:	f002 fc14 	bl	8005340 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	4f54300a 	.word	0x4f54300a

08002b28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
 8002b34:	4613      	mov	r3, r2
 8002b36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d107      	bne.n	8002b56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b46:	883b      	ldrh	r3, [r7, #0]
 8002b48:	0419      	lsls	r1, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
 8002b54:	e028      	b.n	8002ba8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	4413      	add	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	e00d      	b.n	8002b86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	3340      	adds	r3, #64	; 0x40
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	3301      	adds	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d3ec      	bcc.n	8002b6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b90:	883b      	ldrh	r3, [r7, #0]
 8002b92:	0418      	lsls	r0, r3, #16
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6819      	ldr	r1, [r3, #0]
 8002b98:	78fb      	ldrb	r3, [r7, #3]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	4302      	orrs	r2, r0
 8002ba0:	3340      	adds	r3, #64	; 0x40
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e264      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d075      	beq.n	8002cfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c0e:	4ba3      	ldr	r3, [pc, #652]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d00c      	beq.n	8002c34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c1a:	4ba0      	ldr	r3, [pc, #640]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d112      	bne.n	8002c4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c26:	4b9d      	ldr	r3, [pc, #628]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c32:	d10b      	bne.n	8002c4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	4b99      	ldr	r3, [pc, #612]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d05b      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x108>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d157      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e23f      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c54:	d106      	bne.n	8002c64 <HAL_RCC_OscConfig+0x74>
 8002c56:	4b91      	ldr	r3, [pc, #580]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a90      	ldr	r2, [pc, #576]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e01d      	b.n	8002ca0 <HAL_RCC_OscConfig+0xb0>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x98>
 8002c6e:	4b8b      	ldr	r3, [pc, #556]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a8a      	ldr	r2, [pc, #552]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	4b88      	ldr	r3, [pc, #544]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a87      	ldr	r2, [pc, #540]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCC_OscConfig+0xb0>
 8002c88:	4b84      	ldr	r3, [pc, #528]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a83      	ldr	r2, [pc, #524]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b81      	ldr	r3, [pc, #516]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a80      	ldr	r2, [pc, #512]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fb0e 	bl	80012c8 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe fb0a 	bl	80012c8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e204      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b76      	ldr	r3, [pc, #472]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xc0>
 8002cce:	e014      	b.n	8002cfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fafa 	bl	80012c8 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7fe faf6 	bl	80012c8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e1f0      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cea:	4b6c      	ldr	r3, [pc, #432]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0xe8>
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d063      	beq.n	8002dce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d06:	4b65      	ldr	r3, [pc, #404]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d12:	4b62      	ldr	r3, [pc, #392]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d11c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d1e:	4b5f      	ldr	r3, [pc, #380]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d116      	bne.n	8002d58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2a:	4b5c      	ldr	r3, [pc, #368]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_RCC_OscConfig+0x152>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d001      	beq.n	8002d42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e1c4      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d42:	4b56      	ldr	r3, [pc, #344]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4952      	ldr	r1, [pc, #328]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d56:	e03a      	b.n	8002dce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d020      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d60:	4b4f      	ldr	r3, [pc, #316]	; (8002ea0 <HAL_RCC_OscConfig+0x2b0>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fe faaf 	bl	80012c8 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6e:	f7fe faab 	bl	80012c8 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e1a5      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d80:	4b46      	ldr	r3, [pc, #280]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8c:	4b43      	ldr	r3, [pc, #268]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4940      	ldr	r1, [pc, #256]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	600b      	str	r3, [r1, #0]
 8002da0:	e015      	b.n	8002dce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da2:	4b3f      	ldr	r3, [pc, #252]	; (8002ea0 <HAL_RCC_OscConfig+0x2b0>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fe fa8e 	bl	80012c8 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db0:	f7fe fa8a 	bl	80012c8 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e184      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d030      	beq.n	8002e3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d016      	beq.n	8002e10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <HAL_RCC_OscConfig+0x2b4>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fe fa6e 	bl	80012c8 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df0:	f7fe fa6a 	bl	80012c8 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e164      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e02:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x200>
 8002e0e:	e015      	b.n	8002e3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e10:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_RCC_OscConfig+0x2b4>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e16:	f7fe fa57 	bl	80012c8 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1e:	f7fe fa53 	bl	80012c8 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e14d      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e30:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80a0 	beq.w	8002f8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4e:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10f      	bne.n	8002e7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a0e      	ldr	r2, [pc, #56]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_RCC_OscConfig+0x2ac>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_OscConfig+0x2b8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d121      	bne.n	8002eca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_RCC_OscConfig+0x2b8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a07      	ldr	r2, [pc, #28]	; (8002ea8 <HAL_RCC_OscConfig+0x2b8>)
 8002e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e92:	f7fe fa19 	bl	80012c8 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	e011      	b.n	8002ebe <HAL_RCC_OscConfig+0x2ce>
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	42470000 	.word	0x42470000
 8002ea4:	42470e80 	.word	0x42470e80
 8002ea8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eac:	f7fe fa0c 	bl	80012c8 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e106      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebe:	4b85      	ldr	r3, [pc, #532]	; (80030d4 <HAL_RCC_OscConfig+0x4e4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d106      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x2f0>
 8002ed2:	4b81      	ldr	r3, [pc, #516]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	4a80      	ldr	r2, [pc, #512]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ede:	e01c      	b.n	8002f1a <HAL_RCC_OscConfig+0x32a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	d10c      	bne.n	8002f02 <HAL_RCC_OscConfig+0x312>
 8002ee8:	4b7b      	ldr	r3, [pc, #492]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	4a7a      	ldr	r2, [pc, #488]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002eee:	f043 0304 	orr.w	r3, r3, #4
 8002ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef4:	4b78      	ldr	r3, [pc, #480]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	4a77      	ldr	r2, [pc, #476]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	6713      	str	r3, [r2, #112]	; 0x70
 8002f00:	e00b      	b.n	8002f1a <HAL_RCC_OscConfig+0x32a>
 8002f02:	4b75      	ldr	r3, [pc, #468]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	4a74      	ldr	r2, [pc, #464]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0e:	4b72      	ldr	r3, [pc, #456]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	4a71      	ldr	r2, [pc, #452]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002f14:	f023 0304 	bic.w	r3, r3, #4
 8002f18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d015      	beq.n	8002f4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f22:	f7fe f9d1 	bl	80012c8 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fe f9cd 	bl	80012c8 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0c5      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f40:	4b65      	ldr	r3, [pc, #404]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0ee      	beq.n	8002f2a <HAL_RCC_OscConfig+0x33a>
 8002f4c:	e014      	b.n	8002f78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4e:	f7fe f9bb 	bl	80012c8 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f56:	f7fe f9b7 	bl	80012c8 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e0af      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f6c:	4b5a      	ldr	r3, [pc, #360]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ee      	bne.n	8002f56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d105      	bne.n	8002f8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7e:	4b56      	ldr	r3, [pc, #344]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	4a55      	ldr	r2, [pc, #340]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 809b 	beq.w	80030ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f94:	4b50      	ldr	r3, [pc, #320]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 030c 	and.w	r3, r3, #12
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d05c      	beq.n	800305a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d141      	bne.n	800302c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <HAL_RCC_OscConfig+0x4ec>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fe f98b 	bl	80012c8 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7fe f987 	bl	80012c8 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e081      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc8:	4b43      	ldr	r3, [pc, #268]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69da      	ldr	r2, [r3, #28]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	019b      	lsls	r3, r3, #6
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	085b      	lsrs	r3, r3, #1
 8002fec:	3b01      	subs	r3, #1
 8002fee:	041b      	lsls	r3, r3, #16
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	061b      	lsls	r3, r3, #24
 8002ff8:	4937      	ldr	r1, [pc, #220]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ffe:	4b37      	ldr	r3, [pc, #220]	; (80030dc <HAL_RCC_OscConfig+0x4ec>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe f960 	bl	80012c8 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300c:	f7fe f95c 	bl	80012c8 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e056      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301e:	4b2e      	ldr	r3, [pc, #184]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x41c>
 800302a:	e04e      	b.n	80030ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302c:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <HAL_RCC_OscConfig+0x4ec>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003032:	f7fe f949 	bl	80012c8 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303a:	f7fe f945 	bl	80012c8 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e03f      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304c:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_OscConfig+0x44a>
 8003058:	e037      	b.n	80030ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e032      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003066:	4b1c      	ldr	r3, [pc, #112]	; (80030d8 <HAL_RCC_OscConfig+0x4e8>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d028      	beq.n	80030c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307e:	429a      	cmp	r2, r3
 8003080:	d121      	bne.n	80030c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d11a      	bne.n	80030c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003096:	4013      	ands	r3, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800309e:	4293      	cmp	r3, r2
 80030a0:	d111      	bne.n	80030c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	3b01      	subs	r3, #1
 80030b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d107      	bne.n	80030c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40007000 	.word	0x40007000
 80030d8:	40023800 	.word	0x40023800
 80030dc:	42470060 	.word	0x42470060

080030e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0cc      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030f4:	4b68      	ldr	r3, [pc, #416]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d90c      	bls.n	800311c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b65      	ldr	r3, [pc, #404]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b63      	ldr	r3, [pc, #396]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0307 	and.w	r3, r3, #7
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0b8      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d020      	beq.n	800316a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003134:	4b59      	ldr	r3, [pc, #356]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4a58      	ldr	r2, [pc, #352]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800313e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800314c:	4b53      	ldr	r3, [pc, #332]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4a52      	ldr	r2, [pc, #328]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003158:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	494d      	ldr	r1, [pc, #308]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d044      	beq.n	8003200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317e:	4b47      	ldr	r3, [pc, #284]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d119      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e07f      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d003      	beq.n	800319e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319a:	2b03      	cmp	r3, #3
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800319e:	4b3f      	ldr	r3, [pc, #252]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e06f      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ae:	4b3b      	ldr	r3, [pc, #236]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e067      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031be:	4b37      	ldr	r3, [pc, #220]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f023 0203 	bic.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4934      	ldr	r1, [pc, #208]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031d0:	f7fe f87a 	bl	80012c8 <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d8:	f7fe f876 	bl	80012c8 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e04f      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	4b2b      	ldr	r3, [pc, #172]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 020c 	and.w	r2, r3, #12
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d1eb      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003200:	4b25      	ldr	r3, [pc, #148]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d20c      	bcs.n	8003228 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320e:	4b22      	ldr	r3, [pc, #136]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e032      	b.n	800328e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003234:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4916      	ldr	r1, [pc, #88]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	490e      	ldr	r1, [pc, #56]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003266:	f000 f821 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 800326a:	4602      	mov	r2, r0
 800326c:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	091b      	lsrs	r3, r3, #4
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	490a      	ldr	r1, [pc, #40]	; (80032a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003278:	5ccb      	ldrb	r3, [r1, r3]
 800327a:	fa22 f303 	lsr.w	r3, r2, r3
 800327e:	4a09      	ldr	r2, [pc, #36]	; (80032a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003282:	4b09      	ldr	r3, [pc, #36]	; (80032a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f7fd ffda 	bl	8001240 <HAL_InitTick>

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023c00 	.word	0x40023c00
 800329c:	40023800 	.word	0x40023800
 80032a0:	080077c4 	.word	0x080077c4
 80032a4:	20000000 	.word	0x20000000
 80032a8:	20000004 	.word	0x20000004

080032ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	607b      	str	r3, [r7, #4]
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	2300      	movs	r3, #0
 80032be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c4:	4b67      	ldr	r3, [pc, #412]	; (8003464 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 030c 	and.w	r3, r3, #12
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d00d      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x40>
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	f200 80bd 	bhi.w	8003450 <HAL_RCC_GetSysClockFreq+0x1a4>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x34>
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d003      	beq.n	80032e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032de:	e0b7      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e0:	4b61      	ldr	r3, [pc, #388]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032e2:	60bb      	str	r3, [r7, #8]
       break;
 80032e4:	e0b7      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032e6:	4b61      	ldr	r3, [pc, #388]	; (800346c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80032e8:	60bb      	str	r3, [r7, #8]
      break;
 80032ea:	e0b4      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ec:	4b5d      	ldr	r3, [pc, #372]	; (8003464 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032f6:	4b5b      	ldr	r3, [pc, #364]	; (8003464 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d04d      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003302:	4b58      	ldr	r3, [pc, #352]	; (8003464 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	099b      	lsrs	r3, r3, #6
 8003308:	461a      	mov	r2, r3
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003312:	f04f 0100 	mov.w	r1, #0
 8003316:	ea02 0800 	and.w	r8, r2, r0
 800331a:	ea03 0901 	and.w	r9, r3, r1
 800331e:	4640      	mov	r0, r8
 8003320:	4649      	mov	r1, r9
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	014b      	lsls	r3, r1, #5
 800332c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003330:	0142      	lsls	r2, r0, #5
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	ebb0 0008 	subs.w	r0, r0, r8
 800333a:	eb61 0109 	sbc.w	r1, r1, r9
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	018b      	lsls	r3, r1, #6
 8003348:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800334c:	0182      	lsls	r2, r0, #6
 800334e:	1a12      	subs	r2, r2, r0
 8003350:	eb63 0301 	sbc.w	r3, r3, r1
 8003354:	f04f 0000 	mov.w	r0, #0
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	00d9      	lsls	r1, r3, #3
 800335e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003362:	00d0      	lsls	r0, r2, #3
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	eb12 0208 	adds.w	r2, r2, r8
 800336c:	eb43 0309 	adc.w	r3, r3, r9
 8003370:	f04f 0000 	mov.w	r0, #0
 8003374:	f04f 0100 	mov.w	r1, #0
 8003378:	0259      	lsls	r1, r3, #9
 800337a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800337e:	0250      	lsls	r0, r2, #9
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	461a      	mov	r2, r3
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	f7fd fb10 	bl	80009b4 <__aeabi_uldivmod>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4613      	mov	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	e04a      	b.n	8003434 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339e:	4b31      	ldr	r3, [pc, #196]	; (8003464 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	099b      	lsrs	r3, r3, #6
 80033a4:	461a      	mov	r2, r3
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033ae:	f04f 0100 	mov.w	r1, #0
 80033b2:	ea02 0400 	and.w	r4, r2, r0
 80033b6:	ea03 0501 	and.w	r5, r3, r1
 80033ba:	4620      	mov	r0, r4
 80033bc:	4629      	mov	r1, r5
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	014b      	lsls	r3, r1, #5
 80033c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033cc:	0142      	lsls	r2, r0, #5
 80033ce:	4610      	mov	r0, r2
 80033d0:	4619      	mov	r1, r3
 80033d2:	1b00      	subs	r0, r0, r4
 80033d4:	eb61 0105 	sbc.w	r1, r1, r5
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	018b      	lsls	r3, r1, #6
 80033e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033e6:	0182      	lsls	r2, r0, #6
 80033e8:	1a12      	subs	r2, r2, r0
 80033ea:	eb63 0301 	sbc.w	r3, r3, r1
 80033ee:	f04f 0000 	mov.w	r0, #0
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	00d9      	lsls	r1, r3, #3
 80033f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033fc:	00d0      	lsls	r0, r2, #3
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	1912      	adds	r2, r2, r4
 8003404:	eb45 0303 	adc.w	r3, r5, r3
 8003408:	f04f 0000 	mov.w	r0, #0
 800340c:	f04f 0100 	mov.w	r1, #0
 8003410:	0299      	lsls	r1, r3, #10
 8003412:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003416:	0290      	lsls	r0, r2, #10
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	461a      	mov	r2, r3
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	f7fd fac4 	bl	80009b4 <__aeabi_uldivmod>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4613      	mov	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	0c1b      	lsrs	r3, r3, #16
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	3301      	adds	r3, #1
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	fbb2 f3f3 	udiv	r3, r2, r3
 800344c:	60bb      	str	r3, [r7, #8]
      break;
 800344e:	e002      	b.n	8003456 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003452:	60bb      	str	r3, [r7, #8]
      break;
 8003454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003456:	68bb      	ldr	r3, [r7, #8]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3710      	adds	r7, #16
 800345c:	46bd      	mov	sp, r7
 800345e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800
 8003468:	00f42400 	.word	0x00f42400
 800346c:	007a1200 	.word	0x007a1200

08003470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_RCC_GetHCLKFreq+0x14>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000000 	.word	0x20000000

08003488 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e041      	b.n	800351e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fd fddc 	bl	800106c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	4619      	mov	r1, r3
 80034c6:	4610      	mov	r0, r2
 80034c8:	f000 f9b4 	bl	8003834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_TIM_PWM_Start+0x24>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e022      	b.n	8003592 <HAL_TIM_PWM_Start+0x6a>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b04      	cmp	r3, #4
 8003550:	d109      	bne.n	8003566 <HAL_TIM_PWM_Start+0x3e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	bf14      	ite	ne
 800355e:	2301      	movne	r3, #1
 8003560:	2300      	moveq	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	e015      	b.n	8003592 <HAL_TIM_PWM_Start+0x6a>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d109      	bne.n	8003580 <HAL_TIM_PWM_Start+0x58>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	e008      	b.n	8003592 <HAL_TIM_PWM_Start+0x6a>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e07c      	b.n	8003694 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <HAL_TIM_PWM_Start+0x82>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a8:	e013      	b.n	80035d2 <HAL_TIM_PWM_Start+0xaa>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d104      	bne.n	80035ba <HAL_TIM_PWM_Start+0x92>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035b8:	e00b      	b.n	80035d2 <HAL_TIM_PWM_Start+0xaa>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d104      	bne.n	80035ca <HAL_TIM_PWM_Start+0xa2>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035c8:	e003      	b.n	80035d2 <HAL_TIM_PWM_Start+0xaa>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2201      	movs	r2, #1
 80035d8:	6839      	ldr	r1, [r7, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fb7a 	bl	8003cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a2d      	ldr	r2, [pc, #180]	; (800369c <HAL_TIM_PWM_Start+0x174>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_TIM_PWM_Start+0xcc>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a2c      	ldr	r2, [pc, #176]	; (80036a0 <HAL_TIM_PWM_Start+0x178>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d101      	bne.n	80035f8 <HAL_TIM_PWM_Start+0xd0>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <HAL_TIM_PWM_Start+0xd2>
 80035f8:	2300      	movs	r3, #0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a22      	ldr	r2, [pc, #136]	; (800369c <HAL_TIM_PWM_Start+0x174>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d022      	beq.n	800365e <HAL_TIM_PWM_Start+0x136>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003620:	d01d      	beq.n	800365e <HAL_TIM_PWM_Start+0x136>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <HAL_TIM_PWM_Start+0x17c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d018      	beq.n	800365e <HAL_TIM_PWM_Start+0x136>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1d      	ldr	r2, [pc, #116]	; (80036a8 <HAL_TIM_PWM_Start+0x180>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_TIM_PWM_Start+0x136>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1c      	ldr	r2, [pc, #112]	; (80036ac <HAL_TIM_PWM_Start+0x184>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00e      	beq.n	800365e <HAL_TIM_PWM_Start+0x136>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a16      	ldr	r2, [pc, #88]	; (80036a0 <HAL_TIM_PWM_Start+0x178>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_TIM_PWM_Start+0x136>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <HAL_TIM_PWM_Start+0x188>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_TIM_PWM_Start+0x136>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a16      	ldr	r2, [pc, #88]	; (80036b4 <HAL_TIM_PWM_Start+0x18c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d111      	bne.n	8003682 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b06      	cmp	r3, #6
 800366e:	d010      	beq.n	8003692 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003680:	e007      	b.n	8003692 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40010000 	.word	0x40010000
 80036a0:	40010400 	.word	0x40010400
 80036a4:	40000400 	.word	0x40000400
 80036a8:	40000800 	.word	0x40000800
 80036ac:	40000c00 	.word	0x40000c00
 80036b0:	40014000 	.word	0x40014000
 80036b4:	40001800 	.word	0x40001800

080036b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e0ac      	b.n	800382c <HAL_TIM_PWM_ConfigChannel+0x174>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b0c      	cmp	r3, #12
 80036de:	f200 809f 	bhi.w	8003820 <HAL_TIM_PWM_ConfigChannel+0x168>
 80036e2:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80036e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e8:	0800371d 	.word	0x0800371d
 80036ec:	08003821 	.word	0x08003821
 80036f0:	08003821 	.word	0x08003821
 80036f4:	08003821 	.word	0x08003821
 80036f8:	0800375d 	.word	0x0800375d
 80036fc:	08003821 	.word	0x08003821
 8003700:	08003821 	.word	0x08003821
 8003704:	08003821 	.word	0x08003821
 8003708:	0800379f 	.word	0x0800379f
 800370c:	08003821 	.word	0x08003821
 8003710:	08003821 	.word	0x08003821
 8003714:	08003821 	.word	0x08003821
 8003718:	080037df 	.word	0x080037df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f926 	bl	8003974 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0208 	orr.w	r2, r2, #8
 8003736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0204 	bic.w	r2, r2, #4
 8003746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6999      	ldr	r1, [r3, #24]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	619a      	str	r2, [r3, #24]
      break;
 800375a:	e062      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68b9      	ldr	r1, [r7, #8]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f976 	bl	8003a54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699a      	ldr	r2, [r3, #24]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699a      	ldr	r2, [r3, #24]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6999      	ldr	r1, [r3, #24]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	021a      	lsls	r2, r3, #8
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	619a      	str	r2, [r3, #24]
      break;
 800379c:	e041      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f9cb 	bl	8003b40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0208 	orr.w	r2, r2, #8
 80037b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0204 	bic.w	r2, r2, #4
 80037c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69d9      	ldr	r1, [r3, #28]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	61da      	str	r2, [r3, #28]
      break;
 80037dc:	e021      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fa1f 	bl	8003c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69d9      	ldr	r1, [r3, #28]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	021a      	lsls	r2, r3, #8
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	61da      	str	r2, [r3, #28]
      break;
 800381e:	e000      	b.n	8003822 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003820:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a40      	ldr	r2, [pc, #256]	; (8003948 <TIM_Base_SetConfig+0x114>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003852:	d00f      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a3d      	ldr	r2, [pc, #244]	; (800394c <TIM_Base_SetConfig+0x118>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00b      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a3c      	ldr	r2, [pc, #240]	; (8003950 <TIM_Base_SetConfig+0x11c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d007      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3b      	ldr	r2, [pc, #236]	; (8003954 <TIM_Base_SetConfig+0x120>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d003      	beq.n	8003874 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a3a      	ldr	r2, [pc, #232]	; (8003958 <TIM_Base_SetConfig+0x124>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d108      	bne.n	8003886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a2f      	ldr	r2, [pc, #188]	; (8003948 <TIM_Base_SetConfig+0x114>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d02b      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003894:	d027      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2c      	ldr	r2, [pc, #176]	; (800394c <TIM_Base_SetConfig+0x118>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d023      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a2b      	ldr	r2, [pc, #172]	; (8003950 <TIM_Base_SetConfig+0x11c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01f      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a2a      	ldr	r2, [pc, #168]	; (8003954 <TIM_Base_SetConfig+0x120>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01b      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a29      	ldr	r2, [pc, #164]	; (8003958 <TIM_Base_SetConfig+0x124>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d017      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a28      	ldr	r2, [pc, #160]	; (800395c <TIM_Base_SetConfig+0x128>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a27      	ldr	r2, [pc, #156]	; (8003960 <TIM_Base_SetConfig+0x12c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00f      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a26      	ldr	r2, [pc, #152]	; (8003964 <TIM_Base_SetConfig+0x130>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00b      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a25      	ldr	r2, [pc, #148]	; (8003968 <TIM_Base_SetConfig+0x134>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d007      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a24      	ldr	r2, [pc, #144]	; (800396c <TIM_Base_SetConfig+0x138>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d003      	beq.n	80038e6 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a23      	ldr	r2, [pc, #140]	; (8003970 <TIM_Base_SetConfig+0x13c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d108      	bne.n	80038f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <TIM_Base_SetConfig+0x114>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d003      	beq.n	800392c <TIM_Base_SetConfig+0xf8>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a0c      	ldr	r2, [pc, #48]	; (8003958 <TIM_Base_SetConfig+0x124>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d103      	bne.n	8003934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	615a      	str	r2, [r3, #20]
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40010000 	.word	0x40010000
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800
 8003954:	40000c00 	.word	0x40000c00
 8003958:	40010400 	.word	0x40010400
 800395c:	40014000 	.word	0x40014000
 8003960:	40014400 	.word	0x40014400
 8003964:	40014800 	.word	0x40014800
 8003968:	40001800 	.word	0x40001800
 800396c:	40001c00 	.word	0x40001c00
 8003970:	40002000 	.word	0x40002000

08003974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	f023 0201 	bic.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0303 	bic.w	r3, r3, #3
 80039aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f023 0302 	bic.w	r3, r3, #2
 80039bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a20      	ldr	r2, [pc, #128]	; (8003a4c <TIM_OC1_SetConfig+0xd8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_OC1_SetConfig+0x64>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <TIM_OC1_SetConfig+0xdc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d10c      	bne.n	80039f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f023 0308 	bic.w	r3, r3, #8
 80039de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f023 0304 	bic.w	r3, r3, #4
 80039f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <TIM_OC1_SetConfig+0xd8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d003      	beq.n	8003a02 <TIM_OC1_SetConfig+0x8e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a14      	ldr	r2, [pc, #80]	; (8003a50 <TIM_OC1_SetConfig+0xdc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d111      	bne.n	8003a26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	621a      	str	r2, [r3, #32]
}
 8003a40:	bf00      	nop
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	40010400 	.word	0x40010400

08003a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	f023 0210 	bic.w	r2, r3, #16
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f023 0320 	bic.w	r3, r3, #32
 8003a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a22      	ldr	r2, [pc, #136]	; (8003b38 <TIM_OC2_SetConfig+0xe4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d003      	beq.n	8003abc <TIM_OC2_SetConfig+0x68>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a21      	ldr	r2, [pc, #132]	; (8003b3c <TIM_OC2_SetConfig+0xe8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d10d      	bne.n	8003ad8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a17      	ldr	r2, [pc, #92]	; (8003b38 <TIM_OC2_SetConfig+0xe4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_OC2_SetConfig+0x94>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <TIM_OC2_SetConfig+0xe8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d113      	bne.n	8003b10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	621a      	str	r2, [r3, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	40010400 	.word	0x40010400

08003b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0303 	bic.w	r3, r3, #3
 8003b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	021b      	lsls	r3, r3, #8
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a21      	ldr	r2, [pc, #132]	; (8003c20 <TIM_OC3_SetConfig+0xe0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <TIM_OC3_SetConfig+0x66>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a20      	ldr	r2, [pc, #128]	; (8003c24 <TIM_OC3_SetConfig+0xe4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d10d      	bne.n	8003bc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <TIM_OC3_SetConfig+0xe0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d003      	beq.n	8003bd2 <TIM_OC3_SetConfig+0x92>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <TIM_OC3_SetConfig+0xe4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d113      	bne.n	8003bfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	621a      	str	r2, [r3, #32]
}
 8003c14:	bf00      	nop
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	40010000 	.word	0x40010000
 8003c24:	40010400 	.word	0x40010400

08003c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	031b      	lsls	r3, r3, #12
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <TIM_OC4_SetConfig+0xa4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_OC4_SetConfig+0x68>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <TIM_OC4_SetConfig+0xa8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d109      	bne.n	8003ca4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	019b      	lsls	r3, r3, #6
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40010000 	.word	0x40010000
 8003cd0:	40010400 	.word	0x40010400

08003cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a1a      	ldr	r2, [r3, #32]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 031f 	and.w	r3, r3, #31
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e05a      	b.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d022      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d84:	d01d      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d018      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d013      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1a      	ldr	r2, [pc, #104]	; (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00e      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d009      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d004      	beq.n	8003dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d10c      	bne.n	8003ddc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000800 	.word	0x40000800
 8003e08:	40000c00 	.word	0x40000c00
 8003e0c:	40010400 	.word	0x40010400
 8003e10:	40014000 	.word	0x40014000
 8003e14:	40001800 	.word	0x40001800

08003e18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e18:	b084      	sub	sp, #16
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	f107 001c 	add.w	r0, r7, #28
 8003e26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d122      	bne.n	8003e76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d105      	bne.n	8003e6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f001 fac6 	bl	80053fc <USB_CoreReset>
 8003e70:	4603      	mov	r3, r0
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e01a      	b.n	8003eac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f001 faba 	bl	80053fc <USB_CoreReset>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	639a      	str	r2, [r3, #56]	; 0x38
 8003e9e:	e005      	b.n	8003eac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d10b      	bne.n	8003eca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f043 0206 	orr.w	r2, r3, #6
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f043 0220 	orr.w	r2, r3, #32
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ed6:	b004      	add	sp, #16
 8003ed8:	4770      	bx	lr
	...

08003edc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b087      	sub	sp, #28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d165      	bne.n	8003fbc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4a41      	ldr	r2, [pc, #260]	; (8003ff8 <USB_SetTurnaroundTime+0x11c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d906      	bls.n	8003f06 <USB_SetTurnaroundTime+0x2a>
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4a40      	ldr	r2, [pc, #256]	; (8003ffc <USB_SetTurnaroundTime+0x120>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d202      	bcs.n	8003f06 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f00:	230f      	movs	r3, #15
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	e062      	b.n	8003fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4a3c      	ldr	r2, [pc, #240]	; (8003ffc <USB_SetTurnaroundTime+0x120>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d306      	bcc.n	8003f1c <USB_SetTurnaroundTime+0x40>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	4a3b      	ldr	r2, [pc, #236]	; (8004000 <USB_SetTurnaroundTime+0x124>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d202      	bcs.n	8003f1c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f16:	230e      	movs	r3, #14
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e057      	b.n	8003fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4a38      	ldr	r2, [pc, #224]	; (8004000 <USB_SetTurnaroundTime+0x124>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d306      	bcc.n	8003f32 <USB_SetTurnaroundTime+0x56>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4a37      	ldr	r2, [pc, #220]	; (8004004 <USB_SetTurnaroundTime+0x128>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d202      	bcs.n	8003f32 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f2c:	230d      	movs	r3, #13
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	e04c      	b.n	8003fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4a33      	ldr	r2, [pc, #204]	; (8004004 <USB_SetTurnaroundTime+0x128>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d306      	bcc.n	8003f48 <USB_SetTurnaroundTime+0x6c>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4a32      	ldr	r2, [pc, #200]	; (8004008 <USB_SetTurnaroundTime+0x12c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d802      	bhi.n	8003f48 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f42:	230c      	movs	r3, #12
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	e041      	b.n	8003fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4a2f      	ldr	r2, [pc, #188]	; (8004008 <USB_SetTurnaroundTime+0x12c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d906      	bls.n	8003f5e <USB_SetTurnaroundTime+0x82>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4a2e      	ldr	r2, [pc, #184]	; (800400c <USB_SetTurnaroundTime+0x130>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d802      	bhi.n	8003f5e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f58:	230b      	movs	r3, #11
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	e036      	b.n	8003fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	4a2a      	ldr	r2, [pc, #168]	; (800400c <USB_SetTurnaroundTime+0x130>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d906      	bls.n	8003f74 <USB_SetTurnaroundTime+0x98>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	4a29      	ldr	r2, [pc, #164]	; (8004010 <USB_SetTurnaroundTime+0x134>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d802      	bhi.n	8003f74 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f6e:	230a      	movs	r3, #10
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	e02b      	b.n	8003fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4a26      	ldr	r2, [pc, #152]	; (8004010 <USB_SetTurnaroundTime+0x134>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d906      	bls.n	8003f8a <USB_SetTurnaroundTime+0xae>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4a25      	ldr	r2, [pc, #148]	; (8004014 <USB_SetTurnaroundTime+0x138>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d202      	bcs.n	8003f8a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f84:	2309      	movs	r3, #9
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e020      	b.n	8003fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	4a21      	ldr	r2, [pc, #132]	; (8004014 <USB_SetTurnaroundTime+0x138>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d306      	bcc.n	8003fa0 <USB_SetTurnaroundTime+0xc4>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4a20      	ldr	r2, [pc, #128]	; (8004018 <USB_SetTurnaroundTime+0x13c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d802      	bhi.n	8003fa0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	e015      	b.n	8003fcc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <USB_SetTurnaroundTime+0x13c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d906      	bls.n	8003fb6 <USB_SetTurnaroundTime+0xda>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4a1c      	ldr	r2, [pc, #112]	; (800401c <USB_SetTurnaroundTime+0x140>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d202      	bcs.n	8003fb6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003fb0:	2307      	movs	r3, #7
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	e00a      	b.n	8003fcc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003fb6:	2306      	movs	r3, #6
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	e007      	b.n	8003fcc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d102      	bne.n	8003fc8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003fc2:	2309      	movs	r3, #9
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	e001      	b.n	8003fcc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003fc8:	2309      	movs	r3, #9
 8003fca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	029b      	lsls	r3, r3, #10
 8003fe0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	00d8acbf 	.word	0x00d8acbf
 8003ffc:	00e4e1c0 	.word	0x00e4e1c0
 8004000:	00f42400 	.word	0x00f42400
 8004004:	01067380 	.word	0x01067380
 8004008:	011a499f 	.word	0x011a499f
 800400c:	01312cff 	.word	0x01312cff
 8004010:	014ca43f 	.word	0x014ca43f
 8004014:	016e3600 	.word	0x016e3600
 8004018:	01a6ab1f 	.word	0x01a6ab1f
 800401c:	01e84800 	.word	0x01e84800

08004020 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f043 0201 	orr.w	r2, r3, #1
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f023 0201 	bic.w	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d106      	bne.n	8004090 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	e00b      	b.n	80040a8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	60da      	str	r2, [r3, #12]
 80040a2:	e001      	b.n	80040a8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e003      	b.n	80040b0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80040a8:	2032      	movs	r0, #50	; 0x32
 80040aa:	f7fd f919 	bl	80012e0 <HAL_Delay>

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040b8:	b084      	sub	sp, #16
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b086      	sub	sp, #24
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	e009      	b.n	80040ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	3340      	adds	r3, #64	; 0x40
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	2200      	movs	r2, #0
 80040e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	3301      	adds	r3, #1
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	2b0e      	cmp	r3, #14
 80040f0:	d9f2      	bls.n	80040d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80040f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d11c      	bne.n	8004132 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004106:	f043 0302 	orr.w	r3, r3, #2
 800410a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
 8004130:	e00b      	b.n	800414a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004150:	461a      	mov	r2, r3
 8004152:	2300      	movs	r3, #0
 8004154:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800415c:	4619      	mov	r1, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004164:	461a      	mov	r2, r3
 8004166:	680b      	ldr	r3, [r1, #0]
 8004168:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	2b01      	cmp	r3, #1
 800416e:	d10c      	bne.n	800418a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d104      	bne.n	8004180 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004176:	2100      	movs	r1, #0
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f949 	bl	8004410 <USB_SetDevSpeed>
 800417e:	e008      	b.n	8004192 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004180:	2101      	movs	r1, #1
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f944 	bl	8004410 <USB_SetDevSpeed>
 8004188:	e003      	b.n	8004192 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800418a:	2103      	movs	r1, #3
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f93f 	bl	8004410 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004192:	2110      	movs	r1, #16
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f8f3 	bl	8004380 <USB_FlushTxFifo>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f911 	bl	80043cc <USB_FlushRxFifo>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ba:	461a      	mov	r2, r3
 80041bc:	2300      	movs	r3, #0
 80041be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c6:	461a      	mov	r2, r3
 80041c8:	2300      	movs	r3, #0
 80041ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d2:	461a      	mov	r2, r3
 80041d4:	2300      	movs	r3, #0
 80041d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041d8:	2300      	movs	r3, #0
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	e043      	b.n	8004266 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041f4:	d118      	bne.n	8004228 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10a      	bne.n	8004212 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004208:	461a      	mov	r2, r3
 800420a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	e013      	b.n	800423a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421e:	461a      	mov	r2, r3
 8004220:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e008      	b.n	800423a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004234:	461a      	mov	r2, r3
 8004236:	2300      	movs	r3, #0
 8004238:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004246:	461a      	mov	r2, r3
 8004248:	2300      	movs	r3, #0
 800424a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004258:	461a      	mov	r2, r3
 800425a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800425e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	3301      	adds	r3, #1
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	429a      	cmp	r2, r3
 800426c:	d3b7      	bcc.n	80041de <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800426e:	2300      	movs	r3, #0
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	e043      	b.n	80042fc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800428a:	d118      	bne.n	80042be <USB_DevInit+0x206>
    {
      if (i == 0U)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429e:	461a      	mov	r2, r3
 80042a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	e013      	b.n	80042d0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b4:	461a      	mov	r2, r3
 80042b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	e008      	b.n	80042d0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ca:	461a      	mov	r2, r3
 80042cc:	2300      	movs	r3, #0
 80042ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	015a      	lsls	r2, r3, #5
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4413      	add	r3, r2
 80042d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042dc:	461a      	mov	r2, r3
 80042de:	2300      	movs	r3, #0
 80042e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ee:	461a      	mov	r2, r3
 80042f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	3301      	adds	r3, #1
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	429a      	cmp	r2, r3
 8004302:	d3b7      	bcc.n	8004274 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004312:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004316:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004324:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	2b00      	cmp	r3, #0
 800432a:	d105      	bne.n	8004338 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f043 0210 	orr.w	r2, r3, #16
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699a      	ldr	r2, [r3, #24]
 800433c:	4b0f      	ldr	r3, [pc, #60]	; (800437c <USB_DevInit+0x2c4>)
 800433e:	4313      	orrs	r3, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f043 0208 	orr.w	r2, r3, #8
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d107      	bne.n	800436c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800436c:	7dfb      	ldrb	r3, [r7, #23]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004378:	b004      	add	sp, #16
 800437a:	4770      	bx	lr
 800437c:	803c3800 	.word	0x803c3800

08004380 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	019b      	lsls	r3, r3, #6
 8004392:	f043 0220 	orr.w	r2, r3, #32
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3301      	adds	r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4a09      	ldr	r2, [pc, #36]	; (80043c8 <USB_FlushTxFifo+0x48>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d901      	bls.n	80043ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e006      	b.n	80043ba <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b20      	cmp	r3, #32
 80043b6:	d0f0      	beq.n	800439a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	00030d40 	.word	0x00030d40

080043cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2210      	movs	r2, #16
 80043dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3301      	adds	r3, #1
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4a09      	ldr	r2, [pc, #36]	; (800440c <USB_FlushRxFifo+0x40>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d901      	bls.n	80043f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e006      	b.n	80043fe <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d0f0      	beq.n	80043de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	00030d40 	.word	0x00030d40

08004410 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	460b      	mov	r3, r1
 800441a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	68f9      	ldr	r1, [r7, #12]
 800442c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004430:	4313      	orrs	r3, r2
 8004432:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004442:	b480      	push	{r7}
 8004444:	b087      	sub	sp, #28
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 0306 	and.w	r3, r3, #6
 800445a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d102      	bne.n	8004468 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004462:	2300      	movs	r3, #0
 8004464:	75fb      	strb	r3, [r7, #23]
 8004466:	e00a      	b.n	800447e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d002      	beq.n	8004474 <USB_GetDevSpeed+0x32>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b06      	cmp	r3, #6
 8004472:	d102      	bne.n	800447a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004474:	2302      	movs	r3, #2
 8004476:	75fb      	strb	r3, [r7, #23]
 8004478:	e001      	b.n	800447e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800447a:	230f      	movs	r3, #15
 800447c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800447e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004480:	4618      	mov	r0, r3
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	785b      	ldrb	r3, [r3, #1]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d13a      	bne.n	800451e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ae:	69da      	ldr	r2, [r3, #28]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	f003 030f 	and.w	r3, r3, #15
 80044b8:	2101      	movs	r1, #1
 80044ba:	fa01 f303 	lsl.w	r3, r1, r3
 80044be:	b29b      	uxth	r3, r3
 80044c0:	68f9      	ldr	r1, [r7, #12]
 80044c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044c6:	4313      	orrs	r3, r2
 80044c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d155      	bne.n	800458c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	015a      	lsls	r2, r3, #5
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	78db      	ldrb	r3, [r3, #3]
 80044fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	059b      	lsls	r3, r3, #22
 8004502:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004504:	4313      	orrs	r3, r2
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	0151      	lsls	r1, r2, #5
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	440a      	add	r2, r1
 800450e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e036      	b.n	800458c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004524:	69da      	ldr	r2, [r3, #28]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	2101      	movs	r1, #1
 8004530:	fa01 f303 	lsl.w	r3, r1, r3
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	68f9      	ldr	r1, [r7, #12]
 8004538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800453c:	4313      	orrs	r3, r2
 800453e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d11a      	bne.n	800458c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	78db      	ldrb	r3, [r3, #3]
 8004570:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004572:	430b      	orrs	r3, r1
 8004574:	4313      	orrs	r3, r2
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
	...

0800459c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	785b      	ldrb	r3, [r3, #1]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d161      	bne.n	800467c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045ce:	d11f      	bne.n	8004610 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	0151      	lsls	r1, r2, #5
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	440a      	add	r2, r1
 80045e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	0151      	lsls	r1, r2, #5
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	440a      	add	r2, r1
 8004606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800460a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800460e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	2101      	movs	r1, #1
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	b29b      	uxth	r3, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	68f9      	ldr	r1, [r7, #12]
 800462c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004630:	4013      	ands	r3, r2
 8004632:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463a:	69da      	ldr	r2, [r3, #28]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	2101      	movs	r1, #1
 8004646:	fa01 f303 	lsl.w	r3, r1, r3
 800464a:	b29b      	uxth	r3, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	68f9      	ldr	r1, [r7, #12]
 8004650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004654:	4013      	ands	r3, r2
 8004656:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	0159      	lsls	r1, r3, #5
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	440b      	add	r3, r1
 800466e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004672:	4619      	mov	r1, r3
 8004674:	4b35      	ldr	r3, [pc, #212]	; (800474c <USB_DeactivateEndpoint+0x1b0>)
 8004676:	4013      	ands	r3, r2
 8004678:	600b      	str	r3, [r1, #0]
 800467a:	e060      	b.n	800473e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800468e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004692:	d11f      	bne.n	80046d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	2101      	movs	r1, #1
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	041b      	lsls	r3, r3, #16
 80046ec:	43db      	mvns	r3, r3
 80046ee:	68f9      	ldr	r1, [r7, #12]
 80046f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046f4:	4013      	ands	r3, r2
 80046f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	2101      	movs	r1, #1
 800470a:	fa01 f303 	lsl.w	r3, r1, r3
 800470e:	041b      	lsls	r3, r3, #16
 8004710:	43db      	mvns	r3, r3
 8004712:	68f9      	ldr	r1, [r7, #12]
 8004714:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004718:	4013      	ands	r3, r2
 800471a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	0159      	lsls	r1, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	440b      	add	r3, r1
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	4619      	mov	r1, r3
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <USB_DeactivateEndpoint+0x1b4>)
 800473a:	4013      	ands	r3, r2
 800473c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	ec337800 	.word	0xec337800
 8004750:	eff37800 	.word	0xeff37800

08004754 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08a      	sub	sp, #40	; 0x28
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	4613      	mov	r3, r2
 8004760:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	785b      	ldrb	r3, [r3, #1]
 8004770:	2b01      	cmp	r3, #1
 8004772:	f040 815c 	bne.w	8004a2e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d132      	bne.n	80047e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	0151      	lsls	r1, r2, #5
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	440a      	add	r2, r1
 8004794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004798:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800479c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	0151      	lsls	r1, r2, #5
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	440a      	add	r2, r1
 80047b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047dc:	0cdb      	lsrs	r3, r3, #19
 80047de:	04db      	lsls	r3, r3, #19
 80047e0:	6113      	str	r3, [r2, #16]
 80047e2:	e074      	b.n	80048ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	0151      	lsls	r1, r2, #5
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fe:	0cdb      	lsrs	r3, r3, #19
 8004800:	04db      	lsls	r3, r3, #19
 8004802:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	0151      	lsls	r1, r2, #5
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	440a      	add	r2, r1
 800481a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004822:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	6959      	ldr	r1, [r3, #20]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	440b      	add	r3, r1
 8004840:	1e59      	subs	r1, r3, #1
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	fbb1 f3f3 	udiv	r3, r1, r3
 800484a:	04d9      	lsls	r1, r3, #19
 800484c:	4b9d      	ldr	r3, [pc, #628]	; (8004ac4 <USB_EPStartXfer+0x370>)
 800484e:	400b      	ands	r3, r1
 8004850:	69b9      	ldr	r1, [r7, #24]
 8004852:	0148      	lsls	r0, r1, #5
 8004854:	69f9      	ldr	r1, [r7, #28]
 8004856:	4401      	add	r1, r0
 8004858:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800485c:	4313      	orrs	r3, r2
 800485e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	015a      	lsls	r2, r3, #5
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	4413      	add	r3, r2
 8004868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486c:	691a      	ldr	r2, [r3, #16]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004876:	69b9      	ldr	r1, [r7, #24]
 8004878:	0148      	lsls	r0, r1, #5
 800487a:	69f9      	ldr	r1, [r7, #28]
 800487c:	4401      	add	r1, r0
 800487e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004882:	4313      	orrs	r3, r2
 8004884:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	78db      	ldrb	r3, [r3, #3]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d11f      	bne.n	80048ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	0151      	lsls	r1, r2, #5
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	440a      	add	r2, r1
 80048a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80048ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	0151      	lsls	r1, r2, #5
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	440a      	add	r2, r1
 80048c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d14b      	bne.n	800496c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d009      	beq.n	80048f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e8:	461a      	mov	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	78db      	ldrb	r3, [r3, #3]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d128      	bne.n	800494a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d110      	bne.n	800492a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004922:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	e00f      	b.n	800494a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	0151      	lsls	r1, r2, #5
 800493c:	69fa      	ldr	r2, [r7, #28]
 800493e:	440a      	add	r2, r1
 8004940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004948:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	0151      	lsls	r1, r2, #5
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	440a      	add	r2, r1
 8004960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004964:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e12f      	b.n	8004bcc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	0151      	lsls	r1, r2, #5
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	440a      	add	r2, r1
 8004982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004986:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800498a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	78db      	ldrb	r3, [r3, #3]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d015      	beq.n	80049c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8117 	beq.w	8004bcc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	2101      	movs	r1, #1
 80049b0:	fa01 f303 	lsl.w	r3, r1, r3
 80049b4:	69f9      	ldr	r1, [r7, #28]
 80049b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ba:	4313      	orrs	r3, r2
 80049bc:	634b      	str	r3, [r1, #52]	; 0x34
 80049be:	e105      	b.n	8004bcc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d110      	bne.n	80049f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	0151      	lsls	r1, r2, #5
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	440a      	add	r2, r1
 80049e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	e00f      	b.n	8004a12 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	0151      	lsls	r1, r2, #5
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	440a      	add	r2, r1
 8004a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a10:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	68d9      	ldr	r1, [r3, #12]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781a      	ldrb	r2, [r3, #0]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	b298      	uxth	r0, r3
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	4603      	mov	r3, r0
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fa2b 	bl	8004e82 <USB_WritePacket>
 8004a2c:	e0ce      	b.n	8004bcc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	0151      	lsls	r1, r2, #5
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	440a      	add	r2, r1
 8004a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a48:	0cdb      	lsrs	r3, r3, #19
 8004a4a:	04db      	lsls	r3, r3, #19
 8004a4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	0151      	lsls	r1, r2, #5
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	440a      	add	r2, r1
 8004a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a70:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d126      	bne.n	8004ac8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a90:	69b9      	ldr	r1, [r7, #24]
 8004a92:	0148      	lsls	r0, r1, #5
 8004a94:	69f9      	ldr	r1, [r7, #28]
 8004a96:	4401      	add	r1, r0
 8004a98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	0151      	lsls	r1, r2, #5
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004abe:	6113      	str	r3, [r2, #16]
 8004ac0:	e036      	b.n	8004b30 <USB_EPStartXfer+0x3dc>
 8004ac2:	bf00      	nop
 8004ac4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	1e5a      	subs	r2, r3, #1
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004adc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	8afb      	ldrh	r3, [r7, #22]
 8004aee:	04d9      	lsls	r1, r3, #19
 8004af0:	4b39      	ldr	r3, [pc, #228]	; (8004bd8 <USB_EPStartXfer+0x484>)
 8004af2:	400b      	ands	r3, r1
 8004af4:	69b9      	ldr	r1, [r7, #24]
 8004af6:	0148      	lsls	r0, r1, #5
 8004af8:	69f9      	ldr	r1, [r7, #28]
 8004afa:	4401      	add	r1, r0
 8004afc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b00:	4313      	orrs	r3, r2
 8004b02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b10:	691a      	ldr	r2, [r3, #16]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	8af9      	ldrh	r1, [r7, #22]
 8004b18:	fb01 f303 	mul.w	r3, r1, r3
 8004b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b20:	69b9      	ldr	r1, [r7, #24]
 8004b22:	0148      	lsls	r0, r1, #5
 8004b24:	69f9      	ldr	r1, [r7, #28]
 8004b26:	4401      	add	r1, r0
 8004b28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d10d      	bne.n	8004b52 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	68d9      	ldr	r1, [r3, #12]
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4e:	460a      	mov	r2, r1
 8004b50:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	78db      	ldrb	r3, [r3, #3]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d128      	bne.n	8004bac <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d110      	bne.n	8004b8c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b88:	6013      	str	r3, [r2, #0]
 8004b8a:	e00f      	b.n	8004bac <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	0151      	lsls	r1, r2, #5
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	440a      	add	r2, r1
 8004ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004baa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	0151      	lsls	r1, r2, #5
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	440a      	add	r2, r1
 8004bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3720      	adds	r7, #32
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	1ff80000 	.word	0x1ff80000

08004bdc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	4613      	mov	r3, r2
 8004be8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	785b      	ldrb	r3, [r3, #1]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	f040 80cd 	bne.w	8004d98 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d132      	bne.n	8004c6c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	0151      	lsls	r1, r2, #5
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	440a      	add	r2, r1
 8004c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	0151      	lsls	r1, r2, #5
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	440a      	add	r2, r1
 8004c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c64:	0cdb      	lsrs	r3, r3, #19
 8004c66:	04db      	lsls	r3, r3, #19
 8004c68:	6113      	str	r3, [r2, #16]
 8004c6a:	e04e      	b.n	8004d0a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	0151      	lsls	r1, r2, #5
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	440a      	add	r2, r1
 8004c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c86:	0cdb      	lsrs	r3, r3, #19
 8004c88:	04db      	lsls	r3, r3, #19
 8004c8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004caa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	695a      	ldr	r2, [r3, #20]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d903      	bls.n	8004cc4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ce2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfa:	6939      	ldr	r1, [r7, #16]
 8004cfc:	0148      	lsls	r0, r1, #5
 8004cfe:	6979      	ldr	r1, [r7, #20]
 8004d00:	4401      	add	r1, r0
 8004d02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d06:	4313      	orrs	r3, r2
 8004d08:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d11e      	bne.n	8004d4e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d009      	beq.n	8004d2c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d24:	461a      	mov	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	0151      	lsls	r1, r2, #5
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	440a      	add	r2, r1
 8004d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	e092      	b.n	8004e74 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	0151      	lsls	r1, r2, #5
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	440a      	add	r2, r1
 8004d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d6c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d07e      	beq.n	8004e74 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	2101      	movs	r1, #1
 8004d88:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8c:	6979      	ldr	r1, [r7, #20]
 8004d8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d92:	4313      	orrs	r3, r2
 8004d94:	634b      	str	r3, [r1, #52]	; 0x34
 8004d96:	e06d      	b.n	8004e74 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db2:	0cdb      	lsrs	r3, r3, #19
 8004db4:	04db      	lsls	r3, r3, #19
 8004db6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dd6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dda:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	0151      	lsls	r1, r2, #5
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	440a      	add	r2, r1
 8004e02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e22:	6939      	ldr	r1, [r7, #16]
 8004e24:	0148      	lsls	r0, r1, #5
 8004e26:	6979      	ldr	r1, [r7, #20]
 8004e28:	4401      	add	r1, r0
 8004e2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d10d      	bne.n	8004e54 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d009      	beq.n	8004e54 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	68d9      	ldr	r1, [r3, #12]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e50:	460a      	mov	r2, r1
 8004e52:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b089      	sub	sp, #36	; 0x24
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	461a      	mov	r2, r3
 8004e90:	460b      	mov	r3, r1
 8004e92:	71fb      	strb	r3, [r7, #7]
 8004e94:	4613      	mov	r3, r2
 8004e96:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004ea0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d11a      	bne.n	8004ede <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ea8:	88bb      	ldrh	r3, [r7, #4]
 8004eaa:	3303      	adds	r3, #3
 8004eac:	089b      	lsrs	r3, r3, #2
 8004eae:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61bb      	str	r3, [r7, #24]
 8004eb4:	e00f      	b.n	8004ed6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	031a      	lsls	r2, r3, #12
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d3eb      	bcc.n	8004eb6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3724      	adds	r7, #36	; 0x24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b089      	sub	sp, #36	; 0x24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004f02:	88fb      	ldrh	r3, [r7, #6]
 8004f04:	3303      	adds	r3, #3
 8004f06:	089b      	lsrs	r3, r3, #2
 8004f08:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61bb      	str	r3, [r7, #24]
 8004f0e:	e00b      	b.n	8004f28 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	3301      	adds	r3, #1
 8004f26:	61bb      	str	r3, [r7, #24]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d3ef      	bcc.n	8004f10 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004f30:	69fb      	ldr	r3, [r7, #28]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3724      	adds	r7, #36	; 0x24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	785b      	ldrb	r3, [r3, #1]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d12c      	bne.n	8004fb4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	db12      	blt.n	8004f92 <USB_EPSetStall+0x54>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00f      	beq.n	8004f92 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f90:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e02b      	b.n	800500c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	db12      	blt.n	8004fec <USB_EPSetStall+0xae>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00f      	beq.n	8004fec <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fea:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	0151      	lsls	r1, r2, #5
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	440a      	add	r2, r1
 8005002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800500a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	785b      	ldrb	r3, [r3, #1]
 8005032:	2b01      	cmp	r3, #1
 8005034:	d128      	bne.n	8005088 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	440a      	add	r2, r1
 800504c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005050:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005054:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	78db      	ldrb	r3, [r3, #3]
 800505a:	2b03      	cmp	r3, #3
 800505c:	d003      	beq.n	8005066 <USB_EPClearStall+0x4c>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	78db      	ldrb	r3, [r3, #3]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d138      	bne.n	80050d8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	0151      	lsls	r1, r2, #5
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	440a      	add	r2, r1
 800507c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e027      	b.n	80050d8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	0151      	lsls	r1, r2, #5
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	440a      	add	r2, r1
 800509e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	78db      	ldrb	r3, [r3, #3]
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d003      	beq.n	80050b8 <USB_EPClearStall+0x9e>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	78db      	ldrb	r3, [r3, #3]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d10f      	bne.n	80050d8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	0151      	lsls	r1, r2, #5
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	440a      	add	r2, r1
 80050ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050d6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b085      	sub	sp, #20
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	460b      	mov	r3, r1
 80050f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005104:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005108:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800511a:	68f9      	ldr	r1, [r7, #12]
 800511c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005120:	4313      	orrs	r3, r2
 8005122:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800514c:	f023 0303 	bic.w	r3, r3, #3
 8005150:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005160:	f023 0302 	bic.w	r3, r3, #2
 8005164:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800518e:	f023 0303 	bic.w	r3, r3, #3
 8005192:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051a2:	f043 0302 	orr.w	r3, r3, #2
 80051a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4013      	ands	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051ce:	68fb      	ldr	r3, [r7, #12]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	4013      	ands	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	0c1b      	lsrs	r3, r3, #16
}
 8005204:	4618      	mov	r0, r3
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	4013      	ands	r3, r2
 8005232:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	b29b      	uxth	r3, r3
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	4013      	ands	r3, r2
 8005270:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005272:	68bb      	ldr	r3, [r7, #8]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	fa22 f303 	lsr.w	r3, r2, r3
 80052b0:	01db      	lsls	r3, r3, #7
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80052ba:	78fb      	ldrb	r3, [r7, #3]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4013      	ands	r3, r2
 80052cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052ce:	68bb      	ldr	r3, [r7, #8]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	371c      	adds	r7, #28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f003 0301 	and.w	r3, r3, #1
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005312:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005316:	f023 0307 	bic.w	r3, r3, #7
 800531a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800532e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	460b      	mov	r3, r1
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	333c      	adds	r3, #60	; 0x3c
 8005356:	3304      	adds	r3, #4
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4a26      	ldr	r2, [pc, #152]	; (80053f8 <USB_EP0_OutStart+0xb8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d90a      	bls.n	800537a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005374:	d101      	bne.n	800537a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e037      	b.n	80053ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005380:	461a      	mov	r2, r3
 8005382:	2300      	movs	r3, #0
 8005384:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005394:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005398:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a8:	f043 0318 	orr.w	r3, r3, #24
 80053ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80053c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80053c2:	7afb      	ldrb	r3, [r7, #11]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d10f      	bne.n	80053e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ce:	461a      	mov	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80053e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	4f54300a 	.word	0x4f54300a

080053fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3301      	adds	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4a13      	ldr	r2, [pc, #76]	; (8005460 <USB_CoreReset+0x64>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d901      	bls.n	800541a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e01b      	b.n	8005452 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	daf2      	bge.n	8005408 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f043 0201 	orr.w	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	3301      	adds	r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4a09      	ldr	r2, [pc, #36]	; (8005460 <USB_CoreReset+0x64>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d901      	bls.n	8005444 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e006      	b.n	8005452 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b01      	cmp	r3, #1
 800544e:	d0f0      	beq.n	8005432 <USB_CoreReset+0x36>

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	00030d40 	.word	0x00030d40

08005464 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005470:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005474:	f002 f906 	bl	8007684 <USBD_static_malloc>
 8005478:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d105      	bne.n	800548c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005488:	2302      	movs	r3, #2
 800548a:	e066      	b.n	800555a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	7c1b      	ldrb	r3, [r3, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d119      	bne.n	80054d0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800549c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054a0:	2202      	movs	r2, #2
 80054a2:	2181      	movs	r1, #129	; 0x81
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f001 ffca 	bl	800743e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80054b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054b4:	2202      	movs	r2, #2
 80054b6:	2101      	movs	r1, #1
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f001 ffc0 	bl	800743e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2210      	movs	r2, #16
 80054ca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80054ce:	e016      	b.n	80054fe <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80054d0:	2340      	movs	r3, #64	; 0x40
 80054d2:	2202      	movs	r2, #2
 80054d4:	2181      	movs	r1, #129	; 0x81
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 ffb1 	bl	800743e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80054e2:	2340      	movs	r3, #64	; 0x40
 80054e4:	2202      	movs	r2, #2
 80054e6:	2101      	movs	r1, #1
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f001 ffa8 	bl	800743e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2210      	movs	r2, #16
 80054fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80054fe:	2308      	movs	r3, #8
 8005500:	2203      	movs	r2, #3
 8005502:	2182      	movs	r1, #130	; 0x82
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 ff9a 	bl	800743e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	7c1b      	ldrb	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800553a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800553e:	2101      	movs	r1, #1
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f002 f86b 	bl	800761c <USBD_LL_PrepareReceive>
 8005546:	e007      	b.n	8005558 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800554e:	2340      	movs	r3, #64	; 0x40
 8005550:	2101      	movs	r1, #1
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f002 f862 	bl	800761c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	460b      	mov	r3, r1
 800556c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800556e:	2181      	movs	r1, #129	; 0x81
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f001 ff8a 	bl	800748a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800557c:	2101      	movs	r1, #1
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f001 ff83 	bl	800748a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800558c:	2182      	movs	r1, #130	; 0x82
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f001 ff7b 	bl	800748a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00e      	beq.n	80055cc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055be:	4618      	mov	r0, r3
 80055c0:	f002 f86e 	bl	80076a0 <USBD_static_free>
    pdev->pClassData = NULL;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
	...

080055d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80055ea:	2300      	movs	r3, #0
 80055ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e0af      	b.n	8005760 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005608:	2b00      	cmp	r3, #0
 800560a:	d03f      	beq.n	800568c <USBD_CDC_Setup+0xb4>
 800560c:	2b20      	cmp	r3, #32
 800560e:	f040 809f 	bne.w	8005750 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	88db      	ldrh	r3, [r3, #6]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d02e      	beq.n	8005678 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	b25b      	sxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	da16      	bge.n	8005652 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005630:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	88d2      	ldrh	r2, [r2, #6]
 8005636:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	88db      	ldrh	r3, [r3, #6]
 800563c:	2b07      	cmp	r3, #7
 800563e:	bf28      	it	cs
 8005640:	2307      	movcs	r3, #7
 8005642:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	89fa      	ldrh	r2, [r7, #14]
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f001 fae9 	bl	8006c22 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005650:	e085      	b.n	800575e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	785a      	ldrb	r2, [r3, #1]
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	88db      	ldrh	r3, [r3, #6]
 8005660:	b2da      	uxtb	r2, r3
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005668:	6939      	ldr	r1, [r7, #16]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	88db      	ldrh	r3, [r3, #6]
 800566e:	461a      	mov	r2, r3
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f001 fb02 	bl	8006c7a <USBD_CtlPrepareRx>
      break;
 8005676:	e072      	b.n	800575e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	7850      	ldrb	r0, [r2, #1]
 8005684:	2200      	movs	r2, #0
 8005686:	6839      	ldr	r1, [r7, #0]
 8005688:	4798      	blx	r3
      break;
 800568a:	e068      	b.n	800575e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	2b0b      	cmp	r3, #11
 8005692:	d852      	bhi.n	800573a <USBD_CDC_Setup+0x162>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <USBD_CDC_Setup+0xc4>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080056cd 	.word	0x080056cd
 80056a0:	08005749 	.word	0x08005749
 80056a4:	0800573b 	.word	0x0800573b
 80056a8:	0800573b 	.word	0x0800573b
 80056ac:	0800573b 	.word	0x0800573b
 80056b0:	0800573b 	.word	0x0800573b
 80056b4:	0800573b 	.word	0x0800573b
 80056b8:	0800573b 	.word	0x0800573b
 80056bc:	0800573b 	.word	0x0800573b
 80056c0:	0800573b 	.word	0x0800573b
 80056c4:	080056f7 	.word	0x080056f7
 80056c8:	08005721 	.word	0x08005721
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d107      	bne.n	80056e8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80056d8:	f107 030a 	add.w	r3, r7, #10
 80056dc:	2202      	movs	r2, #2
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f001 fa9e 	bl	8006c22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056e6:	e032      	b.n	800574e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f001 fa28 	bl	8006b40 <USBD_CtlError>
            ret = USBD_FAIL;
 80056f0:	2303      	movs	r3, #3
 80056f2:	75fb      	strb	r3, [r7, #23]
          break;
 80056f4:	e02b      	b.n	800574e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d107      	bne.n	8005712 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005702:	f107 030d 	add.w	r3, r7, #13
 8005706:	2201      	movs	r2, #1
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 fa89 	bl	8006c22 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005710:	e01d      	b.n	800574e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 fa13 	bl	8006b40 <USBD_CtlError>
            ret = USBD_FAIL;
 800571a:	2303      	movs	r3, #3
 800571c:	75fb      	strb	r3, [r7, #23]
          break;
 800571e:	e016      	b.n	800574e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b03      	cmp	r3, #3
 800572a:	d00f      	beq.n	800574c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f001 fa06 	bl	8006b40 <USBD_CtlError>
            ret = USBD_FAIL;
 8005734:	2303      	movs	r3, #3
 8005736:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005738:	e008      	b.n	800574c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800573a:	6839      	ldr	r1, [r7, #0]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f001 f9ff 	bl	8006b40 <USBD_CtlError>
          ret = USBD_FAIL;
 8005742:	2303      	movs	r3, #3
 8005744:	75fb      	strb	r3, [r7, #23]
          break;
 8005746:	e002      	b.n	800574e <USBD_CDC_Setup+0x176>
          break;
 8005748:	bf00      	nop
 800574a:	e008      	b.n	800575e <USBD_CDC_Setup+0x186>
          break;
 800574c:	bf00      	nop
      }
      break;
 800574e:	e006      	b.n	800575e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005750:	6839      	ldr	r1, [r7, #0]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 f9f4 	bl	8006b40 <USBD_CtlError>
      ret = USBD_FAIL;
 8005758:	2303      	movs	r3, #3
 800575a:	75fb      	strb	r3, [r7, #23]
      break;
 800575c:	bf00      	nop
  }

  return (uint8_t)ret;
 800575e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800577a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005786:	2303      	movs	r3, #3
 8005788:	e04f      	b.n	800582a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005790:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005792:	78fa      	ldrb	r2, [r7, #3]
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	3318      	adds	r3, #24
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d029      	beq.n	80057fc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80057a8:	78fa      	ldrb	r2, [r7, #3]
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	3318      	adds	r3, #24
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	78f9      	ldrb	r1, [r7, #3]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	460b      	mov	r3, r1
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	1a5b      	subs	r3, r3, r1
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4403      	add	r3, r0
 80057c8:	3344      	adds	r3, #68	; 0x44
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80057d0:	fb03 f301 	mul.w	r3, r3, r1
 80057d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d110      	bne.n	80057fc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80057da:	78fa      	ldrb	r2, [r7, #3]
 80057dc:	6879      	ldr	r1, [r7, #4]
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	3318      	adds	r3, #24
 80057ea:	2200      	movs	r2, #0
 80057ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80057ee:	78f9      	ldrb	r1, [r7, #3]
 80057f0:	2300      	movs	r3, #0
 80057f2:	2200      	movs	r2, #0
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f001 fef0 	bl	80075da <USBD_LL_Transmit>
 80057fa:	e015      	b.n	8005828 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00b      	beq.n	8005828 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005824:	78fa      	ldrb	r2, [r7, #3]
 8005826:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	460b      	mov	r3, r1
 800583c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005844:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005850:	2303      	movs	r3, #3
 8005852:	e015      	b.n	8005880 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f001 ff00 	bl	800765e <USBD_LL_GetRxDataSize>
 800585e:	4602      	mov	r2, r0
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800587a:	4611      	mov	r1, r2
 800587c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005896:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800589e:	2303      	movs	r3, #3
 80058a0:	e01b      	b.n	80058da <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d015      	beq.n	80058d8 <USBD_CDC_EP0_RxReady+0x50>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80058b2:	2bff      	cmp	r3, #255	; 0xff
 80058b4:	d010      	beq.n	80058d8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80058c4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80058cc:	b292      	uxth	r2, r2
 80058ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	22ff      	movs	r2, #255	; 0xff
 80058d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2243      	movs	r2, #67	; 0x43
 80058f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80058f2:	4b03      	ldr	r3, [pc, #12]	; (8005900 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	20000094 	.word	0x20000094

08005904 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2243      	movs	r2, #67	; 0x43
 8005910:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005912:	4b03      	ldr	r3, [pc, #12]	; (8005920 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	20000050 	.word	0x20000050

08005924 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2243      	movs	r2, #67	; 0x43
 8005930:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005932:	4b03      	ldr	r3, [pc, #12]	; (8005940 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005934:	4618      	mov	r0, r3
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	200000d8 	.word	0x200000d8

08005944 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	220a      	movs	r2, #10
 8005950:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005952:	4b03      	ldr	r3, [pc, #12]	; (8005960 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005954:	4618      	mov	r0, r3
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	2000000c 	.word	0x2000000c

08005964 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005974:	2303      	movs	r3, #3
 8005976:	e004      	b.n	8005982 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800598e:	b480      	push	{r7}
 8005990:	b087      	sub	sp, #28
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059a0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e008      	b.n	80059be <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e004      	b.n	80059f0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e016      	b.n	8005a48 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	7c1b      	ldrb	r3, [r3, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d109      	bne.n	8005a36 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f001 fdf4 	bl	800761c <USBD_LL_PrepareReceive>
 8005a34:	e007      	b.n	8005a46 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a3c:	2340      	movs	r3, #64	; 0x40
 8005a3e:	2101      	movs	r1, #1
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f001 fdeb 	bl	800761c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b086      	sub	sp, #24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e01f      	b.n	8005aa8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	79fa      	ldrb	r2, [r7, #7]
 8005a9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f001 fc67 	bl	8007370 <USBD_LL_Init>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e016      	b.n	8005af6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00b      	beq.n	8005af4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae4:	f107 020e 	add.w	r2, r7, #14
 8005ae8:	4610      	mov	r0, r2
 8005aea:	4798      	blx	r3
 8005aec:	4602      	mov	r2, r0
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f001 fc7e 	bl	8007408 <USBD_LL_Start>
 8005b0c:	4603      	mov	r3, r0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	78fa      	ldrb	r2, [r7, #3]
 8005b50:	4611      	mov	r1, r2
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
 8005b56:	4603      	mov	r3, r0
 8005b58:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d007      	beq.n	8005b8a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	78fa      	ldrb	r2, [r7, #3]
 8005b84:	4611      	mov	r1, r2
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	4798      	blx	r3
  }

  return USBD_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 ff90 	bl	8006acc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005bba:	461a      	mov	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d01a      	beq.n	8005c06 <USBD_LL_SetupStage+0x72>
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d822      	bhi.n	8005c1a <USBD_LL_SetupStage+0x86>
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <USBD_LL_SetupStage+0x4a>
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d00a      	beq.n	8005bf2 <USBD_LL_SetupStage+0x5e>
 8005bdc:	e01d      	b.n	8005c1a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fa62 	bl	80060b0 <USBD_StdDevReq>
 8005bec:	4603      	mov	r3, r0
 8005bee:	73fb      	strb	r3, [r7, #15]
      break;
 8005bf0:	e020      	b.n	8005c34 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fac6 	bl	800618c <USBD_StdItfReq>
 8005c00:	4603      	mov	r3, r0
 8005c02:	73fb      	strb	r3, [r7, #15]
      break;
 8005c04:	e016      	b.n	8005c34 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fb05 	bl	800621e <USBD_StdEPReq>
 8005c14:	4603      	mov	r3, r0
 8005c16:	73fb      	strb	r3, [r7, #15]
      break;
 8005c18:	e00c      	b.n	8005c34 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 fc4d 	bl	80074c8 <USBD_LL_StallEP>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	73fb      	strb	r3, [r7, #15]
      break;
 8005c32:	bf00      	nop
  }

  return ret;
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b086      	sub	sp, #24
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	460b      	mov	r3, r1
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005c4c:	7afb      	ldrb	r3, [r7, #11]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d138      	bne.n	8005cc4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d14a      	bne.n	8005cfa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d913      	bls.n	8005c98 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	1ad2      	subs	r2, r2, r3
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	4293      	cmp	r3, r2
 8005c88:	bf28      	it	cs
 8005c8a:	4613      	movcs	r3, r2
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f001 f80f 	bl	8006cb4 <USBD_CtlContinueRx>
 8005c96:	e030      	b.n	8005cfa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d10b      	bne.n	8005cbc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f001 f80a 	bl	8006cd6 <USBD_CtlSendStatus>
 8005cc2:	e01a      	b.n	8005cfa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d114      	bne.n	8005cfa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00e      	beq.n	8005cfa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	7afa      	ldrb	r2, [r7, #11]
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	4798      	blx	r3
 8005cec:	4603      	mov	r3, r0
 8005cee:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005cf0:	7dfb      	ldrb	r3, [r7, #23]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005cf6:	7dfb      	ldrb	r3, [r7, #23]
 8005cf8:	e000      	b.n	8005cfc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d12:	7afb      	ldrb	r3, [r7, #11]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d16b      	bne.n	8005df0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3314      	adds	r3, #20
 8005d1c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d156      	bne.n	8005dd6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d914      	bls.n	8005d5e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	1ad2      	subs	r2, r2, r3
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	461a      	mov	r2, r3
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 ff84 	bl	8006c58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d50:	2300      	movs	r3, #0
 8005d52:	2200      	movs	r2, #0
 8005d54:	2100      	movs	r1, #0
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f001 fc60 	bl	800761c <USBD_LL_PrepareReceive>
 8005d5c:	e03b      	b.n	8005dd6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	68da      	ldr	r2, [r3, #12]
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d11c      	bne.n	8005da4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d316      	bcc.n	8005da4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d20f      	bcs.n	8005da4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d84:	2200      	movs	r2, #0
 8005d86:	2100      	movs	r1, #0
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 ff65 	bl	8006c58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d96:	2300      	movs	r3, #0
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f001 fc3d 	bl	800761c <USBD_LL_PrepareReceive>
 8005da2:	e018      	b.n	8005dd6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d10b      	bne.n	8005dc8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005dc8:	2180      	movs	r1, #128	; 0x80
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f001 fb7c 	bl	80074c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 ff93 	bl	8006cfc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d122      	bne.n	8005e26 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f7ff fe98 	bl	8005b16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005dee:	e01a      	b.n	8005e26 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d114      	bne.n	8005e26 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00e      	beq.n	8005e26 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	7afa      	ldrb	r2, [r7, #11]
 8005e12:	4611      	mov	r1, r2
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	4798      	blx	r3
 8005e18:	4603      	mov	r3, r0
 8005e1a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
 8005e24:	e000      	b.n	8005e28 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e02f      	b.n	8005ec4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00f      	beq.n	8005e8e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d009      	beq.n	8005e8e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6852      	ldr	r2, [r2, #4]
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	4611      	mov	r1, r2
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e8e:	2340      	movs	r3, #64	; 0x40
 8005e90:	2200      	movs	r2, #0
 8005e92:	2100      	movs	r1, #0
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f001 fad2 	bl	800743e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2240      	movs	r2, #64	; 0x40
 8005ea6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005eaa:	2340      	movs	r3, #64	; 0x40
 8005eac:	2200      	movs	r2, #0
 8005eae:	2180      	movs	r1, #128	; 0x80
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 fac4 	bl	800743e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2240      	movs	r2, #64	; 0x40
 8005ec0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2204      	movs	r2, #4
 8005f06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d106      	bne.n	8005f3a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e012      	b.n	8005f84 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d10b      	bne.n	8005f82 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f7c:	69db      	ldr	r3, [r3, #28]
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e014      	b.n	8005fd0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d10d      	bne.n	8005fce <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	78fa      	ldrb	r2, [r7, #3]
 8005fc8:	4611      	mov	r1, r2
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e014      	b.n	800601c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d10d      	bne.n	800601a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	2b00      	cmp	r3, #0
 8006008:	d007      	beq.n	800601a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	78fa      	ldrb	r2, [r7, #3]
 8006014:	4611      	mov	r1, r2
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d009      	beq.n	8006068 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6852      	ldr	r2, [r2, #4]
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	4611      	mov	r1, r2
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
  }

  return USBD_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006072:	b480      	push	{r7}
 8006074:	b087      	sub	sp, #28
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	3301      	adds	r3, #1
 8006088:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006090:	8a3b      	ldrh	r3, [r7, #16]
 8006092:	021b      	lsls	r3, r3, #8
 8006094:	b21a      	sxth	r2, r3
 8006096:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800609a:	4313      	orrs	r3, r2
 800609c:	b21b      	sxth	r3, r3
 800609e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80060a0:	89fb      	ldrh	r3, [r7, #14]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
	...

080060b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060c6:	2b40      	cmp	r3, #64	; 0x40
 80060c8:	d005      	beq.n	80060d6 <USBD_StdDevReq+0x26>
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d853      	bhi.n	8006176 <USBD_StdDevReq+0xc6>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00b      	beq.n	80060ea <USBD_StdDevReq+0x3a>
 80060d2:	2b20      	cmp	r3, #32
 80060d4:	d14f      	bne.n	8006176 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
 80060e4:	4603      	mov	r3, r0
 80060e6:	73fb      	strb	r3, [r7, #15]
      break;
 80060e8:	e04a      	b.n	8006180 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	785b      	ldrb	r3, [r3, #1]
 80060ee:	2b09      	cmp	r3, #9
 80060f0:	d83b      	bhi.n	800616a <USBD_StdDevReq+0xba>
 80060f2:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <USBD_StdDevReq+0x48>)
 80060f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f8:	0800614d 	.word	0x0800614d
 80060fc:	08006161 	.word	0x08006161
 8006100:	0800616b 	.word	0x0800616b
 8006104:	08006157 	.word	0x08006157
 8006108:	0800616b 	.word	0x0800616b
 800610c:	0800612b 	.word	0x0800612b
 8006110:	08006121 	.word	0x08006121
 8006114:	0800616b 	.word	0x0800616b
 8006118:	08006143 	.word	0x08006143
 800611c:	08006135 	.word	0x08006135
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f9de 	bl	80064e4 <USBD_GetDescriptor>
          break;
 8006128:	e024      	b.n	8006174 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fb43 	bl	80067b8 <USBD_SetAddress>
          break;
 8006132:	e01f      	b.n	8006174 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fb82 	bl	8006840 <USBD_SetConfig>
 800613c:	4603      	mov	r3, r0
 800613e:	73fb      	strb	r3, [r7, #15]
          break;
 8006140:	e018      	b.n	8006174 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fc21 	bl	800698c <USBD_GetConfig>
          break;
 800614a:	e013      	b.n	8006174 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fc52 	bl	80069f8 <USBD_GetStatus>
          break;
 8006154:	e00e      	b.n	8006174 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fc81 	bl	8006a60 <USBD_SetFeature>
          break;
 800615e:	e009      	b.n	8006174 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fc90 	bl	8006a88 <USBD_ClrFeature>
          break;
 8006168:	e004      	b.n	8006174 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800616a:	6839      	ldr	r1, [r7, #0]
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fce7 	bl	8006b40 <USBD_CtlError>
          break;
 8006172:	bf00      	nop
      }
      break;
 8006174:	e004      	b.n	8006180 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006176:	6839      	ldr	r1, [r7, #0]
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fce1 	bl	8006b40 <USBD_CtlError>
      break;
 800617e:	bf00      	nop
  }

  return ret;
 8006180:	7bfb      	ldrb	r3, [r7, #15]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop

0800618c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	d005      	beq.n	80061b2 <USBD_StdItfReq+0x26>
 80061a6:	2b40      	cmp	r3, #64	; 0x40
 80061a8:	d82f      	bhi.n	800620a <USBD_StdItfReq+0x7e>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <USBD_StdItfReq+0x26>
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	d12b      	bne.n	800620a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d81d      	bhi.n	80061fc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	889b      	ldrh	r3, [r3, #4]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d813      	bhi.n	80061f2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
 80061d8:	4603      	mov	r3, r0
 80061da:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	88db      	ldrh	r3, [r3, #6]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d110      	bne.n	8006206 <USBD_StdItfReq+0x7a>
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10d      	bne.n	8006206 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fd73 	bl	8006cd6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061f0:	e009      	b.n	8006206 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80061f2:	6839      	ldr	r1, [r7, #0]
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fca3 	bl	8006b40 <USBD_CtlError>
          break;
 80061fa:	e004      	b.n	8006206 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fc9e 	bl	8006b40 <USBD_CtlError>
          break;
 8006204:	e000      	b.n	8006208 <USBD_StdItfReq+0x7c>
          break;
 8006206:	bf00      	nop
      }
      break;
 8006208:	e004      	b.n	8006214 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fc97 	bl	8006b40 <USBD_CtlError>
      break;
 8006212:	bf00      	nop
  }

  return ret;
 8006214:	7bfb      	ldrb	r3, [r7, #15]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	889b      	ldrh	r3, [r3, #4]
 8006230:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800623a:	2b40      	cmp	r3, #64	; 0x40
 800623c:	d007      	beq.n	800624e <USBD_StdEPReq+0x30>
 800623e:	2b40      	cmp	r3, #64	; 0x40
 8006240:	f200 8145 	bhi.w	80064ce <USBD_StdEPReq+0x2b0>
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00c      	beq.n	8006262 <USBD_StdEPReq+0x44>
 8006248:	2b20      	cmp	r3, #32
 800624a:	f040 8140 	bne.w	80064ce <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	6839      	ldr	r1, [r7, #0]
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]
      break;
 8006260:	e13a      	b.n	80064d8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	785b      	ldrb	r3, [r3, #1]
 8006266:	2b03      	cmp	r3, #3
 8006268:	d007      	beq.n	800627a <USBD_StdEPReq+0x5c>
 800626a:	2b03      	cmp	r3, #3
 800626c:	f300 8129 	bgt.w	80064c2 <USBD_StdEPReq+0x2a4>
 8006270:	2b00      	cmp	r3, #0
 8006272:	d07f      	beq.n	8006374 <USBD_StdEPReq+0x156>
 8006274:	2b01      	cmp	r3, #1
 8006276:	d03c      	beq.n	80062f2 <USBD_StdEPReq+0xd4>
 8006278:	e123      	b.n	80064c2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d002      	beq.n	800628c <USBD_StdEPReq+0x6e>
 8006286:	2b03      	cmp	r3, #3
 8006288:	d016      	beq.n	80062b8 <USBD_StdEPReq+0x9a>
 800628a:	e02c      	b.n	80062e6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800628c:	7bbb      	ldrb	r3, [r7, #14]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00d      	beq.n	80062ae <USBD_StdEPReq+0x90>
 8006292:	7bbb      	ldrb	r3, [r7, #14]
 8006294:	2b80      	cmp	r3, #128	; 0x80
 8006296:	d00a      	beq.n	80062ae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006298:	7bbb      	ldrb	r3, [r7, #14]
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 f913 	bl	80074c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062a2:	2180      	movs	r1, #128	; 0x80
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 f90f 	bl	80074c8 <USBD_LL_StallEP>
 80062aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062ac:	e020      	b.n	80062f0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fc45 	bl	8006b40 <USBD_CtlError>
              break;
 80062b6:	e01b      	b.n	80062f0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	885b      	ldrh	r3, [r3, #2]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10e      	bne.n	80062de <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062c0:	7bbb      	ldrb	r3, [r7, #14]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00b      	beq.n	80062de <USBD_StdEPReq+0xc0>
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	2b80      	cmp	r3, #128	; 0x80
 80062ca:	d008      	beq.n	80062de <USBD_StdEPReq+0xc0>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	88db      	ldrh	r3, [r3, #6]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d104      	bne.n	80062de <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80062d4:	7bbb      	ldrb	r3, [r7, #14]
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 f8f5 	bl	80074c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fcf9 	bl	8006cd6 <USBD_CtlSendStatus>

              break;
 80062e4:	e004      	b.n	80062f0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fc29 	bl	8006b40 <USBD_CtlError>
              break;
 80062ee:	bf00      	nop
          }
          break;
 80062f0:	e0ec      	b.n	80064cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d002      	beq.n	8006304 <USBD_StdEPReq+0xe6>
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d016      	beq.n	8006330 <USBD_StdEPReq+0x112>
 8006302:	e030      	b.n	8006366 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006304:	7bbb      	ldrb	r3, [r7, #14]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00d      	beq.n	8006326 <USBD_StdEPReq+0x108>
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	2b80      	cmp	r3, #128	; 0x80
 800630e:	d00a      	beq.n	8006326 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006310:	7bbb      	ldrb	r3, [r7, #14]
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f001 f8d7 	bl	80074c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800631a:	2180      	movs	r1, #128	; 0x80
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 f8d3 	bl	80074c8 <USBD_LL_StallEP>
 8006322:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006324:	e025      	b.n	8006372 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fc09 	bl	8006b40 <USBD_CtlError>
              break;
 800632e:	e020      	b.n	8006372 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	885b      	ldrh	r3, [r3, #2]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d11b      	bne.n	8006370 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800633e:	2b00      	cmp	r3, #0
 8006340:	d004      	beq.n	800634c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f001 f8dd 	bl	8007506 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fcc2 	bl	8006cd6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
 8006360:	4603      	mov	r3, r0
 8006362:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006364:	e004      	b.n	8006370 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fbe9 	bl	8006b40 <USBD_CtlError>
              break;
 800636e:	e000      	b.n	8006372 <USBD_StdEPReq+0x154>
              break;
 8006370:	bf00      	nop
          }
          break;
 8006372:	e0ab      	b.n	80064cc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d002      	beq.n	8006386 <USBD_StdEPReq+0x168>
 8006380:	2b03      	cmp	r3, #3
 8006382:	d032      	beq.n	80063ea <USBD_StdEPReq+0x1cc>
 8006384:	e097      	b.n	80064b6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006386:	7bbb      	ldrb	r3, [r7, #14]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <USBD_StdEPReq+0x17e>
 800638c:	7bbb      	ldrb	r3, [r7, #14]
 800638e:	2b80      	cmp	r3, #128	; 0x80
 8006390:	d004      	beq.n	800639c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fbd3 	bl	8006b40 <USBD_CtlError>
                break;
 800639a:	e091      	b.n	80064c0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800639c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	da0b      	bge.n	80063bc <USBD_StdEPReq+0x19e>
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063aa:	4613      	mov	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	3310      	adds	r3, #16
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	4413      	add	r3, r2
 80063b8:	3304      	adds	r3, #4
 80063ba:	e00b      	b.n	80063d4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063bc:	7bbb      	ldrb	r3, [r7, #14]
 80063be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	4413      	add	r3, r2
 80063d2:	3304      	adds	r3, #4
 80063d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2202      	movs	r2, #2
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fc1d 	bl	8006c22 <USBD_CtlSendData>
              break;
 80063e8:	e06a      	b.n	80064c0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80063ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	da11      	bge.n	8006416 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80063f2:	7bbb      	ldrb	r3, [r7, #14]
 80063f4:	f003 020f 	and.w	r2, r3, #15
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	440b      	add	r3, r1
 8006404:	3324      	adds	r3, #36	; 0x24
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d117      	bne.n	800643c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fb96 	bl	8006b40 <USBD_CtlError>
                  break;
 8006414:	e054      	b.n	80064c0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006416:	7bbb      	ldrb	r3, [r7, #14]
 8006418:	f003 020f 	and.w	r2, r3, #15
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	4613      	mov	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	440b      	add	r3, r1
 8006428:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d104      	bne.n	800643c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fb83 	bl	8006b40 <USBD_CtlError>
                  break;
 800643a:	e041      	b.n	80064c0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800643c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006440:	2b00      	cmp	r3, #0
 8006442:	da0b      	bge.n	800645c <USBD_StdEPReq+0x23e>
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	3310      	adds	r3, #16
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	4413      	add	r3, r2
 8006458:	3304      	adds	r3, #4
 800645a:	e00b      	b.n	8006474 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800645c:	7bbb      	ldrb	r3, [r7, #14]
 800645e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006462:	4613      	mov	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	4413      	add	r3, r2
 8006472:	3304      	adds	r3, #4
 8006474:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006476:	7bbb      	ldrb	r3, [r7, #14]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <USBD_StdEPReq+0x264>
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	2b80      	cmp	r3, #128	; 0x80
 8006480:	d103      	bne.n	800648a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	e00e      	b.n	80064a8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800648a:	7bbb      	ldrb	r3, [r7, #14]
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f001 f858 	bl	8007544 <USBD_LL_IsStallEP>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2201      	movs	r2, #1
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	e002      	b.n	80064a8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2202      	movs	r2, #2
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fbb7 	bl	8006c22 <USBD_CtlSendData>
              break;
 80064b4:	e004      	b.n	80064c0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fb41 	bl	8006b40 <USBD_CtlError>
              break;
 80064be:	bf00      	nop
          }
          break;
 80064c0:	e004      	b.n	80064cc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fb3b 	bl	8006b40 <USBD_CtlError>
          break;
 80064ca:	bf00      	nop
      }
      break;
 80064cc:	e004      	b.n	80064d8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80064ce:	6839      	ldr	r1, [r7, #0]
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fb35 	bl	8006b40 <USBD_CtlError>
      break;
 80064d6:	bf00      	nop
  }

  return ret;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
	...

080064e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	885b      	ldrh	r3, [r3, #2]
 80064fe:	0a1b      	lsrs	r3, r3, #8
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	2b06      	cmp	r3, #6
 8006506:	f200 8128 	bhi.w	800675a <USBD_GetDescriptor+0x276>
 800650a:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <USBD_GetDescriptor+0x2c>)
 800650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006510:	0800652d 	.word	0x0800652d
 8006514:	08006545 	.word	0x08006545
 8006518:	08006585 	.word	0x08006585
 800651c:	0800675b 	.word	0x0800675b
 8006520:	0800675b 	.word	0x0800675b
 8006524:	080066fb 	.word	0x080066fb
 8006528:	08006727 	.word	0x08006727
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	7c12      	ldrb	r2, [r2, #16]
 8006538:	f107 0108 	add.w	r1, r7, #8
 800653c:	4610      	mov	r0, r2
 800653e:	4798      	blx	r3
 8006540:	60f8      	str	r0, [r7, #12]
      break;
 8006542:	e112      	b.n	800676a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	7c1b      	ldrb	r3, [r3, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10d      	bne.n	8006568 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	f107 0208 	add.w	r2, r7, #8
 8006558:	4610      	mov	r0, r2
 800655a:	4798      	blx	r3
 800655c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	3301      	adds	r3, #1
 8006562:	2202      	movs	r2, #2
 8006564:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006566:	e100      	b.n	800676a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	f107 0208 	add.w	r2, r7, #8
 8006574:	4610      	mov	r0, r2
 8006576:	4798      	blx	r3
 8006578:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3301      	adds	r3, #1
 800657e:	2202      	movs	r2, #2
 8006580:	701a      	strb	r2, [r3, #0]
      break;
 8006582:	e0f2      	b.n	800676a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	885b      	ldrh	r3, [r3, #2]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b05      	cmp	r3, #5
 800658c:	f200 80ac 	bhi.w	80066e8 <USBD_GetDescriptor+0x204>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <USBD_GetDescriptor+0xb4>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065b1 	.word	0x080065b1
 800659c:	080065e5 	.word	0x080065e5
 80065a0:	08006619 	.word	0x08006619
 80065a4:	0800664d 	.word	0x0800664d
 80065a8:	08006681 	.word	0x08006681
 80065ac:	080066b5 	.word	0x080066b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00b      	beq.n	80065d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	7c12      	ldrb	r2, [r2, #16]
 80065c8:	f107 0108 	add.w	r1, r7, #8
 80065cc:	4610      	mov	r0, r2
 80065ce:	4798      	blx	r3
 80065d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065d2:	e091      	b.n	80066f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065d4:	6839      	ldr	r1, [r7, #0]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fab2 	bl	8006b40 <USBD_CtlError>
            err++;
 80065dc:	7afb      	ldrb	r3, [r7, #11]
 80065de:	3301      	adds	r3, #1
 80065e0:	72fb      	strb	r3, [r7, #11]
          break;
 80065e2:	e089      	b.n	80066f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	7c12      	ldrb	r2, [r2, #16]
 80065fc:	f107 0108 	add.w	r1, r7, #8
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
 8006604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006606:	e077      	b.n	80066f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fa98 	bl	8006b40 <USBD_CtlError>
            err++;
 8006610:	7afb      	ldrb	r3, [r7, #11]
 8006612:	3301      	adds	r3, #1
 8006614:	72fb      	strb	r3, [r7, #11]
          break;
 8006616:	e06f      	b.n	80066f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	7c12      	ldrb	r2, [r2, #16]
 8006630:	f107 0108 	add.w	r1, r7, #8
 8006634:	4610      	mov	r0, r2
 8006636:	4798      	blx	r3
 8006638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800663a:	e05d      	b.n	80066f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fa7e 	bl	8006b40 <USBD_CtlError>
            err++;
 8006644:	7afb      	ldrb	r3, [r7, #11]
 8006646:	3301      	adds	r3, #1
 8006648:	72fb      	strb	r3, [r7, #11]
          break;
 800664a:	e055      	b.n	80066f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	7c12      	ldrb	r2, [r2, #16]
 8006664:	f107 0108 	add.w	r1, r7, #8
 8006668:	4610      	mov	r0, r2
 800666a:	4798      	blx	r3
 800666c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800666e:	e043      	b.n	80066f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fa64 	bl	8006b40 <USBD_CtlError>
            err++;
 8006678:	7afb      	ldrb	r3, [r7, #11]
 800667a:	3301      	adds	r3, #1
 800667c:	72fb      	strb	r3, [r7, #11]
          break;
 800667e:	e03b      	b.n	80066f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	7c12      	ldrb	r2, [r2, #16]
 8006698:	f107 0108 	add.w	r1, r7, #8
 800669c:	4610      	mov	r0, r2
 800669e:	4798      	blx	r3
 80066a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066a2:	e029      	b.n	80066f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fa4a 	bl	8006b40 <USBD_CtlError>
            err++;
 80066ac:	7afb      	ldrb	r3, [r7, #11]
 80066ae:	3301      	adds	r3, #1
 80066b0:	72fb      	strb	r3, [r7, #11]
          break;
 80066b2:	e021      	b.n	80066f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00b      	beq.n	80066d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	7c12      	ldrb	r2, [r2, #16]
 80066cc:	f107 0108 	add.w	r1, r7, #8
 80066d0:	4610      	mov	r0, r2
 80066d2:	4798      	blx	r3
 80066d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066d6:	e00f      	b.n	80066f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066d8:	6839      	ldr	r1, [r7, #0]
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fa30 	bl	8006b40 <USBD_CtlError>
            err++;
 80066e0:	7afb      	ldrb	r3, [r7, #11]
 80066e2:	3301      	adds	r3, #1
 80066e4:	72fb      	strb	r3, [r7, #11]
          break;
 80066e6:	e007      	b.n	80066f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa28 	bl	8006b40 <USBD_CtlError>
          err++;
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	3301      	adds	r3, #1
 80066f4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80066f6:	bf00      	nop
      }
      break;
 80066f8:	e037      	b.n	800676a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	7c1b      	ldrb	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d109      	bne.n	8006716 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670a:	f107 0208 	add.w	r2, r7, #8
 800670e:	4610      	mov	r0, r2
 8006710:	4798      	blx	r3
 8006712:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006714:	e029      	b.n	800676a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fa11 	bl	8006b40 <USBD_CtlError>
        err++;
 800671e:	7afb      	ldrb	r3, [r7, #11]
 8006720:	3301      	adds	r3, #1
 8006722:	72fb      	strb	r3, [r7, #11]
      break;
 8006724:	e021      	b.n	800676a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	7c1b      	ldrb	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10d      	bne.n	800674a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	f107 0208 	add.w	r2, r7, #8
 800673a:	4610      	mov	r0, r2
 800673c:	4798      	blx	r3
 800673e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3301      	adds	r3, #1
 8006744:	2207      	movs	r2, #7
 8006746:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006748:	e00f      	b.n	800676a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f9f7 	bl	8006b40 <USBD_CtlError>
        err++;
 8006752:	7afb      	ldrb	r3, [r7, #11]
 8006754:	3301      	adds	r3, #1
 8006756:	72fb      	strb	r3, [r7, #11]
      break;
 8006758:	e007      	b.n	800676a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f9ef 	bl	8006b40 <USBD_CtlError>
      err++;
 8006762:	7afb      	ldrb	r3, [r7, #11]
 8006764:	3301      	adds	r3, #1
 8006766:	72fb      	strb	r3, [r7, #11]
      break;
 8006768:	bf00      	nop
  }

  if (err != 0U)
 800676a:	7afb      	ldrb	r3, [r7, #11]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d11e      	bne.n	80067ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	88db      	ldrh	r3, [r3, #6]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d016      	beq.n	80067a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006778:	893b      	ldrh	r3, [r7, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00e      	beq.n	800679c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	88da      	ldrh	r2, [r3, #6]
 8006782:	893b      	ldrh	r3, [r7, #8]
 8006784:	4293      	cmp	r3, r2
 8006786:	bf28      	it	cs
 8006788:	4613      	movcs	r3, r2
 800678a:	b29b      	uxth	r3, r3
 800678c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800678e:	893b      	ldrh	r3, [r7, #8]
 8006790:	461a      	mov	r2, r3
 8006792:	68f9      	ldr	r1, [r7, #12]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fa44 	bl	8006c22 <USBD_CtlSendData>
 800679a:	e009      	b.n	80067b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800679c:	6839      	ldr	r1, [r7, #0]
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f9ce 	bl	8006b40 <USBD_CtlError>
 80067a4:	e004      	b.n	80067b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fa95 	bl	8006cd6 <USBD_CtlSendStatus>
 80067ac:	e000      	b.n	80067b0 <USBD_GetDescriptor+0x2cc>
    return;
 80067ae:	bf00      	nop
  }
}
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop

080067b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	889b      	ldrh	r3, [r3, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d131      	bne.n	800682e <USBD_SetAddress+0x76>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	88db      	ldrh	r3, [r3, #6]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d12d      	bne.n	800682e <USBD_SetAddress+0x76>
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	885b      	ldrh	r3, [r3, #2]
 80067d6:	2b7f      	cmp	r3, #127	; 0x7f
 80067d8:	d829      	bhi.n	800682e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	885b      	ldrh	r3, [r3, #2]
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	d104      	bne.n	80067fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80067f2:	6839      	ldr	r1, [r7, #0]
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f9a3 	bl	8006b40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067fa:	e01d      	b.n	8006838 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	7bfa      	ldrb	r2, [r7, #15]
 8006800:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 fec7 	bl	800759c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa61 	bl	8006cd6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2202      	movs	r2, #2
 800681e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006822:	e009      	b.n	8006838 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800682c:	e004      	b.n	8006838 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f985 	bl	8006b40 <USBD_CtlError>
  }
}
 8006836:	bf00      	nop
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	885b      	ldrh	r3, [r3, #2]
 8006852:	b2da      	uxtb	r2, r3
 8006854:	4b4c      	ldr	r3, [pc, #304]	; (8006988 <USBD_SetConfig+0x148>)
 8006856:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006858:	4b4b      	ldr	r3, [pc, #300]	; (8006988 <USBD_SetConfig+0x148>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d905      	bls.n	800686c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f96c 	bl	8006b40 <USBD_CtlError>
    return USBD_FAIL;
 8006868:	2303      	movs	r3, #3
 800686a:	e088      	b.n	800697e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d002      	beq.n	800687e <USBD_SetConfig+0x3e>
 8006878:	2b03      	cmp	r3, #3
 800687a:	d025      	beq.n	80068c8 <USBD_SetConfig+0x88>
 800687c:	e071      	b.n	8006962 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800687e:	4b42      	ldr	r3, [pc, #264]	; (8006988 <USBD_SetConfig+0x148>)
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d01c      	beq.n	80068c0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006886:	4b40      	ldr	r3, [pc, #256]	; (8006988 <USBD_SetConfig+0x148>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006890:	4b3d      	ldr	r3, [pc, #244]	; (8006988 <USBD_SetConfig+0x148>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff f948 	bl	8005b2c <USBD_SetClassConfig>
 800689c:	4603      	mov	r3, r0
 800689e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d004      	beq.n	80068b0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80068a6:	6839      	ldr	r1, [r7, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f949 	bl	8006b40 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068ae:	e065      	b.n	800697c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fa10 	bl	8006cd6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2203      	movs	r2, #3
 80068ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80068be:	e05d      	b.n	800697c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fa08 	bl	8006cd6 <USBD_CtlSendStatus>
      break;
 80068c6:	e059      	b.n	800697c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80068c8:	4b2f      	ldr	r3, [pc, #188]	; (8006988 <USBD_SetConfig+0x148>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d112      	bne.n	80068f6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2202      	movs	r2, #2
 80068d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80068d8:	4b2b      	ldr	r3, [pc, #172]	; (8006988 <USBD_SetConfig+0x148>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80068e2:	4b29      	ldr	r3, [pc, #164]	; (8006988 <USBD_SetConfig+0x148>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff f93b 	bl	8005b64 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f9f1 	bl	8006cd6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068f4:	e042      	b.n	800697c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80068f6:	4b24      	ldr	r3, [pc, #144]	; (8006988 <USBD_SetConfig+0x148>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	429a      	cmp	r2, r3
 8006902:	d02a      	beq.n	800695a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff f929 	bl	8005b64 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006912:	4b1d      	ldr	r3, [pc, #116]	; (8006988 <USBD_SetConfig+0x148>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800691c:	4b1a      	ldr	r3, [pc, #104]	; (8006988 <USBD_SetConfig+0x148>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7ff f902 	bl	8005b2c <USBD_SetClassConfig>
 8006928:	4603      	mov	r3, r0
 800692a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00f      	beq.n	8006952 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f903 	bl	8006b40 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	b2db      	uxtb	r3, r3
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff f90e 	bl	8005b64 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006950:	e014      	b.n	800697c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f9bf 	bl	8006cd6 <USBD_CtlSendStatus>
      break;
 8006958:	e010      	b.n	800697c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f9bb 	bl	8006cd6 <USBD_CtlSendStatus>
      break;
 8006960:	e00c      	b.n	800697c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f8eb 	bl	8006b40 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800696a:	4b07      	ldr	r3, [pc, #28]	; (8006988 <USBD_SetConfig+0x148>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff f8f7 	bl	8005b64 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006976:	2303      	movs	r3, #3
 8006978:	73fb      	strb	r3, [r7, #15]
      break;
 800697a:	bf00      	nop
  }

  return ret;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	2000019c 	.word	0x2000019c

0800698c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	88db      	ldrh	r3, [r3, #6]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d004      	beq.n	80069a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f8cd 	bl	8006b40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80069a6:	e023      	b.n	80069f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	dc02      	bgt.n	80069ba <USBD_GetConfig+0x2e>
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	dc03      	bgt.n	80069c0 <USBD_GetConfig+0x34>
 80069b8:	e015      	b.n	80069e6 <USBD_GetConfig+0x5a>
 80069ba:	2b03      	cmp	r3, #3
 80069bc:	d00b      	beq.n	80069d6 <USBD_GetConfig+0x4a>
 80069be:	e012      	b.n	80069e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3308      	adds	r3, #8
 80069ca:	2201      	movs	r2, #1
 80069cc:	4619      	mov	r1, r3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f927 	bl	8006c22 <USBD_CtlSendData>
        break;
 80069d4:	e00c      	b.n	80069f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	3304      	adds	r3, #4
 80069da:	2201      	movs	r2, #1
 80069dc:	4619      	mov	r1, r3
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f91f 	bl	8006c22 <USBD_CtlSendData>
        break;
 80069e4:	e004      	b.n	80069f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f8a9 	bl	8006b40 <USBD_CtlError>
        break;
 80069ee:	bf00      	nop
}
 80069f0:	bf00      	nop
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d81e      	bhi.n	8006a4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	88db      	ldrh	r3, [r3, #6]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d004      	beq.n	8006a22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f890 	bl	8006b40 <USBD_CtlError>
        break;
 8006a20:	e01a      	b.n	8006a58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d005      	beq.n	8006a3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f043 0202 	orr.w	r2, r3, #2
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	330c      	adds	r3, #12
 8006a42:	2202      	movs	r2, #2
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f8eb 	bl	8006c22 <USBD_CtlSendData>
      break;
 8006a4c:	e004      	b.n	8006a58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f875 	bl	8006b40 <USBD_CtlError>
      break;
 8006a56:	bf00      	nop
  }
}
 8006a58:	bf00      	nop
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	885b      	ldrh	r3, [r3, #2]
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d106      	bne.n	8006a80 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f92b 	bl	8006cd6 <USBD_CtlSendStatus>
  }
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d80b      	bhi.n	8006ab8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	885b      	ldrh	r3, [r3, #2]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d10c      	bne.n	8006ac2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f910 	bl	8006cd6 <USBD_CtlSendStatus>
      }
      break;
 8006ab6:	e004      	b.n	8006ac2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f840 	bl	8006b40 <USBD_CtlError>
      break;
 8006ac0:	e000      	b.n	8006ac4 <USBD_ClrFeature+0x3c>
      break;
 8006ac2:	bf00      	nop
  }
}
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	781a      	ldrb	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	781a      	ldrb	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3301      	adds	r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f7ff fabb 	bl	8006072 <SWAPBYTE>
 8006afc:	4603      	mov	r3, r0
 8006afe:	461a      	mov	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3301      	adds	r3, #1
 8006b08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f7ff faae 	bl	8006072 <SWAPBYTE>
 8006b16:	4603      	mov	r3, r0
 8006b18:	461a      	mov	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3301      	adds	r3, #1
 8006b22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	3301      	adds	r3, #1
 8006b28:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f7ff faa1 	bl	8006072 <SWAPBYTE>
 8006b30:	4603      	mov	r3, r0
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	80da      	strh	r2, [r3, #6]
}
 8006b38:	bf00      	nop
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b4a:	2180      	movs	r1, #128	; 0x80
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fcbb 	bl	80074c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006b52:	2100      	movs	r1, #0
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fcb7 	bl	80074c8 <USBD_LL_StallEP>
}
 8006b5a:	bf00      	nop
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d036      	beq.n	8006be6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006b7c:	6938      	ldr	r0, [r7, #16]
 8006b7e:	f000 f836 	bl	8006bee <USBD_GetLen>
 8006b82:	4603      	mov	r3, r0
 8006b84:	3301      	adds	r3, #1
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	b29a      	uxth	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	4413      	add	r3, r2
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	7812      	ldrb	r2, [r2, #0]
 8006b9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	2203      	movs	r2, #3
 8006baa:	701a      	strb	r2, [r3, #0]
  idx++;
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006bb2:	e013      	b.n	8006bdc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	4413      	add	r3, r2
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	7812      	ldrb	r2, [r2, #0]
 8006bbe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	613b      	str	r3, [r7, #16]
    idx++;
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	701a      	strb	r2, [r3, #0]
    idx++;
 8006bd6:	7dfb      	ldrb	r3, [r7, #23]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e7      	bne.n	8006bb4 <USBD_GetString+0x52>
 8006be4:	e000      	b.n	8006be8 <USBD_GetString+0x86>
    return;
 8006be6:	bf00      	nop
  }
}
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006bfe:	e005      	b.n	8006c0c <USBD_GetLen+0x1e>
  {
    len++;
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	3301      	adds	r3, #1
 8006c04:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1f5      	bne.n	8006c00 <USBD_GetLen+0x12>
  }

  return len;
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2202      	movs	r2, #2
 8006c32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	2100      	movs	r1, #0
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 fcc6 	bl	80075da <USBD_LL_Transmit>

  return USBD_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	2100      	movs	r1, #0
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 fcb5 	bl	80075da <USBD_LL_Transmit>

  return USBD_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	60f8      	str	r0, [r7, #12]
 8006c82:	60b9      	str	r1, [r7, #8]
 8006c84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2203      	movs	r2, #3
 8006c8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 fcb9 	bl	800761c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 fca8 	bl	800761c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b082      	sub	sp, #8
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2204      	movs	r2, #4
 8006ce2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2100      	movs	r1, #0
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fc74 	bl	80075da <USBD_LL_Transmit>

  return USBD_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2205      	movs	r2, #5
 8006d08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2200      	movs	r2, #0
 8006d10:	2100      	movs	r1, #0
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fc82 	bl	800761c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	4912      	ldr	r1, [pc, #72]	; (8006d74 <MX_USB_DEVICE_Init+0x50>)
 8006d2c:	4812      	ldr	r0, [pc, #72]	; (8006d78 <MX_USB_DEVICE_Init+0x54>)
 8006d2e:	f7fe fe8f 	bl	8005a50 <USBD_Init>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d38:	f7fa f96a 	bl	8001010 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d3c:	490f      	ldr	r1, [pc, #60]	; (8006d7c <MX_USB_DEVICE_Init+0x58>)
 8006d3e:	480e      	ldr	r0, [pc, #56]	; (8006d78 <MX_USB_DEVICE_Init+0x54>)
 8006d40:	f7fe feb6 	bl	8005ab0 <USBD_RegisterClass>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d4a:	f7fa f961 	bl	8001010 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d4e:	490c      	ldr	r1, [pc, #48]	; (8006d80 <MX_USB_DEVICE_Init+0x5c>)
 8006d50:	4809      	ldr	r0, [pc, #36]	; (8006d78 <MX_USB_DEVICE_Init+0x54>)
 8006d52:	f7fe fe07 	bl	8005964 <USBD_CDC_RegisterInterface>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d001      	beq.n	8006d60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d5c:	f7fa f958 	bl	8001010 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d60:	4805      	ldr	r0, [pc, #20]	; (8006d78 <MX_USB_DEVICE_Init+0x54>)
 8006d62:	f7fe fecc 	bl	8005afe <USBD_Start>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d6c:	f7fa f950 	bl	8001010 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d70:	bf00      	nop
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000130 	.word	0x20000130
 8006d78:	2000040c 	.word	0x2000040c
 8006d7c:	20000018 	.word	0x20000018
 8006d80:	2000011c 	.word	0x2000011c

08006d84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4905      	ldr	r1, [pc, #20]	; (8006da0 <CDC_Init_FS+0x1c>)
 8006d8c:	4805      	ldr	r0, [pc, #20]	; (8006da4 <CDC_Init_FS+0x20>)
 8006d8e:	f7fe fdfe 	bl	800598e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006d92:	4905      	ldr	r1, [pc, #20]	; (8006da8 <CDC_Init_FS+0x24>)
 8006d94:	4803      	ldr	r0, [pc, #12]	; (8006da4 <CDC_Init_FS+0x20>)
 8006d96:	f7fe fe18 	bl	80059ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006d9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	bd80      	pop	{r7, pc}
 8006da0:	20000edc 	.word	0x20000edc
 8006da4:	2000040c 	.word	0x2000040c
 8006da8:	200006dc 	.word	0x200006dc

08006dac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006db0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	6039      	str	r1, [r7, #0]
 8006dc6:	71fb      	strb	r3, [r7, #7]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006dcc:	79fb      	ldrb	r3, [r7, #7]
 8006dce:	2b23      	cmp	r3, #35	; 0x23
 8006dd0:	d84a      	bhi.n	8006e68 <CDC_Control_FS+0xac>
 8006dd2:	a201      	add	r2, pc, #4	; (adr r2, 8006dd8 <CDC_Control_FS+0x1c>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006e69 	.word	0x08006e69
 8006ddc:	08006e69 	.word	0x08006e69
 8006de0:	08006e69 	.word	0x08006e69
 8006de4:	08006e69 	.word	0x08006e69
 8006de8:	08006e69 	.word	0x08006e69
 8006dec:	08006e69 	.word	0x08006e69
 8006df0:	08006e69 	.word	0x08006e69
 8006df4:	08006e69 	.word	0x08006e69
 8006df8:	08006e69 	.word	0x08006e69
 8006dfc:	08006e69 	.word	0x08006e69
 8006e00:	08006e69 	.word	0x08006e69
 8006e04:	08006e69 	.word	0x08006e69
 8006e08:	08006e69 	.word	0x08006e69
 8006e0c:	08006e69 	.word	0x08006e69
 8006e10:	08006e69 	.word	0x08006e69
 8006e14:	08006e69 	.word	0x08006e69
 8006e18:	08006e69 	.word	0x08006e69
 8006e1c:	08006e69 	.word	0x08006e69
 8006e20:	08006e69 	.word	0x08006e69
 8006e24:	08006e69 	.word	0x08006e69
 8006e28:	08006e69 	.word	0x08006e69
 8006e2c:	08006e69 	.word	0x08006e69
 8006e30:	08006e69 	.word	0x08006e69
 8006e34:	08006e69 	.word	0x08006e69
 8006e38:	08006e69 	.word	0x08006e69
 8006e3c:	08006e69 	.word	0x08006e69
 8006e40:	08006e69 	.word	0x08006e69
 8006e44:	08006e69 	.word	0x08006e69
 8006e48:	08006e69 	.word	0x08006e69
 8006e4c:	08006e69 	.word	0x08006e69
 8006e50:	08006e69 	.word	0x08006e69
 8006e54:	08006e69 	.word	0x08006e69
 8006e58:	08006e69 	.word	0x08006e69
 8006e5c:	08006e69 	.word	0x08006e69
 8006e60:	08006e69 	.word	0x08006e69
 8006e64:	08006e69 	.word	0x08006e69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006e68:	bf00      	nop
  }

  return (USBD_OK);
 8006e6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	4805      	ldr	r0, [pc, #20]	; (8006e9c <CDC_Receive_FS+0x24>)
 8006e86:	f7fe fda0 	bl	80059ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006e8a:	4804      	ldr	r0, [pc, #16]	; (8006e9c <CDC_Receive_FS+0x24>)
 8006e8c:	f7fe fdb6 	bl	80059fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006e90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	2000040c 	.word	0x2000040c

08006ea0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
	...

08006ec4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	6039      	str	r1, [r7, #0]
 8006ece:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2212      	movs	r2, #18
 8006ed4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ed6:	4b03      	ldr	r3, [pc, #12]	; (8006ee4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	2000014c 	.word	0x2000014c

08006ee8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	4603      	mov	r3, r0
 8006ef0:	6039      	str	r1, [r7, #0]
 8006ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2204      	movs	r2, #4
 8006ef8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006efa:	4b03      	ldr	r3, [pc, #12]	; (8006f08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	20000160 	.word	0x20000160

08006f0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4603      	mov	r3, r0
 8006f14:	6039      	str	r1, [r7, #0]
 8006f16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d105      	bne.n	8006f2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	4907      	ldr	r1, [pc, #28]	; (8006f40 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f22:	4808      	ldr	r0, [pc, #32]	; (8006f44 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f24:	f7ff fe1d 	bl	8006b62 <USBD_GetString>
 8006f28:	e004      	b.n	8006f34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	4904      	ldr	r1, [pc, #16]	; (8006f40 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f2e:	4805      	ldr	r0, [pc, #20]	; (8006f44 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f30:	f7ff fe17 	bl	8006b62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f34:	4b02      	ldr	r3, [pc, #8]	; (8006f40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	200016dc 	.word	0x200016dc
 8006f44:	0800777c 	.word	0x0800777c

08006f48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	6039      	str	r1, [r7, #0]
 8006f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	4904      	ldr	r1, [pc, #16]	; (8006f68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006f58:	4804      	ldr	r0, [pc, #16]	; (8006f6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006f5a:	f7ff fe02 	bl	8006b62 <USBD_GetString>
  return USBD_StrDesc;
 8006f5e:	4b02      	ldr	r3, [pc, #8]	; (8006f68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	200016dc 	.word	0x200016dc
 8006f6c:	08007794 	.word	0x08007794

08006f70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	4603      	mov	r3, r0
 8006f78:	6039      	str	r1, [r7, #0]
 8006f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	221a      	movs	r2, #26
 8006f80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f82:	f000 f843 	bl	800700c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f86:	4b02      	ldr	r3, [pc, #8]	; (8006f90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20000164 	.word	0x20000164

08006f94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	6039      	str	r1, [r7, #0]
 8006f9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d105      	bne.n	8006fb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	4907      	ldr	r1, [pc, #28]	; (8006fc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006faa:	4808      	ldr	r0, [pc, #32]	; (8006fcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fac:	f7ff fdd9 	bl	8006b62 <USBD_GetString>
 8006fb0:	e004      	b.n	8006fbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	4904      	ldr	r1, [pc, #16]	; (8006fc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006fb6:	4805      	ldr	r0, [pc, #20]	; (8006fcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8006fb8:	f7ff fdd3 	bl	8006b62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fbc:	4b02      	ldr	r3, [pc, #8]	; (8006fc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	200016dc 	.word	0x200016dc
 8006fcc:	080077a8 	.word	0x080077a8

08006fd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	6039      	str	r1, [r7, #0]
 8006fda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d105      	bne.n	8006fee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	4907      	ldr	r1, [pc, #28]	; (8007004 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006fe6:	4808      	ldr	r0, [pc, #32]	; (8007008 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006fe8:	f7ff fdbb 	bl	8006b62 <USBD_GetString>
 8006fec:	e004      	b.n	8006ff8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	4904      	ldr	r1, [pc, #16]	; (8007004 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ff2:	4805      	ldr	r0, [pc, #20]	; (8007008 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ff4:	f7ff fdb5 	bl	8006b62 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ff8:	4b02      	ldr	r3, [pc, #8]	; (8007004 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	200016dc 	.word	0x200016dc
 8007008:	080077b4 	.word	0x080077b4

0800700c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007012:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <Get_SerialNum+0x44>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007018:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <Get_SerialNum+0x48>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800701e:	4b0e      	ldr	r3, [pc, #56]	; (8007058 <Get_SerialNum+0x4c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4413      	add	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d009      	beq.n	8007046 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007032:	2208      	movs	r2, #8
 8007034:	4909      	ldr	r1, [pc, #36]	; (800705c <Get_SerialNum+0x50>)
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f000 f814 	bl	8007064 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800703c:	2204      	movs	r2, #4
 800703e:	4908      	ldr	r1, [pc, #32]	; (8007060 <Get_SerialNum+0x54>)
 8007040:	68b8      	ldr	r0, [r7, #8]
 8007042:	f000 f80f 	bl	8007064 <IntToUnicode>
  }
}
 8007046:	bf00      	nop
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	1fff7a10 	.word	0x1fff7a10
 8007054:	1fff7a14 	.word	0x1fff7a14
 8007058:	1fff7a18 	.word	0x1fff7a18
 800705c:	20000166 	.word	0x20000166
 8007060:	20000176 	.word	0x20000176

08007064 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007072:	2300      	movs	r3, #0
 8007074:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007076:	2300      	movs	r3, #0
 8007078:	75fb      	strb	r3, [r7, #23]
 800707a:	e027      	b.n	80070cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	0f1b      	lsrs	r3, r3, #28
 8007080:	2b09      	cmp	r3, #9
 8007082:	d80b      	bhi.n	800709c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	0f1b      	lsrs	r3, r3, #28
 8007088:	b2da      	uxtb	r2, r3
 800708a:	7dfb      	ldrb	r3, [r7, #23]
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	4619      	mov	r1, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	440b      	add	r3, r1
 8007094:	3230      	adds	r2, #48	; 0x30
 8007096:	b2d2      	uxtb	r2, r2
 8007098:	701a      	strb	r2, [r3, #0]
 800709a:	e00a      	b.n	80070b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	0f1b      	lsrs	r3, r3, #28
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	7dfb      	ldrb	r3, [r7, #23]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	4619      	mov	r1, r3
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	440b      	add	r3, r1
 80070ac:	3237      	adds	r2, #55	; 0x37
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	3301      	adds	r3, #1
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	4413      	add	r3, r2
 80070c2:	2200      	movs	r2, #0
 80070c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80070c6:	7dfb      	ldrb	r3, [r7, #23]
 80070c8:	3301      	adds	r3, #1
 80070ca:	75fb      	strb	r3, [r7, #23]
 80070cc:	7dfa      	ldrb	r2, [r7, #23]
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d3d3      	bcc.n	800707c <IntToUnicode+0x18>
  }
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	371c      	adds	r7, #28
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
	...

080070e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08a      	sub	sp, #40	; 0x28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070ec:	f107 0314 	add.w	r3, r7, #20
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	605a      	str	r2, [r3, #4]
 80070f6:	609a      	str	r2, [r3, #8]
 80070f8:	60da      	str	r2, [r3, #12]
 80070fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007104:	d13a      	bne.n	800717c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007106:	2300      	movs	r3, #0
 8007108:	613b      	str	r3, [r7, #16]
 800710a:	4b1e      	ldr	r3, [pc, #120]	; (8007184 <HAL_PCD_MspInit+0xa0>)
 800710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710e:	4a1d      	ldr	r2, [pc, #116]	; (8007184 <HAL_PCD_MspInit+0xa0>)
 8007110:	f043 0301 	orr.w	r3, r3, #1
 8007114:	6313      	str	r3, [r2, #48]	; 0x30
 8007116:	4b1b      	ldr	r3, [pc, #108]	; (8007184 <HAL_PCD_MspInit+0xa0>)
 8007118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	613b      	str	r3, [r7, #16]
 8007120:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007122:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007128:	2302      	movs	r3, #2
 800712a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800712c:	2300      	movs	r3, #0
 800712e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007130:	2303      	movs	r3, #3
 8007132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007134:	230a      	movs	r3, #10
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007138:	f107 0314 	add.w	r3, r7, #20
 800713c:	4619      	mov	r1, r3
 800713e:	4812      	ldr	r0, [pc, #72]	; (8007188 <HAL_PCD_MspInit+0xa4>)
 8007140:	f7fa fa04 	bl	800154c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007144:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <HAL_PCD_MspInit+0xa0>)
 8007146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007148:	4a0e      	ldr	r2, [pc, #56]	; (8007184 <HAL_PCD_MspInit+0xa0>)
 800714a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800714e:	6353      	str	r3, [r2, #52]	; 0x34
 8007150:	2300      	movs	r3, #0
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	4b0b      	ldr	r3, [pc, #44]	; (8007184 <HAL_PCD_MspInit+0xa0>)
 8007156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007158:	4a0a      	ldr	r2, [pc, #40]	; (8007184 <HAL_PCD_MspInit+0xa0>)
 800715a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800715e:	6453      	str	r3, [r2, #68]	; 0x44
 8007160:	4b08      	ldr	r3, [pc, #32]	; (8007184 <HAL_PCD_MspInit+0xa0>)
 8007162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800716c:	2200      	movs	r2, #0
 800716e:	2100      	movs	r1, #0
 8007170:	2043      	movs	r0, #67	; 0x43
 8007172:	f7fa f9b4 	bl	80014de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007176:	2043      	movs	r0, #67	; 0x43
 8007178:	f7fa f9cd 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800717c:	bf00      	nop
 800717e:	3728      	adds	r7, #40	; 0x28
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	40023800 	.word	0x40023800
 8007188:	40020000 	.word	0x40020000

0800718c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f7fe fcf6 	bl	8005b94 <USBD_LL_SetupStage>
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80071c2:	78fa      	ldrb	r2, [r7, #3]
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	4613      	mov	r3, r2
 80071c8:	00db      	lsls	r3, r3, #3
 80071ca:	1a9b      	subs	r3, r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	440b      	add	r3, r1
 80071d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	78fb      	ldrb	r3, [r7, #3]
 80071d8:	4619      	mov	r1, r3
 80071da:	f7fe fd30 	bl	8005c3e <USBD_LL_DataOutStage>
}
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80071f8:	78fa      	ldrb	r2, [r7, #3]
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	1a9b      	subs	r3, r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	3348      	adds	r3, #72	; 0x48
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	78fb      	ldrb	r3, [r7, #3]
 800720c:	4619      	mov	r1, r3
 800720e:	f7fe fd79 	bl	8005d04 <USBD_LL_DataInStage>
}
 8007212:	bf00      	nop
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b082      	sub	sp, #8
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe fe8d 	bl	8005f48 <USBD_LL_SOF>
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b084      	sub	sp, #16
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800723e:	2301      	movs	r3, #1
 8007240:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d102      	bne.n	8007250 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]
 800724e:	e008      	b.n	8007262 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	2b02      	cmp	r3, #2
 8007256:	d102      	bne.n	800725e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007258:	2301      	movs	r3, #1
 800725a:	73fb      	strb	r3, [r7, #15]
 800725c:	e001      	b.n	8007262 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800725e:	f7f9 fed7 	bl	8001010 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007268:	7bfa      	ldrb	r2, [r7, #15]
 800726a:	4611      	mov	r1, r2
 800726c:	4618      	mov	r0, r3
 800726e:	f7fe fe2d 	bl	8005ecc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007278:	4618      	mov	r0, r3
 800727a:	f7fe fdd9 	bl	8005e30 <USBD_LL_Reset>
}
 800727e:	bf00      	nop
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007296:	4618      	mov	r0, r3
 8007298:	f7fe fe28 	bl	8005eec <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	6812      	ldr	r2, [r2, #0]
 80072aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072ae:	f043 0301 	orr.w	r3, r3, #1
 80072b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072bc:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <HAL_PCD_SuspendCallback+0x48>)
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	4a03      	ldr	r2, [pc, #12]	; (80072d0 <HAL_PCD_SuspendCallback+0x48>)
 80072c2:	f043 0306 	orr.w	r3, r3, #6
 80072c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80072c8:	bf00      	nop
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	e000ed00 	.word	0xe000ed00

080072d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fe fe18 	bl	8005f18 <USBD_LL_Resume>
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007302:	78fa      	ldrb	r2, [r7, #3]
 8007304:	4611      	mov	r1, r2
 8007306:	4618      	mov	r0, r3
 8007308:	f7fe fe66 	bl	8005fd8 <USBD_LL_IsoOUTIncomplete>
}
 800730c:	bf00      	nop
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	460b      	mov	r3, r1
 800731e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007326:	78fa      	ldrb	r2, [r7, #3]
 8007328:	4611      	mov	r1, r2
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe fe2e 	bl	8005f8c <USBD_LL_IsoINIncomplete>
}
 8007330:	bf00      	nop
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007346:	4618      	mov	r0, r3
 8007348:	f7fe fe6c 	bl	8006024 <USBD_LL_DevConnected>
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007362:	4618      	mov	r0, r3
 8007364:	f7fe fe69 	bl	800603a <USBD_LL_DevDisconnected>
}
 8007368:	bf00      	nop
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d13c      	bne.n	80073fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007380:	4a20      	ldr	r2, [pc, #128]	; (8007404 <USBD_LL_Init+0x94>)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a1e      	ldr	r2, [pc, #120]	; (8007404 <USBD_LL_Init+0x94>)
 800738c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007390:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <USBD_LL_Init+0x94>)
 8007392:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007396:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007398:	4b1a      	ldr	r3, [pc, #104]	; (8007404 <USBD_LL_Init+0x94>)
 800739a:	2204      	movs	r2, #4
 800739c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800739e:	4b19      	ldr	r3, [pc, #100]	; (8007404 <USBD_LL_Init+0x94>)
 80073a0:	2202      	movs	r2, #2
 80073a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80073a4:	4b17      	ldr	r3, [pc, #92]	; (8007404 <USBD_LL_Init+0x94>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80073aa:	4b16      	ldr	r3, [pc, #88]	; (8007404 <USBD_LL_Init+0x94>)
 80073ac:	2202      	movs	r2, #2
 80073ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80073b0:	4b14      	ldr	r3, [pc, #80]	; (8007404 <USBD_LL_Init+0x94>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80073b6:	4b13      	ldr	r3, [pc, #76]	; (8007404 <USBD_LL_Init+0x94>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80073bc:	4b11      	ldr	r3, [pc, #68]	; (8007404 <USBD_LL_Init+0x94>)
 80073be:	2200      	movs	r2, #0
 80073c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80073c2:	4b10      	ldr	r3, [pc, #64]	; (8007404 <USBD_LL_Init+0x94>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80073c8:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <USBD_LL_Init+0x94>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80073ce:	480d      	ldr	r0, [pc, #52]	; (8007404 <USBD_LL_Init+0x94>)
 80073d0:	f7fa fa8b 	bl	80018ea <HAL_PCD_Init>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80073da:	f7f9 fe19 	bl	8001010 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80073de:	2180      	movs	r1, #128	; 0x80
 80073e0:	4808      	ldr	r0, [pc, #32]	; (8007404 <USBD_LL_Init+0x94>)
 80073e2:	f7fb fbe8 	bl	8002bb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80073e6:	2240      	movs	r2, #64	; 0x40
 80073e8:	2100      	movs	r1, #0
 80073ea:	4806      	ldr	r0, [pc, #24]	; (8007404 <USBD_LL_Init+0x94>)
 80073ec:	f7fb fb9c 	bl	8002b28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80073f0:	2280      	movs	r2, #128	; 0x80
 80073f2:	2101      	movs	r1, #1
 80073f4:	4803      	ldr	r0, [pc, #12]	; (8007404 <USBD_LL_Init+0x94>)
 80073f6:	f7fb fb97 	bl	8002b28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	200018dc 	.word	0x200018dc

08007408 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800741e:	4618      	mov	r0, r3
 8007420:	f7fa fb80 	bl	8001b24 <HAL_PCD_Start>
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	4618      	mov	r0, r3
 800742c:	f000 f942 	bl	80076b4 <USBD_Get_USB_Status>
 8007430:	4603      	mov	r3, r0
 8007432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007434:	7bbb      	ldrb	r3, [r7, #14]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	4608      	mov	r0, r1
 8007448:	4611      	mov	r1, r2
 800744a:	461a      	mov	r2, r3
 800744c:	4603      	mov	r3, r0
 800744e:	70fb      	strb	r3, [r7, #3]
 8007450:	460b      	mov	r3, r1
 8007452:	70bb      	strb	r3, [r7, #2]
 8007454:	4613      	mov	r3, r2
 8007456:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007466:	78bb      	ldrb	r3, [r7, #2]
 8007468:	883a      	ldrh	r2, [r7, #0]
 800746a:	78f9      	ldrb	r1, [r7, #3]
 800746c:	f7fa ff64 	bl	8002338 <HAL_PCD_EP_Open>
 8007470:	4603      	mov	r3, r0
 8007472:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	4618      	mov	r0, r3
 8007478:	f000 f91c 	bl	80076b4 <USBD_Get_USB_Status>
 800747c:	4603      	mov	r3, r0
 800747e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007480:	7bbb      	ldrb	r3, [r7, #14]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b084      	sub	sp, #16
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800749a:	2300      	movs	r3, #0
 800749c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074a4:	78fa      	ldrb	r2, [r7, #3]
 80074a6:	4611      	mov	r1, r2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fa ffad 	bl	8002408 <HAL_PCD_EP_Close>
 80074ae:	4603      	mov	r3, r0
 80074b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 f8fd 	bl	80076b4 <USBD_Get_USB_Status>
 80074ba:	4603      	mov	r3, r0
 80074bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074be:	7bbb      	ldrb	r3, [r7, #14]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074d4:	2300      	movs	r3, #0
 80074d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80074e2:	78fa      	ldrb	r2, [r7, #3]
 80074e4:	4611      	mov	r1, r2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fb f885 	bl	80025f6 <HAL_PCD_EP_SetStall>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 f8de 	bl	80076b4 <USBD_Get_USB_Status>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007520:	78fa      	ldrb	r2, [r7, #3]
 8007522:	4611      	mov	r1, r2
 8007524:	4618      	mov	r0, r3
 8007526:	f7fb f8ca 	bl	80026be <HAL_PCD_EP_ClrStall>
 800752a:	4603      	mov	r3, r0
 800752c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800752e:	7bfb      	ldrb	r3, [r7, #15]
 8007530:	4618      	mov	r0, r3
 8007532:	f000 f8bf 	bl	80076b4 <USBD_Get_USB_Status>
 8007536:	4603      	mov	r3, r0
 8007538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800753a:	7bbb      	ldrb	r3, [r7, #14]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007556:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007558:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800755c:	2b00      	cmp	r3, #0
 800755e:	da0b      	bge.n	8007578 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007566:	68f9      	ldr	r1, [r7, #12]
 8007568:	4613      	mov	r3, r2
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	1a9b      	subs	r3, r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	440b      	add	r3, r1
 8007572:	333e      	adds	r3, #62	; 0x3e
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	e00b      	b.n	8007590 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007578:	78fb      	ldrb	r3, [r7, #3]
 800757a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800757e:	68f9      	ldr	r1, [r7, #12]
 8007580:	4613      	mov	r3, r2
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	1a9b      	subs	r3, r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	440b      	add	r3, r1
 800758a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800758e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075b6:	78fa      	ldrb	r2, [r7, #3]
 80075b8:	4611      	mov	r1, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fa fe97 	bl	80022ee <HAL_PCD_SetAddress>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 f874 	bl	80076b4 <USBD_Get_USB_Status>
 80075cc:	4603      	mov	r3, r0
 80075ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b086      	sub	sp, #24
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	603b      	str	r3, [r7, #0]
 80075e6:	460b      	mov	r3, r1
 80075e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80075f8:	7af9      	ldrb	r1, [r7, #11]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	f7fa ffb0 	bl	8002562 <HAL_PCD_EP_Transmit>
 8007602:	4603      	mov	r3, r0
 8007604:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007606:	7dfb      	ldrb	r3, [r7, #23]
 8007608:	4618      	mov	r0, r3
 800760a:	f000 f853 	bl	80076b4 <USBD_Get_USB_Status>
 800760e:	4603      	mov	r3, r0
 8007610:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007612:	7dbb      	ldrb	r3, [r7, #22]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	607a      	str	r2, [r7, #4]
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	460b      	mov	r3, r1
 800762a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800763a:	7af9      	ldrb	r1, [r7, #11]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	f7fa ff2c 	bl	800249c <HAL_PCD_EP_Receive>
 8007644:	4603      	mov	r3, r0
 8007646:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007648:	7dfb      	ldrb	r3, [r7, #23]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 f832 	bl	80076b4 <USBD_Get_USB_Status>
 8007650:	4603      	mov	r3, r0
 8007652:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007654:	7dbb      	ldrb	r3, [r7, #22]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007670:	78fa      	ldrb	r2, [r7, #3]
 8007672:	4611      	mov	r1, r2
 8007674:	4618      	mov	r0, r3
 8007676:	f7fa ff5c 	bl	8002532 <HAL_PCD_EP_GetRxCount>
 800767a:	4603      	mov	r3, r0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800768c:	4b03      	ldr	r3, [pc, #12]	; (800769c <USBD_static_malloc+0x18>)
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	200001a0 	.word	0x200001a0

080076a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]

}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80076c2:	79fb      	ldrb	r3, [r7, #7]
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d817      	bhi.n	80076f8 <USBD_Get_USB_Status+0x44>
 80076c8:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <USBD_Get_USB_Status+0x1c>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	080076e1 	.word	0x080076e1
 80076d4:	080076e7 	.word	0x080076e7
 80076d8:	080076ed 	.word	0x080076ed
 80076dc:	080076f3 	.word	0x080076f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	73fb      	strb	r3, [r7, #15]
    break;
 80076e4:	e00b      	b.n	80076fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80076e6:	2303      	movs	r3, #3
 80076e8:	73fb      	strb	r3, [r7, #15]
    break;
 80076ea:	e008      	b.n	80076fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80076ec:	2301      	movs	r3, #1
 80076ee:	73fb      	strb	r3, [r7, #15]
    break;
 80076f0:	e005      	b.n	80076fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80076f2:	2303      	movs	r3, #3
 80076f4:	73fb      	strb	r3, [r7, #15]
    break;
 80076f6:	e002      	b.n	80076fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80076f8:	2303      	movs	r3, #3
 80076fa:	73fb      	strb	r3, [r7, #15]
    break;
 80076fc:	bf00      	nop
  }
  return usb_status;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <__libc_init_array>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	4d0d      	ldr	r5, [pc, #52]	; (8007744 <__libc_init_array+0x38>)
 8007710:	4c0d      	ldr	r4, [pc, #52]	; (8007748 <__libc_init_array+0x3c>)
 8007712:	1b64      	subs	r4, r4, r5
 8007714:	10a4      	asrs	r4, r4, #2
 8007716:	2600      	movs	r6, #0
 8007718:	42a6      	cmp	r6, r4
 800771a:	d109      	bne.n	8007730 <__libc_init_array+0x24>
 800771c:	4d0b      	ldr	r5, [pc, #44]	; (800774c <__libc_init_array+0x40>)
 800771e:	4c0c      	ldr	r4, [pc, #48]	; (8007750 <__libc_init_array+0x44>)
 8007720:	f000 f820 	bl	8007764 <_init>
 8007724:	1b64      	subs	r4, r4, r5
 8007726:	10a4      	asrs	r4, r4, #2
 8007728:	2600      	movs	r6, #0
 800772a:	42a6      	cmp	r6, r4
 800772c:	d105      	bne.n	800773a <__libc_init_array+0x2e>
 800772e:	bd70      	pop	{r4, r5, r6, pc}
 8007730:	f855 3b04 	ldr.w	r3, [r5], #4
 8007734:	4798      	blx	r3
 8007736:	3601      	adds	r6, #1
 8007738:	e7ee      	b.n	8007718 <__libc_init_array+0xc>
 800773a:	f855 3b04 	ldr.w	r3, [r5], #4
 800773e:	4798      	blx	r3
 8007740:	3601      	adds	r6, #1
 8007742:	e7f2      	b.n	800772a <__libc_init_array+0x1e>
 8007744:	080077dc 	.word	0x080077dc
 8007748:	080077dc 	.word	0x080077dc
 800774c:	080077dc 	.word	0x080077dc
 8007750:	080077e0 	.word	0x080077e0

08007754 <memset>:
 8007754:	4402      	add	r2, r0
 8007756:	4603      	mov	r3, r0
 8007758:	4293      	cmp	r3, r2
 800775a:	d100      	bne.n	800775e <memset+0xa>
 800775c:	4770      	bx	lr
 800775e:	f803 1b01 	strb.w	r1, [r3], #1
 8007762:	e7f9      	b.n	8007758 <memset+0x4>

08007764 <_init>:
 8007764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007766:	bf00      	nop
 8007768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776a:	bc08      	pop	{r3}
 800776c:	469e      	mov	lr, r3
 800776e:	4770      	bx	lr

08007770 <_fini>:
 8007770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007772:	bf00      	nop
 8007774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007776:	bc08      	pop	{r3}
 8007778:	469e      	mov	lr, r3
 800777a:	4770      	bx	lr
