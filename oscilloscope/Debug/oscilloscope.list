
oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000807c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008204  08008204  00018204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008264  08008264  00020180  2**0
                  CONTENTS
  4 .ARM          00000008  08008264  08008264  00018264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800826c  0800826c  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800826c  0800826c  0001826c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008270  08008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08008274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023dc  20000180  080083f4  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000255c  080083f4  0002255c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198aa  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037dc  00000000  00000000  00039a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  0003d238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  0003e430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025291  00000000  00000000  0003f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163a3  00000000  00000000  00064741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8b67  00000000  00000000  0007aae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015364b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae8  00000000  00000000  001536a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000180 	.word	0x20000180
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080081ec 	.word	0x080081ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000184 	.word	0x20000184
 80001c4:	080081ec 	.word	0x080081ec

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 faf2 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f82a 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f976 	bl	80007bc <MX_GPIO_Init>
  MX_DMA_Init();
 80004d0:	f000 f954 	bl	800077c <MX_DMA_Init>
  MX_ADC3_Init();
 80004d4:	f000 f88e 	bl	80005f4 <MX_ADC3_Init>
  MX_TIM2_Init();
 80004d8:	f000 f8de 	bl	8000698 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80004dc:	f007 f940 	bl	8007760 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /*start ADC sampling into buffer*/
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)aData0, 1000);
 80004e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004e4:	490a      	ldr	r1, [pc, #40]	; (8000510 <main+0x50>)
 80004e6:	480b      	ldr	r0, [pc, #44]	; (8000514 <main+0x54>)
 80004e8:	f000 fbba 	bl	8000c60 <HAL_ADC_Start_DMA>
  /*start TIM which triggers ADC conversions*/
  HAL_TIM_OC_Start(&htim2,TIM_CHANNEL_2);
 80004ec:	2104      	movs	r1, #4
 80004ee:	480a      	ldr	r0, [pc, #40]	; (8000518 <main+0x58>)
 80004f0:	f003 fc10 	bl	8003d14 <HAL_TIM_OC_Start>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(AdcConversionDone>0){
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <main+0x5c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0fb      	beq.n	80004f4 <main+0x34>
	  /*CDC strucuture, where we check if the USB is transmithink*/

	 {
	  /*send data over usb, we have 1000 16bit samples which is 2000bytes*/
	  CDC_Transmit_FS((uint8_t*)aData0,2000);
 80004fc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <main+0x50>)
 8000502:	f007 f9eb 	bl	80078dc <CDC_Transmit_FS>
	  /*indicate that after we receive new data we can send more*/
	  AdcConversionDone=0;
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <main+0x5c>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
	  if(AdcConversionDone>0){
 800050c:	e7f2      	b.n	80004f4 <main+0x34>
 800050e:	bf00      	nop
 8000510:	200004b0 	.word	0x200004b0
 8000514:	20000420 	.word	0x20000420
 8000518:	20000468 	.word	0x20000468
 800051c:	2000019c 	.word	0x2000019c

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f007 fe54 	bl	80081dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a27      	ldr	r2, [pc, #156]	; (80005ec <SystemClock_Config+0xcc>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b25      	ldr	r3, [pc, #148]	; (80005ec <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xd0>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000594:	2360      	movs	r3, #96	; 0x60
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800059c:	2304      	movs	r3, #4
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fec1 	bl	800332c <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f93c 	bl	800082c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2103      	movs	r1, #3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 f922 	bl	800381c <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005de:	f000 f925 	bl	800082c <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000606:	4b22      	ldr	r3, [pc, #136]	; (8000690 <MX_ADC3_Init+0x9c>)
 8000608:	4a22      	ldr	r2, [pc, #136]	; (8000694 <MX_ADC3_Init+0xa0>)
 800060a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_ADC3_Init+0x9c>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000612:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <MX_ADC3_Init+0x9c>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000618:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_ADC3_Init+0x9c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <MX_ADC3_Init+0x9c>)
 8000620:	2200      	movs	r2, #0
 8000622:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_ADC3_Init+0x9c>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_ADC3_Init+0x9c>)
 800062e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC2;
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_ADC3_Init+0x9c>)
 8000636:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800063a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_ADC3_Init+0x9c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_ADC3_Init+0x9c>)
 8000644:	2201      	movs	r2, #1
 8000646:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_ADC3_Init+0x9c>)
 800064a:	2201      	movs	r2, #1
 800064c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_ADC3_Init+0x9c>)
 8000652:	2201      	movs	r2, #1
 8000654:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000656:	480e      	ldr	r0, [pc, #56]	; (8000690 <MX_ADC3_Init+0x9c>)
 8000658:	f000 fabe 	bl	8000bd8 <HAL_ADC_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 8000662:	f000 f8e3 	bl	800082c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800066a:	2301      	movs	r3, #1
 800066c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800066e:	2306      	movs	r3, #6
 8000670:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000672:	463b      	mov	r3, r7
 8000674:	4619      	mov	r1, r3
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <MX_ADC3_Init+0x9c>)
 8000678:	f000 fc16 	bl	8000ea8 <HAL_ADC_ConfigChannel>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 8000682:	f000 f8d3 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000420 	.word	0x20000420
 8000694:	40012200 	.word	0x40012200

08000698 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08e      	sub	sp, #56	; 0x38
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
 80006c4:	615a      	str	r2, [r3, #20]
 80006c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006c8:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <MX_TIM2_Init+0xe0>)
 80006ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <MX_TIM2_Init+0xe0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d6:	4b28      	ldr	r3, [pc, #160]	; (8000778 <MX_TIM2_Init+0xe0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4800-1;
 80006dc:	4b26      	ldr	r3, [pc, #152]	; (8000778 <MX_TIM2_Init+0xe0>)
 80006de:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80006e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <MX_TIM2_Init+0xe0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ea:	4b23      	ldr	r3, [pc, #140]	; (8000778 <MX_TIM2_Init+0xe0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006f0:	4821      	ldr	r0, [pc, #132]	; (8000778 <MX_TIM2_Init+0xe0>)
 80006f2:	f003 fa67 	bl	8003bc4 <HAL_TIM_Base_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80006fc:	f000 f896 	bl	800082c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070a:	4619      	mov	r1, r3
 800070c:	481a      	ldr	r0, [pc, #104]	; (8000778 <MX_TIM2_Init+0xe0>)
 800070e:	f003 fc21 	bl	8003f54 <HAL_TIM_ConfigClockSource>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000718:	f000 f888 	bl	800082c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800071c:	4816      	ldr	r0, [pc, #88]	; (8000778 <MX_TIM2_Init+0xe0>)
 800071e:	f003 faa0 	bl	8003c62 <HAL_TIM_OC_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000728:	f000 f880 	bl	800082c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4619      	mov	r1, r3
 800073a:	480f      	ldr	r0, [pc, #60]	; (8000778 <MX_TIM2_Init+0xe0>)
 800073c:	f003 ffde 	bl	80046fc <HAL_TIMEx_MasterConfigSynchronization>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000746:	f000 f871 	bl	800082c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800074a:	2330      	movs	r3, #48	; 0x30
 800074c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2204      	movs	r2, #4
 800075e:	4619      	mov	r1, r3
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_TIM2_Init+0xe0>)
 8000762:	f003 fb9f 	bl	8003ea4 <HAL_TIM_OC_ConfigChannel>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800076c:	f000 f85e 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	3738      	adds	r7, #56	; 0x38
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000468 	.word	0x20000468

0800077c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_DMA_Init+0x3c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <MX_DMA_Init+0x3c>)
 800078c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_DMA_Init+0x3c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2038      	movs	r0, #56	; 0x38
 80007a4:	f000 fefb 	bl	800159e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007a8:	2038      	movs	r0, #56	; 0x38
 80007aa:	f000 ff14 	bl	80015d6 <HAL_NVIC_EnableIRQ>

}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_GPIO_Init+0x4c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800

0800080c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	AdcConversionDone=1;
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	2000019c 	.word	0x2000019c

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_MspInit+0x4c>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6453      	str	r3, [r2, #68]	; 0x44
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <HAL_MspInit+0x4c>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <HAL_ADC_MspInit+0xdc>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d158      	bne.n	800095c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <HAL_ADC_MspInit+0xe0>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	4a2d      	ldr	r2, [pc, #180]	; (8000968 <HAL_ADC_MspInit+0xe0>)
 80008b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ba:	4b2b      	ldr	r3, [pc, #172]	; (8000968 <HAL_ADC_MspInit+0xe0>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <HAL_ADC_MspInit+0xe0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a26      	ldr	r2, [pc, #152]	; (8000968 <HAL_ADC_MspInit+0xe0>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b24      	ldr	r3, [pc, #144]	; (8000968 <HAL_ADC_MspInit+0xe0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0-WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e2:	2301      	movs	r3, #1
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e6:	2303      	movs	r3, #3
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	481d      	ldr	r0, [pc, #116]	; (800096c <HAL_ADC_MspInit+0xe4>)
 80008f6:	f001 f9f9 	bl	8001cec <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <HAL_ADC_MspInit+0xe8>)
 80008fc:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <HAL_ADC_MspInit+0xec>)
 80008fe:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <HAL_ADC_MspInit+0xe8>)
 8000902:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000906:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <HAL_ADC_MspInit+0xe8>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_ADC_MspInit+0xe8>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <HAL_ADC_MspInit+0xe8>)
 8000916:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800091a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_ADC_MspInit+0xe8>)
 800091e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000922:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000924:	4b12      	ldr	r3, [pc, #72]	; (8000970 <HAL_ADC_MspInit+0xe8>)
 8000926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800092a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_ADC_MspInit+0xe8>)
 800092e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000932:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_ADC_MspInit+0xe8>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_ADC_MspInit+0xe8>)
 800093c:	2200      	movs	r2, #0
 800093e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <HAL_ADC_MspInit+0xe8>)
 8000942:	f000 fe63 	bl	800160c <HAL_DMA_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800094c:	f7ff ff6e 	bl	800082c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_ADC_MspInit+0xe8>)
 8000954:	639a      	str	r2, [r3, #56]	; 0x38
 8000956:	4a06      	ldr	r2, [pc, #24]	; (8000970 <HAL_ADC_MspInit+0xe8>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40012200 	.word	0x40012200
 8000968:	40023800 	.word	0x40023800
 800096c:	40020000 	.word	0x40020000
 8000970:	200003c0 	.word	0x200003c0
 8000974:	40026410 	.word	0x40026410

08000978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000988:	d10d      	bne.n	80009a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_TIM_Base_MspInit+0x3c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_TIM_Base_MspInit+0x3c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_TIM_Base_MspInit+0x3c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f8a4 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <DMA2_Stream0_IRQHandler+0x10>)
 8000a12:	f000 ff01 	bl	8001818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200003c0 	.word	0x200003c0

08000a20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <OTG_FS_IRQHandler+0x10>)
 8000a26:	f001 fc4d 	bl	80022c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20002154 	.word	0x20002154

08000a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <SystemInit+0x20>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a5e:	490e      	ldr	r1, [pc, #56]	; (8000a98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a74:	4c0b      	ldr	r4, [pc, #44]	; (8000aa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a82:	f7ff ffd7 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f007 fb85 	bl	8008194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8a:	f7ff fd19 	bl	80004c0 <main>
  bx  lr    
 8000a8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8000a9c:	08008274 	.word	0x08008274
  ldr r2, =_sbss
 8000aa0:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000aa4:	2000255c 	.word	0x2000255c

08000aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <HAL_Init+0x40>)
 8000ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_Init+0x40>)
 8000ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_Init+0x40>)
 8000ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f000 fd57 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f000 f808 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae0:	f7ff feaa 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023c00 	.word	0x40023c00

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x54>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x58>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fd6f 	bl	80015f2 <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00e      	b.n	8000b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d80a      	bhi.n	8000b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f000 fd37 	bl	800159e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <HAL_InitTick+0x5c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000c80 	.word	0x20000c80

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000c80 	.word	0x20000c80

08000b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b98:	f7ff ffee 	bl	8000b78 <HAL_GetTick>
 8000b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba8:	d005      	beq.n	8000bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_Delay+0x44>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	461a      	mov	r2, r3
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bb6:	bf00      	nop
 8000bb8:	f7ff ffde 	bl	8000b78 <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d8f7      	bhi.n	8000bb8 <HAL_Delay+0x28>
  {
  }
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e033      	b.n	8000c56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d109      	bne.n	8000c0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff fe46 	bl	8000888 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0e:	f003 0310 	and.w	r3, r3, #16
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d118      	bne.n	8000c48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c1e:	f023 0302 	bic.w	r3, r3, #2
 8000c22:	f043 0202 	orr.w	r2, r3, #2
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 fa5e 	bl	80010ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f023 0303 	bic.w	r3, r3, #3
 8000c3e:	f043 0201 	orr.w	r2, r3, #1
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	641a      	str	r2, [r3, #64]	; 0x40
 8000c46:	e001      	b.n	8000c4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d101      	bne.n	8000c7e <HAL_ADC_Start_DMA+0x1e>
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	e0e9      	b.n	8000e52 <HAL_ADC_Start_DMA+0x1f2>
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2201      	movs	r2, #1
 8000c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d018      	beq.n	8000cc6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f042 0201 	orr.w	r2, r2, #1
 8000ca2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ca4:	4b6d      	ldr	r3, [pc, #436]	; (8000e5c <HAL_ADC_Start_DMA+0x1fc>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a6d      	ldr	r2, [pc, #436]	; (8000e60 <HAL_ADC_Start_DMA+0x200>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	0c9a      	lsrs	r2, r3, #18
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000cb8:	e002      	b.n	8000cc0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1f9      	bne.n	8000cba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cd4:	d107      	bne.n	8000ce6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689a      	ldr	r2, [r3, #8]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ce4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	f040 80a1 	bne.w	8000e38 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cfe:	f023 0301 	bic.w	r3, r3, #1
 8000d02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d007      	beq.n	8000d28 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d34:	d106      	bne.n	8000d44 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f023 0206 	bic.w	r2, r3, #6
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	645a      	str	r2, [r3, #68]	; 0x44
 8000d42:	e002      	b.n	8000d4a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2200      	movs	r2, #0
 8000d48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d52:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <HAL_ADC_Start_DMA+0x204>)
 8000d54:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d5a:	4a43      	ldr	r2, [pc, #268]	; (8000e68 <HAL_ADC_Start_DMA+0x208>)
 8000d5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d62:	4a42      	ldr	r2, [pc, #264]	; (8000e6c <HAL_ADC_Start_DMA+0x20c>)
 8000d64:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d6a:	4a41      	ldr	r2, [pc, #260]	; (8000e70 <HAL_ADC_Start_DMA+0x210>)
 8000d6c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d76:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000d86:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d96:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	334c      	adds	r3, #76	; 0x4c
 8000da2:	4619      	mov	r1, r3
 8000da4:	68ba      	ldr	r2, [r7, #8]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f000 fcde 	bl	8001768 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 031f 	and.w	r3, r3, #31
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d12a      	bne.n	8000e0e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a2d      	ldr	r2, [pc, #180]	; (8000e74 <HAL_ADC_Start_DMA+0x214>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d015      	beq.n	8000dee <HAL_ADC_Start_DMA+0x18e>
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a2c      	ldr	r2, [pc, #176]	; (8000e78 <HAL_ADC_Start_DMA+0x218>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d105      	bne.n	8000dd8 <HAL_ADC_Start_DMA+0x178>
 8000dcc:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <HAL_ADC_Start_DMA+0x204>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 031f 	and.w	r3, r3, #31
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d00a      	beq.n	8000dee <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a27      	ldr	r2, [pc, #156]	; (8000e7c <HAL_ADC_Start_DMA+0x21c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d136      	bne.n	8000e50 <HAL_ADC_Start_DMA+0x1f0>
 8000de2:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <HAL_ADC_Start_DMA+0x204>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d130      	bne.n	8000e50 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d129      	bne.n	8000e50 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	e020      	b.n	8000e50 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a18      	ldr	r2, [pc, #96]	; (8000e74 <HAL_ADC_Start_DMA+0x214>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d11b      	bne.n	8000e50 <HAL_ADC_Start_DMA+0x1f0>
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d114      	bne.n	8000e50 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	e00b      	b.n	8000e50 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	f043 0210 	orr.w	r2, r3, #16
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e48:	f043 0201 	orr.w	r2, r3, #1
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	431bde83 	.word	0x431bde83
 8000e64:	40012300 	.word	0x40012300
 8000e68:	080012e5 	.word	0x080012e5
 8000e6c:	0800139f 	.word	0x0800139f
 8000e70:	080013bb 	.word	0x080013bb
 8000e74:	40012000 	.word	0x40012000
 8000e78:	40012100 	.word	0x40012100
 8000e7c:	40012200 	.word	0x40012200

08000e80 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d101      	bne.n	8000ec4 <HAL_ADC_ConfigChannel+0x1c>
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	e105      	b.n	80010d0 <HAL_ADC_ConfigChannel+0x228>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b09      	cmp	r3, #9
 8000ed2:	d925      	bls.n	8000f20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68d9      	ldr	r1, [r3, #12]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3b1e      	subs	r3, #30
 8000eea:	2207      	movs	r2, #7
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43da      	mvns	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	400a      	ands	r2, r1
 8000ef8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68d9      	ldr	r1, [r3, #12]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4403      	add	r3, r0
 8000f12:	3b1e      	subs	r3, #30
 8000f14:	409a      	lsls	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	e022      	b.n	8000f66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6919      	ldr	r1, [r3, #16]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	2207      	movs	r2, #7
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	400a      	ands	r2, r1
 8000f42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6919      	ldr	r1, [r3, #16]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	4603      	mov	r3, r0
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4403      	add	r3, r0
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	430a      	orrs	r2, r1
 8000f64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d824      	bhi.n	8000fb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3b05      	subs	r3, #5
 8000f80:	221f      	movs	r2, #31
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	400a      	ands	r2, r1
 8000f8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	3b05      	subs	r3, #5
 8000faa:	fa00 f203 	lsl.w	r2, r0, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8000fb6:	e04c      	b.n	8001052 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b0c      	cmp	r3, #12
 8000fbe:	d824      	bhi.n	800100a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	3b23      	subs	r3, #35	; 0x23
 8000fd2:	221f      	movs	r2, #31
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43da      	mvns	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	400a      	ands	r2, r1
 8000fe0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	3b23      	subs	r3, #35	; 0x23
 8000ffc:	fa00 f203 	lsl.w	r2, r0, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	430a      	orrs	r2, r1
 8001006:	631a      	str	r2, [r3, #48]	; 0x30
 8001008:	e023      	b.n	8001052 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	3b41      	subs	r3, #65	; 0x41
 800101c:	221f      	movs	r2, #31
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	400a      	ands	r2, r1
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b29b      	uxth	r3, r3
 8001038:	4618      	mov	r0, r3
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	3b41      	subs	r3, #65	; 0x41
 8001046:	fa00 f203 	lsl.w	r2, r0, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	430a      	orrs	r2, r1
 8001050:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <HAL_ADC_ConfigChannel+0x234>)
 8001054:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <HAL_ADC_ConfigChannel+0x238>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d109      	bne.n	8001074 <HAL_ADC_ConfigChannel+0x1cc>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b12      	cmp	r3, #18
 8001066:	d105      	bne.n	8001074 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <HAL_ADC_ConfigChannel+0x238>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d123      	bne.n	80010c6 <HAL_ADC_ConfigChannel+0x21e>
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b10      	cmp	r3, #16
 8001084:	d003      	beq.n	800108e <HAL_ADC_ConfigChannel+0x1e6>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b11      	cmp	r3, #17
 800108c:	d11b      	bne.n	80010c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b10      	cmp	r3, #16
 80010a0:	d111      	bne.n	80010c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <HAL_ADC_ConfigChannel+0x23c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a10      	ldr	r2, [pc, #64]	; (80010e8 <HAL_ADC_ConfigChannel+0x240>)
 80010a8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ac:	0c9a      	lsrs	r2, r3, #18
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010b8:	e002      	b.n	80010c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	3b01      	subs	r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f9      	bne.n	80010ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	40012300 	.word	0x40012300
 80010e0:	40012000 	.word	0x40012000
 80010e4:	20000000 	.word	0x20000000
 80010e8:	431bde83 	.word	0x431bde83

080010ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010f4:	4b79      	ldr	r3, [pc, #484]	; (80012dc <ADC_Init+0x1f0>)
 80010f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	431a      	orrs	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001120:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6859      	ldr	r1, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	021a      	lsls	r2, r3, #8
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001144:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6859      	ldr	r1, [r3, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6899      	ldr	r1, [r3, #8]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	430a      	orrs	r2, r1
 8001178:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117e:	4a58      	ldr	r2, [pc, #352]	; (80012e0 <ADC_Init+0x1f4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d022      	beq.n	80011ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001192:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6899      	ldr	r1, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6899      	ldr	r1, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	430a      	orrs	r2, r1
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	e00f      	b.n	80011ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 0202 	bic.w	r2, r2, #2
 80011f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6899      	ldr	r1, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7e1b      	ldrb	r3, [r3, #24]
 8001204:	005a      	lsls	r2, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d01b      	beq.n	8001250 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001226:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001236:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6859      	ldr	r1, [r3, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	3b01      	subs	r3, #1
 8001244:	035a      	lsls	r2, r3, #13
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	e007      	b.n	8001260 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800125e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	3b01      	subs	r3, #1
 800127c:	051a      	lsls	r2, r3, #20
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6899      	ldr	r1, [r3, #8]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012a2:	025a      	lsls	r2, r3, #9
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6899      	ldr	r1, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	029a      	lsls	r2, r3, #10
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	609a      	str	r2, [r3, #8]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40012300 	.word	0x40012300
 80012e0:	0f000001 	.word	0x0f000001

080012e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d13c      	bne.n	8001378 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d12b      	bne.n	8001370 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800131c:	2b00      	cmp	r3, #0
 800131e:	d127      	bne.n	8001370 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800132a:	2b00      	cmp	r3, #0
 800132c:	d006      	beq.n	800133c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001338:	2b00      	cmp	r3, #0
 800133a:	d119      	bne.n	8001370 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0220 	bic.w	r2, r2, #32
 800134a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d105      	bne.n	8001370 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f043 0201 	orr.w	r2, r3, #1
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f7ff fa4b 	bl	800080c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001376:	e00e      	b.n	8001396 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 0310 	and.w	r3, r3, #16
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f7ff fd85 	bl	8000e94 <HAL_ADC_ErrorCallback>
}
 800138a:	e004      	b.n	8001396 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	4798      	blx	r3
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b084      	sub	sp, #16
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f7ff fd67 	bl	8000e80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013b2:	bf00      	nop
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2240      	movs	r2, #64	; 0x40
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f043 0204 	orr.w	r2, r3, #4
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f7ff fd5a 	bl	8000e94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013e0:	bf00      	nop
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0b      	blt.n	8001476 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	4907      	ldr	r1, [pc, #28]	; (8001484 <__NVIC_EnableIRQ+0x38>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2001      	movs	r0, #1
 800146e:	fa00 f202 	lsl.w	r2, r0, r2
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000e100 	.word	0xe000e100

08001488 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0a      	blt.n	80014b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	490c      	ldr	r1, [pc, #48]	; (80014d4 <__NVIC_SetPriority+0x4c>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014b0:	e00a      	b.n	80014c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4908      	ldr	r1, [pc, #32]	; (80014d8 <__NVIC_SetPriority+0x50>)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	3b04      	subs	r3, #4
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	761a      	strb	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_EncodePriority+0x30>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_EncodePriority+0x32>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43d9      	mvns	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4313      	orrs	r3, r2
         );
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	; 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001554:	d301      	bcc.n	800155a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2301      	movs	r3, #1
 8001558:	e00f      	b.n	800157a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <SysTick_Config+0x40>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001562:	210f      	movs	r1, #15
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f7ff ff8e 	bl	8001488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	; (8001584 <SysTick_Config+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <SysTick_Config+0x40>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff29 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff3e 	bl	8001430 <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff8e 	bl	80014dc <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5d 	bl	8001488 <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff31 	bl	800144c <__NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffa2 	bl	8001544 <SysTick_Config>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff faae 	bl	8000b78 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e099      	b.n	800175c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2202      	movs	r2, #2
 8001634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0201 	bic.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001648:	e00f      	b.n	800166a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800164a:	f7ff fa95 	bl	8000b78 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b05      	cmp	r3, #5
 8001656:	d908      	bls.n	800166a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2220      	movs	r2, #32
 800165c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2203      	movs	r2, #3
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e078      	b.n	800175c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1e8      	bne.n	800164a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	4b38      	ldr	r3, [pc, #224]	; (8001764 <HAL_DMA_Init+0x158>)
 8001684:	4013      	ands	r3, r2
 8001686:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001696:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d107      	bne.n	80016d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	4313      	orrs	r3, r2
 80016ce:	697a      	ldr	r2, [r7, #20]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f023 0307 	bic.w	r3, r3, #7
 80016ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d117      	bne.n	800172e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4313      	orrs	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00e      	beq.n	800172e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 fa6f 	bl	8001bf4 <DMA_CheckFifoParam>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2240      	movs	r2, #64	; 0x40
 8001720:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800172a:	2301      	movs	r3, #1
 800172c:	e016      	b.n	800175c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 fa26 	bl	8001b88 <DMA_CalcBaseAndBitshift>
 800173c:	4603      	mov	r3, r0
 800173e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	223f      	movs	r2, #63	; 0x3f
 8001746:	409a      	lsls	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	f010803f 	.word	0xf010803f

08001768 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
 8001774:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001786:	2b01      	cmp	r3, #1
 8001788:	d101      	bne.n	800178e <HAL_DMA_Start_IT+0x26>
 800178a:	2302      	movs	r3, #2
 800178c:	e040      	b.n	8001810 <HAL_DMA_Start_IT+0xa8>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d12f      	bne.n	8001802 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2202      	movs	r2, #2
 80017a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 f9b8 	bl	8001b2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c0:	223f      	movs	r2, #63	; 0x3f
 80017c2:	409a      	lsls	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0216 	orr.w	r2, r2, #22
 80017d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0208 	orr.w	r2, r2, #8
 80017ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0201 	orr.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e005      	b.n	800180e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800180a:	2302      	movs	r3, #2
 800180c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800180e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001824:	4b92      	ldr	r3, [pc, #584]	; (8001a70 <HAL_DMA_IRQHandler+0x258>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a92      	ldr	r2, [pc, #584]	; (8001a74 <HAL_DMA_IRQHandler+0x25c>)
 800182a:	fba2 2303 	umull	r2, r3, r2, r3
 800182e:	0a9b      	lsrs	r3, r3, #10
 8001830:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	2208      	movs	r2, #8
 8001844:	409a      	lsls	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d01a      	beq.n	8001884 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0204 	bic.w	r2, r2, #4
 800186a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001870:	2208      	movs	r2, #8
 8001872:	409a      	lsls	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001888:	2201      	movs	r2, #1
 800188a:	409a      	lsls	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d012      	beq.n	80018ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00b      	beq.n	80018ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a6:	2201      	movs	r2, #1
 80018a8:	409a      	lsls	r2, r3
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b2:	f043 0202 	orr.w	r2, r3, #2
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	2204      	movs	r2, #4
 80018c0:	409a      	lsls	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d012      	beq.n	80018f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00b      	beq.n	80018f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018dc:	2204      	movs	r2, #4
 80018de:	409a      	lsls	r2, r3
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e8:	f043 0204 	orr.w	r2, r3, #4
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f4:	2210      	movs	r2, #16
 80018f6:	409a      	lsls	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d043      	beq.n	8001988 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d03c      	beq.n	8001988 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	2210      	movs	r2, #16
 8001914:	409a      	lsls	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d018      	beq.n	800195a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d108      	bne.n	8001948 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	2b00      	cmp	r3, #0
 800193c:	d024      	beq.n	8001988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	4798      	blx	r3
 8001946:	e01f      	b.n	8001988 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194c:	2b00      	cmp	r3, #0
 800194e:	d01b      	beq.n	8001988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	4798      	blx	r3
 8001958:	e016      	b.n	8001988 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001964:	2b00      	cmp	r3, #0
 8001966:	d107      	bne.n	8001978 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0208 	bic.w	r2, r2, #8
 8001976:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198c:	2220      	movs	r2, #32
 800198e:	409a      	lsls	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 808e 	beq.w	8001ab6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 8086 	beq.w	8001ab6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	2220      	movs	r2, #32
 80019b0:	409a      	lsls	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b05      	cmp	r3, #5
 80019c0:	d136      	bne.n	8001a30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0216 	bic.w	r2, r2, #22
 80019d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695a      	ldr	r2, [r3, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d103      	bne.n	80019f2 <HAL_DMA_IRQHandler+0x1da>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0208 	bic.w	r2, r2, #8
 8001a00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a06:	223f      	movs	r2, #63	; 0x3f
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d07d      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	4798      	blx	r3
        }
        return;
 8001a2e:	e078      	b.n	8001b22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d01c      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d108      	bne.n	8001a5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d030      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	4798      	blx	r3
 8001a5c:	e02b      	b.n	8001ab6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d027      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	4798      	blx	r3
 8001a6e:	e022      	b.n	8001ab6 <HAL_DMA_IRQHandler+0x29e>
 8001a70:	20000000 	.word	0x20000000
 8001a74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10f      	bne.n	8001aa6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0210 	bic.w	r2, r2, #16
 8001a94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d032      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d022      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2205      	movs	r2, #5
 8001ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0201 	bic.w	r2, r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d307      	bcc.n	8001afe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f2      	bne.n	8001ae2 <HAL_DMA_IRQHandler+0x2ca>
 8001afc:	e000      	b.n	8001b00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001afe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4798      	blx	r3
 8001b20:	e000      	b.n	8001b24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b22:	bf00      	nop
    }
  }
}
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop

08001b2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b40      	cmp	r3, #64	; 0x40
 8001b58:	d108      	bne.n	8001b6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b6a:	e007      	b.n	8001b7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	60da      	str	r2, [r3, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	3b10      	subs	r3, #16
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <DMA_CalcBaseAndBitshift+0x64>)
 8001b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ba2:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <DMA_CalcBaseAndBitshift+0x68>)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d909      	bls.n	8001bca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bbe:	f023 0303 	bic.w	r3, r3, #3
 8001bc2:	1d1a      	adds	r2, r3, #4
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	659a      	str	r2, [r3, #88]	; 0x58
 8001bc8:	e007      	b.n	8001bda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bd2:	f023 0303 	bic.w	r3, r3, #3
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	aaaaaaab 	.word	0xaaaaaaab
 8001bf0:	0800825c 	.word	0x0800825c

08001bf4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d11f      	bne.n	8001c4e <DMA_CheckFifoParam+0x5a>
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d856      	bhi.n	8001cc2 <DMA_CheckFifoParam+0xce>
 8001c14:	a201      	add	r2, pc, #4	; (adr r2, 8001c1c <DMA_CheckFifoParam+0x28>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	08001c2d 	.word	0x08001c2d
 8001c20:	08001c3f 	.word	0x08001c3f
 8001c24:	08001c2d 	.word	0x08001c2d
 8001c28:	08001cc3 	.word	0x08001cc3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d046      	beq.n	8001cc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c3c:	e043      	b.n	8001cc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c46:	d140      	bne.n	8001cca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c4c:	e03d      	b.n	8001cca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c56:	d121      	bne.n	8001c9c <DMA_CheckFifoParam+0xa8>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d837      	bhi.n	8001cce <DMA_CheckFifoParam+0xda>
 8001c5e:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <DMA_CheckFifoParam+0x70>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001c75 	.word	0x08001c75
 8001c68:	08001c7b 	.word	0x08001c7b
 8001c6c:	08001c75 	.word	0x08001c75
 8001c70:	08001c8d 	.word	0x08001c8d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
      break;
 8001c78:	e030      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d025      	beq.n	8001cd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c8a:	e022      	b.n	8001cd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c94:	d11f      	bne.n	8001cd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c9a:	e01c      	b.n	8001cd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d903      	bls.n	8001caa <DMA_CheckFifoParam+0xb6>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d003      	beq.n	8001cb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ca8:	e018      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
      break;
 8001cae:	e015      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00e      	beq.n	8001cda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001cc0:	e00b      	b.n	8001cda <DMA_CheckFifoParam+0xe6>
      break;
 8001cc2:	bf00      	nop
 8001cc4:	e00a      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cc6:	bf00      	nop
 8001cc8:	e008      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cca:	bf00      	nop
 8001ccc:	e006      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cce:	bf00      	nop
 8001cd0:	e004      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cd2:	bf00      	nop
 8001cd4:	e002      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;   
 8001cd6:	bf00      	nop
 8001cd8:	e000      	b.n	8001cdc <DMA_CheckFifoParam+0xe8>
      break;
 8001cda:	bf00      	nop
    }
  } 
  
  return status; 
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	e16b      	b.n	8001fe0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	f040 815a 	bne.w	8001fda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d005      	beq.n	8001d3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d130      	bne.n	8001da0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d74:	2201      	movs	r2, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 0201 	and.w	r2, r3, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d017      	beq.n	8001ddc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d123      	bne.n	8001e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	08da      	lsrs	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3208      	adds	r2, #8
 8001df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	08da      	lsrs	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3208      	adds	r2, #8
 8001e2a:	69b9      	ldr	r1, [r7, #24]
 8001e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0203 	and.w	r2, r3, #3
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80b4 	beq.w	8001fda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b60      	ldr	r3, [pc, #384]	; (8001ff8 <HAL_GPIO_Init+0x30c>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a5f      	ldr	r2, [pc, #380]	; (8001ff8 <HAL_GPIO_Init+0x30c>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <HAL_GPIO_Init+0x30c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e8e:	4a5b      	ldr	r2, [pc, #364]	; (8001ffc <HAL_GPIO_Init+0x310>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a52      	ldr	r2, [pc, #328]	; (8002000 <HAL_GPIO_Init+0x314>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d02b      	beq.n	8001f12 <HAL_GPIO_Init+0x226>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a51      	ldr	r2, [pc, #324]	; (8002004 <HAL_GPIO_Init+0x318>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d025      	beq.n	8001f0e <HAL_GPIO_Init+0x222>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a50      	ldr	r2, [pc, #320]	; (8002008 <HAL_GPIO_Init+0x31c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d01f      	beq.n	8001f0a <HAL_GPIO_Init+0x21e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4f      	ldr	r2, [pc, #316]	; (800200c <HAL_GPIO_Init+0x320>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d019      	beq.n	8001f06 <HAL_GPIO_Init+0x21a>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a4e      	ldr	r2, [pc, #312]	; (8002010 <HAL_GPIO_Init+0x324>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d013      	beq.n	8001f02 <HAL_GPIO_Init+0x216>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a4d      	ldr	r2, [pc, #308]	; (8002014 <HAL_GPIO_Init+0x328>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d00d      	beq.n	8001efe <HAL_GPIO_Init+0x212>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4c      	ldr	r2, [pc, #304]	; (8002018 <HAL_GPIO_Init+0x32c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d007      	beq.n	8001efa <HAL_GPIO_Init+0x20e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4b      	ldr	r2, [pc, #300]	; (800201c <HAL_GPIO_Init+0x330>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d101      	bne.n	8001ef6 <HAL_GPIO_Init+0x20a>
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	e00e      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	e00c      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001efa:	2306      	movs	r3, #6
 8001efc:	e00a      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001efe:	2305      	movs	r3, #5
 8001f00:	e008      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001f02:	2304      	movs	r3, #4
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001f06:	2303      	movs	r3, #3
 8001f08:	e004      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e002      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_GPIO_Init+0x228>
 8001f12:	2300      	movs	r3, #0
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	f002 0203 	and.w	r2, r2, #3
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	4093      	lsls	r3, r2
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f24:	4935      	ldr	r1, [pc, #212]	; (8001ffc <HAL_GPIO_Init+0x310>)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f32:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f56:	4a32      	ldr	r2, [pc, #200]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f5c:	4b30      	ldr	r3, [pc, #192]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f80:	4a27      	ldr	r2, [pc, #156]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001faa:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd4:	4a12      	ldr	r2, [pc, #72]	; (8002020 <HAL_GPIO_Init+0x334>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	2b0f      	cmp	r3, #15
 8001fe4:	f67f ae90 	bls.w	8001d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40013800 	.word	0x40013800
 8002000:	40020000 	.word	0x40020000
 8002004:	40020400 	.word	0x40020400
 8002008:	40020800 	.word	0x40020800
 800200c:	40020c00 	.word	0x40020c00
 8002010:	40021000 	.word	0x40021000
 8002014:	40021400 	.word	0x40021400
 8002018:	40021800 	.word	0x40021800
 800201c:	40021c00 	.word	0x40021c00
 8002020:	40013c00 	.word	0x40013c00

08002024 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002026:	b08f      	sub	sp, #60	; 0x3c
 8002028:	af0a      	add	r7, sp, #40	; 0x28
 800202a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e10f      	b.n	8002256 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d106      	bne.n	8002056 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f005 fd8b 	bl	8007b6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2203      	movs	r2, #3
 800205a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f002 fcd2 	bl	8004a1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	687e      	ldr	r6, [r7, #4]
 8002082:	466d      	mov	r5, sp
 8002084:	f106 0410 	add.w	r4, r6, #16
 8002088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800208c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002090:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002094:	e885 0003 	stmia.w	r5, {r0, r1}
 8002098:	1d33      	adds	r3, r6, #4
 800209a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209c:	6838      	ldr	r0, [r7, #0]
 800209e:	f002 fba9 	bl	80047f4 <USB_CoreInit>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0d0      	b.n	8002256 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 fcc0 	bl	8004a40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e04a      	b.n	800215c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	333d      	adds	r3, #61	; 0x3d
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	333c      	adds	r3, #60	; 0x3c
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	b298      	uxth	r0, r3
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3342      	adds	r3, #66	; 0x42
 8002102:	4602      	mov	r2, r0
 8002104:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	333f      	adds	r3, #63	; 0x3f
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3344      	adds	r3, #68	; 0x44
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	3348      	adds	r3, #72	; 0x48
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	3350      	adds	r3, #80	; 0x50
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	3301      	adds	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	d3af      	bcc.n	80020c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
 800216a:	e044      	b.n	80021f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	3301      	adds	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d3b5      	bcc.n	800216c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	687e      	ldr	r6, [r7, #4]
 8002208:	466d      	mov	r5, sp
 800220a:	f106 0410 	add.w	r4, r6, #16
 800220e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002216:	e894 0003 	ldmia.w	r4, {r0, r1}
 800221a:	e885 0003 	stmia.w	r5, {r0, r1}
 800221e:	1d33      	adds	r3, r6, #4
 8002220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002222:	6838      	ldr	r0, [r7, #0]
 8002224:	f002 fc36 	bl	8004a94 <USB_DevInit>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2202      	movs	r2, #2
 8002232:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e00d      	b.n	8002256 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f003 fc7e 	bl	8005b50 <USB_DevDisconnect>

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800225e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_PCD_Start+0x1c>
 8002276:	2302      	movs	r3, #2
 8002278:	e020      	b.n	80022bc <HAL_PCD_Start+0x5e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	2b01      	cmp	r3, #1
 8002288:	d109      	bne.n	800229e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800228e:	2b01      	cmp	r3, #1
 8002290:	d005      	beq.n	800229e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 fbaa 	bl	80049fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 fc2e 	bl	8005b0e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b08d      	sub	sp, #52	; 0x34
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 fcec 	bl	8005cb8 <USB_GetMode>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 839d 	bne.w	8002a22 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 fc50 	bl	8005b92 <USB_ReadInterrupts>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 8393 	beq.w	8002a20 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f003 fc47 	bl	8005b92 <USB_ReadInterrupts>
 8002304:	4603      	mov	r3, r0
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b02      	cmp	r3, #2
 800230c:	d107      	bne.n	800231e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f002 0202 	and.w	r2, r2, #2
 800231c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f003 fc35 	bl	8005b92 <USB_ReadInterrupts>
 8002328:	4603      	mov	r3, r0
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b10      	cmp	r3, #16
 8002330:	d161      	bne.n	80023f6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	699a      	ldr	r2, [r3, #24]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0210 	bic.w	r2, r2, #16
 8002340:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	f003 020f 	and.w	r2, r3, #15
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	3304      	adds	r3, #4
 8002360:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	0c5b      	lsrs	r3, r3, #17
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	2b02      	cmp	r3, #2
 800236c:	d124      	bne.n	80023b8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d035      	beq.n	80023e6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002384:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002388:	b29b      	uxth	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	6a38      	ldr	r0, [r7, #32]
 800238e:	f003 fa9b 	bl	80058c8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800239e:	441a      	add	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	699a      	ldr	r2, [r3, #24]
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b0:	441a      	add	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	619a      	str	r2, [r3, #24]
 80023b6:	e016      	b.n	80023e6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	0c5b      	lsrs	r3, r3, #17
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	2b06      	cmp	r3, #6
 80023c2:	d110      	bne.n	80023e6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023ca:	2208      	movs	r2, #8
 80023cc:	4619      	mov	r1, r3
 80023ce:	6a38      	ldr	r0, [r7, #32]
 80023d0:	f003 fa7a 	bl	80058c8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023e0:	441a      	add	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699a      	ldr	r2, [r3, #24]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0210 	orr.w	r2, r2, #16
 80023f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 fbc9 	bl	8005b92 <USB_ReadInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002406:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800240a:	d16e      	bne.n	80024ea <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f003 fbcf 	bl	8005bb8 <USB_ReadDevAllOutEpInterrupt>
 800241a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800241c:	e062      	b.n	80024e4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d057      	beq.n	80024d8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f003 fbf4 	bl	8005c20 <USB_ReadDevOutEPInterrupt>
 8002438:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00c      	beq.n	800245e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002450:	461a      	mov	r2, r3
 8002452:	2301      	movs	r3, #1
 8002454:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fdb1 	bl	8002fc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00c      	beq.n	8002482 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002474:	461a      	mov	r2, r3
 8002476:	2308      	movs	r3, #8
 8002478:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800247a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 feab 	bl	80031d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002498:	461a      	mov	r2, r3
 800249a:	2310      	movs	r3, #16
 800249c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d008      	beq.n	80024ba <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b4:	461a      	mov	r2, r3
 80024b6:	2320      	movs	r3, #32
 80024b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d009      	beq.n	80024d8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d0:	461a      	mov	r2, r3
 80024d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	3301      	adds	r3, #1
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	085b      	lsrs	r3, r3, #1
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d199      	bne.n	800241e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f003 fb4f 	bl	8005b92 <USB_ReadInterrupts>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024fe:	f040 80c0 	bne.w	8002682 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f003 fb70 	bl	8005bec <USB_ReadDevAllInEpInterrupt>
 800250c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002512:	e0b2      	b.n	800267a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80a7 	beq.w	800266e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f003 fb96 	bl	8005c5c <USB_ReadDevInEPInterrupt>
 8002530:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d057      	beq.n	80025ec <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	2201      	movs	r2, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	43db      	mvns	r3, r3
 8002556:	69f9      	ldr	r1, [r7, #28]
 8002558:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800255c:	4013      	ands	r3, r2
 800255e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800256c:	461a      	mov	r2, r3
 800256e:	2301      	movs	r3, #1
 8002570:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d132      	bne.n	80025e0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	3348      	adds	r3, #72	; 0x48
 800258a:	6819      	ldr	r1, [r3, #0]
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4403      	add	r3, r0
 800259a:	3344      	adds	r3, #68	; 0x44
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4419      	add	r1, r3
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4403      	add	r3, r0
 80025ae:	3348      	adds	r3, #72	; 0x48
 80025b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d113      	bne.n	80025e0 <HAL_PCD_IRQHandler+0x31c>
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	3350      	adds	r3, #80	; 0x50
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d108      	bne.n	80025e0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80025d8:	461a      	mov	r2, r3
 80025da:	2101      	movs	r1, #1
 80025dc:	f003 fb9e 	bl	8005d1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f005 fb41 	bl	8007c6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002602:	461a      	mov	r2, r3
 8002604:	2308      	movs	r3, #8
 8002606:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	4413      	add	r3, r2
 800261a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800261e:	461a      	mov	r2, r3
 8002620:	2310      	movs	r3, #16
 8002622:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800263a:	461a      	mov	r2, r3
 800263c:	2340      	movs	r3, #64	; 0x40
 800263e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002656:	461a      	mov	r2, r3
 8002658:	2302      	movs	r3, #2
 800265a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fc1b 	bl	8002ea4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	3301      	adds	r3, #1
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	085b      	lsrs	r3, r3, #1
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	f47f af49 	bne.w	8002514 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f003 fa83 	bl	8005b92 <USB_ReadInterrupts>
 800268c:	4603      	mov	r3, r0
 800268e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002696:	d122      	bne.n	80026de <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d108      	bne.n	80026c8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026be:	2100      	movs	r1, #0
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fe27 	bl	8003314 <HAL_PCDEx_LPM_Callback>
 80026c6:	e002      	b.n	80026ce <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f005 fb47 	bl	8007d5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80026dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 fa55 	bl	8005b92 <USB_ReadInterrupts>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026f2:	d112      	bne.n	800271a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d102      	bne.n	800270a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f005 fb03 	bl	8007d10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002718:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f003 fa37 	bl	8005b92 <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272e:	f040 80c7 	bne.w	80028c0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2110      	movs	r1, #16
 800274c:	4618      	mov	r0, r3
 800274e:	f002 fb05 	bl	8004d5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002752:	2300      	movs	r3, #0
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002756:	e056      	b.n	8002806 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	4413      	add	r3, r2
 8002760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002764:	461a      	mov	r2, r3
 8002766:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800276a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	4413      	add	r3, r2
 8002774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800277c:	0151      	lsls	r1, r2, #5
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	440a      	add	r2, r1
 8002782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800278a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800278c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800279c:	0151      	lsls	r1, r2, #5
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	440a      	add	r2, r1
 80027a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027b8:	461a      	mov	r2, r3
 80027ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d0:	0151      	lsls	r1, r2, #5
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	440a      	add	r2, r1
 80027d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f0:	0151      	lsls	r1, r2, #5
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	440a      	add	r2, r1
 80027f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80027fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	3301      	adds	r3, #1
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800280c:	429a      	cmp	r2, r3
 800280e:	d3a3      	bcc.n	8002758 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800281e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002822:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	2b00      	cmp	r3, #0
 800282a:	d016      	beq.n	800285a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002836:	69fa      	ldr	r2, [r7, #28]
 8002838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800283c:	f043 030b 	orr.w	r3, r3, #11
 8002840:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002852:	f043 030b 	orr.w	r3, r3, #11
 8002856:	6453      	str	r3, [r2, #68]	; 0x44
 8002858:	e015      	b.n	8002886 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	69fa      	ldr	r2, [r7, #28]
 8002864:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002868:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800286c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002870:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	69fa      	ldr	r2, [r7, #28]
 800287c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002880:	f043 030b 	orr.w	r3, r3, #11
 8002884:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002894:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002898:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028aa:	461a      	mov	r2, r3
 80028ac:	f003 fa36 	bl	8005d1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 f964 	bl	8005b92 <USB_ReadInterrupts>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d4:	d124      	bne.n	8002920 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f003 f9fa 	bl	8005cd4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 fa9a 	bl	8004e1e <USB_GetDevSpeed>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461a      	mov	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681c      	ldr	r4, [r3, #0]
 80028f6:	f001 f959 	bl	8003bac <HAL_RCC_GetHCLKFreq>
 80028fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	4620      	mov	r0, r4
 8002906:	f001 ffd7 	bl	80048b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f005 f9d7 	bl	8007cbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695a      	ldr	r2, [r3, #20]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800291e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f003 f934 	bl	8005b92 <USB_ReadInterrupts>
 800292a:	4603      	mov	r3, r0
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b08      	cmp	r3, #8
 8002932:	d10a      	bne.n	800294a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f005 f9b4 	bl	8007ca2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f002 0208 	and.w	r2, r2, #8
 8002948:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f003 f91f 	bl	8005b92 <USB_ReadInterrupts>
 8002954:	4603      	mov	r3, r0
 8002956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800295e:	d10f      	bne.n	8002980 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	b2db      	uxtb	r3, r3
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f005 fa16 	bl	8007d9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800297e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f003 f904 	bl	8005b92 <USB_ReadInterrupts>
 800298a:	4603      	mov	r3, r0
 800298c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002990:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002994:	d10f      	bne.n	80029b6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	b2db      	uxtb	r3, r3
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f005 f9e9 	bl	8007d78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80029b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 f8e9 	bl	8005b92 <USB_ReadInterrupts>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ca:	d10a      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f005 f9f7 	bl	8007dc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 f8d3 	bl	8005b92 <USB_ReadInterrupts>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d115      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f005 f9e7 	bl	8007ddc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	e000      	b.n	8002a22 <HAL_PCD_IRQHandler+0x75e>
      return;
 8002a20:	bf00      	nop
    }
  }
}
 8002a22:	3734      	adds	r7, #52	; 0x34
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd90      	pop	{r4, r7, pc}

08002a28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_PCD_SetAddress+0x1a>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e013      	b.n	8002a6a <HAL_PCD_SetAddress+0x42>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 f831 	bl	8005ac2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	4608      	mov	r0, r1
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4603      	mov	r3, r0
 8002a82:	70fb      	strb	r3, [r7, #3]
 8002a84:	460b      	mov	r3, r1
 8002a86:	803b      	strh	r3, [r7, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	da0f      	bge.n	8002ab8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	f003 020f 	and.w	r2, r3, #15
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	3338      	adds	r3, #56	; 0x38
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	3304      	adds	r3, #4
 8002aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	705a      	strb	r2, [r3, #1]
 8002ab6:	e00f      	b.n	8002ad8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	f003 020f 	and.w	r2, r3, #15
 8002abe:	4613      	mov	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	3304      	adds	r3, #4
 8002ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ae4:	883a      	ldrh	r2, [r7, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	78ba      	ldrb	r2, [r7, #2]
 8002aee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	785b      	ldrb	r3, [r3, #1]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d004      	beq.n	8002b02 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b02:	78bb      	ldrb	r3, [r7, #2]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d102      	bne.n	8002b0e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_PCD_EP_Open+0xaa>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e00e      	b.n	8002b3a <HAL_PCD_EP_Open+0xc8>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68f9      	ldr	r1, [r7, #12]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f002 f99c 	bl	8004e68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002b38:	7afb      	ldrb	r3, [r7, #11]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	da0f      	bge.n	8002b76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	f003 020f 	and.w	r2, r3, #15
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	3338      	adds	r3, #56	; 0x38
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	705a      	strb	r2, [r3, #1]
 8002b74:	e00f      	b.n	8002b96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	f003 020f 	and.w	r2, r3, #15
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_PCD_EP_Close+0x6e>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e00e      	b.n	8002bce <HAL_PCD_EP_Close+0x8c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68f9      	ldr	r1, [r7, #12]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f002 f9da 	bl	8004f78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	60f8      	str	r0, [r7, #12]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	460b      	mov	r3, r1
 8002be4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002be6:	7afb      	ldrb	r3, [r7, #11]
 8002be8:	f003 020f 	and.w	r2, r3, #15
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2200      	movs	r2, #0
 8002c16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c18:	7afb      	ldrb	r3, [r7, #11]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d102      	bne.n	8002c32 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c32:	7afb      	ldrb	r3, [r7, #11]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	6979      	ldr	r1, [r7, #20]
 8002c4a:	f002 fcb5 	bl	80055b8 <USB_EP0StartXfer>
 8002c4e:	e008      	b.n	8002c62 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6818      	ldr	r0, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	6979      	ldr	r1, [r7, #20]
 8002c5e:	f002 fa67 	bl	8005130 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	f003 020f 	and.w	r2, r3, #15
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002c8e:	681b      	ldr	r3, [r3, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cac:	7afb      	ldrb	r3, [r7, #11]
 8002cae:	f003 020f 	and.w	r2, r3, #15
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	3338      	adds	r3, #56	; 0x38
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cdc:	7afb      	ldrb	r3, [r7, #11]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d102      	bne.n	8002cf6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cf6:	7afb      	ldrb	r3, [r7, #11]
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d109      	bne.n	8002d14 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	6979      	ldr	r1, [r7, #20]
 8002d0e:	f002 fc53 	bl	80055b8 <USB_EP0StartXfer>
 8002d12:	e008      	b.n	8002d26 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	6979      	ldr	r1, [r7, #20]
 8002d22:	f002 fa05 	bl	8005130 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	f003 020f 	and.w	r2, r3, #15
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d901      	bls.n	8002d4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e050      	b.n	8002df0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	da0f      	bge.n	8002d76 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	f003 020f 	and.w	r2, r3, #15
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	3338      	adds	r3, #56	; 0x38
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	705a      	strb	r2, [r3, #1]
 8002d74:	e00d      	b.n	8002d92 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	4413      	add	r3, r2
 8002d88:	3304      	adds	r3, #4
 8002d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HAL_PCD_EP_SetStall+0x82>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e01e      	b.n	8002df0 <HAL_PCD_EP_SetStall+0xc0>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68f9      	ldr	r1, [r7, #12]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 fdaa 	bl	800591a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	b2d9      	uxtb	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002de0:	461a      	mov	r2, r3
 8002de2:	f002 ff9b 	bl	8005d1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	f003 020f 	and.w	r2, r3, #15
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d901      	bls.n	8002e16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e042      	b.n	8002e9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	da0f      	bge.n	8002e3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	f003 020f 	and.w	r2, r3, #15
 8002e24:	4613      	mov	r3, r2
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	3338      	adds	r3, #56	; 0x38
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	3304      	adds	r3, #4
 8002e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	705a      	strb	r2, [r3, #1]
 8002e3c:	e00f      	b.n	8002e5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	f003 020f 	and.w	r2, r3, #15
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4413      	add	r3, r2
 8002e54:	3304      	adds	r3, #4
 8002e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_PCD_EP_ClrStall+0x86>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e00e      	b.n	8002e9c <HAL_PCD_EP_ClrStall+0xa4>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68f9      	ldr	r1, [r7, #12]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f002 fdb2 	bl	80059f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	3338      	adds	r3, #56	; 0x38
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3304      	adds	r3, #4
 8002eca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	699a      	ldr	r2, [r3, #24]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d901      	bls.n	8002edc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e06c      	b.n	8002fb6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d902      	bls.n	8002ef8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	3303      	adds	r3, #3
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f00:	e02b      	b.n	8002f5a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	69fa      	ldr	r2, [r7, #28]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d902      	bls.n	8002f1e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3303      	adds	r3, #3
 8002f22:	089b      	lsrs	r3, r3, #2
 8002f24:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68d9      	ldr	r1, [r3, #12]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	6978      	ldr	r0, [r7, #20]
 8002f3e:	f002 fc8e 	bl	800585e <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	441a      	add	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	699a      	ldr	r2, [r3, #24]
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	441a      	add	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d809      	bhi.n	8002f84 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	699a      	ldr	r2, [r3, #24]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d203      	bcs.n	8002f84 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1be      	bne.n	8002f02 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d811      	bhi.n	8002fb4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	2201      	movs	r2, #1
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	6939      	ldr	r1, [r7, #16]
 8002fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	333c      	adds	r3, #60	; 0x3c
 8002fd8:	3304      	adds	r3, #4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	f040 80a0 	bne.w	8003138 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d015      	beq.n	800302e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a72      	ldr	r2, [pc, #456]	; (80031d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003006:	4293      	cmp	r3, r2
 8003008:	f240 80dd 	bls.w	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80d7 	beq.w	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003024:	461a      	mov	r2, r3
 8003026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800302a:	6093      	str	r3, [r2, #8]
 800302c:	e0cb      	b.n	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d009      	beq.n	800304c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	015a      	lsls	r2, r3, #5
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4413      	add	r3, r2
 8003040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003044:	461a      	mov	r2, r3
 8003046:	2320      	movs	r3, #32
 8003048:	6093      	str	r3, [r2, #8]
 800304a:	e0bc      	b.n	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003052:	2b00      	cmp	r3, #0
 8003054:	f040 80b7 	bne.w	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4a5d      	ldr	r2, [pc, #372]	; (80031d0 <PCD_EP_OutXfrComplete_int+0x210>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d90f      	bls.n	8003080 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003076:	461a      	mov	r2, r3
 8003078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800307c:	6093      	str	r3, [r2, #8]
 800307e:	e0a2      	b.n	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003092:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	0159      	lsls	r1, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	440b      	add	r3, r1
 800309c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80030a6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4403      	add	r3, r0
 80030b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80030ba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4403      	add	r3, r0
 80030de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4419      	add	r1, r3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4403      	add	r3, r0
 80030f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030f8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d114      	bne.n	800312a <PCD_EP_OutXfrComplete_int+0x16a>
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d108      	bne.n	800312a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003122:	461a      	mov	r2, r3
 8003124:	2101      	movs	r1, #1
 8003126:	f002 fdf9 	bl	8005d1c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	4619      	mov	r1, r3
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f004 fd81 	bl	8007c38 <HAL_PCD_DataOutStageCallback>
 8003136:	e046      	b.n	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a26      	ldr	r2, [pc, #152]	; (80031d4 <PCD_EP_OutXfrComplete_int+0x214>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d124      	bne.n	800318a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003156:	461a      	mov	r2, r3
 8003158:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800315c:	6093      	str	r3, [r2, #8]
 800315e:	e032      	b.n	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003176:	461a      	mov	r2, r3
 8003178:	2320      	movs	r3, #32
 800317a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	4619      	mov	r1, r3
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f004 fd58 	bl	8007c38 <HAL_PCD_DataOutStageCallback>
 8003188:	e01d      	b.n	80031c6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d114      	bne.n	80031ba <PCD_EP_OutXfrComplete_int+0x1fa>
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d108      	bne.n	80031ba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031b2:	461a      	mov	r2, r3
 80031b4:	2100      	movs	r1, #0
 80031b6:	f002 fdb1 	bl	8005d1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	4619      	mov	r1, r3
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f004 fd39 	bl	8007c38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	4f54300a 	.word	0x4f54300a
 80031d4:	4f54310a 	.word	0x4f54310a

080031d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	333c      	adds	r3, #60	; 0x3c
 80031f0:	3304      	adds	r3, #4
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4a15      	ldr	r2, [pc, #84]	; (8003260 <PCD_EP_OutSetupPacket_int+0x88>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d90e      	bls.n	800322c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003214:	2b00      	cmp	r3, #0
 8003216:	d009      	beq.n	800322c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003224:	461a      	mov	r2, r3
 8003226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f004 fcf1 	bl	8007c14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <PCD_EP_OutSetupPacket_int+0x88>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d90c      	bls.n	8003254 <PCD_EP_OutSetupPacket_int+0x7c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d108      	bne.n	8003254 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800324c:	461a      	mov	r2, r3
 800324e:	2101      	movs	r1, #1
 8003250:	f002 fd64 	bl	8005d1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	4f54300a 	.word	0x4f54300a

08003264 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
 8003270:	4613      	mov	r3, r2
 8003272:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d107      	bne.n	8003292 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003282:	883b      	ldrh	r3, [r7, #0]
 8003284:	0419      	lsls	r1, r3, #16
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	430a      	orrs	r2, r1
 800328e:	629a      	str	r2, [r3, #40]	; 0x28
 8003290:	e028      	b.n	80032e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	4413      	add	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]
 80032a4:	e00d      	b.n	80032c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	3340      	adds	r3, #64	; 0x40
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	0c1b      	lsrs	r3, r3, #16
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	4413      	add	r3, r2
 80032ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	3301      	adds	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d3ec      	bcc.n	80032a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032cc:	883b      	ldrh	r3, [r7, #0]
 80032ce:	0418      	lsls	r0, r3, #16
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	78fb      	ldrb	r3, [r7, #3]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	4302      	orrs	r2, r0
 80032dc:	3340      	adds	r3, #64	; 0x40
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	887a      	ldrh	r2, [r7, #2]
 8003304:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e264      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d075      	beq.n	8003436 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334a:	4ba3      	ldr	r3, [pc, #652]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b04      	cmp	r3, #4
 8003354:	d00c      	beq.n	8003370 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003356:	4ba0      	ldr	r3, [pc, #640]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800335e:	2b08      	cmp	r3, #8
 8003360:	d112      	bne.n	8003388 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003362:	4b9d      	ldr	r3, [pc, #628]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800336a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800336e:	d10b      	bne.n	8003388 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	4b99      	ldr	r3, [pc, #612]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d05b      	beq.n	8003434 <HAL_RCC_OscConfig+0x108>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d157      	bne.n	8003434 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e23f      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003390:	d106      	bne.n	80033a0 <HAL_RCC_OscConfig+0x74>
 8003392:	4b91      	ldr	r3, [pc, #580]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a90      	ldr	r2, [pc, #576]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e01d      	b.n	80033dc <HAL_RCC_OscConfig+0xb0>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x98>
 80033aa:	4b8b      	ldr	r3, [pc, #556]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a8a      	ldr	r2, [pc, #552]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	4b88      	ldr	r3, [pc, #544]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a87      	ldr	r2, [pc, #540]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0xb0>
 80033c4:	4b84      	ldr	r3, [pc, #528]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a83      	ldr	r2, [pc, #524]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b81      	ldr	r3, [pc, #516]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a80      	ldr	r2, [pc, #512]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e4:	f7fd fbc8 	bl	8000b78 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fd fbc4 	bl	8000b78 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e204      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b76      	ldr	r3, [pc, #472]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0xc0>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7fd fbb4 	bl	8000b78 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003414:	f7fd fbb0 	bl	8000b78 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e1f0      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	4b6c      	ldr	r3, [pc, #432]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0xe8>
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d063      	beq.n	800350a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003442:	4b65      	ldr	r3, [pc, #404]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00b      	beq.n	8003466 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344e:	4b62      	ldr	r3, [pc, #392]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003456:	2b08      	cmp	r3, #8
 8003458:	d11c      	bne.n	8003494 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345a:	4b5f      	ldr	r3, [pc, #380]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d116      	bne.n	8003494 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003466:	4b5c      	ldr	r3, [pc, #368]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_RCC_OscConfig+0x152>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d001      	beq.n	800347e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e1c4      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347e:	4b56      	ldr	r3, [pc, #344]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4952      	ldr	r1, [pc, #328]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 800348e:	4313      	orrs	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	e03a      	b.n	800350a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d020      	beq.n	80034de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800349c:	4b4f      	ldr	r3, [pc, #316]	; (80035dc <HAL_RCC_OscConfig+0x2b0>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7fd fb69 	bl	8000b78 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034aa:	f7fd fb65 	bl	8000b78 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e1a5      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034bc:	4b46      	ldr	r3, [pc, #280]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	4b43      	ldr	r3, [pc, #268]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4940      	ldr	r1, [pc, #256]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	600b      	str	r3, [r1, #0]
 80034dc:	e015      	b.n	800350a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034de:	4b3f      	ldr	r3, [pc, #252]	; (80035dc <HAL_RCC_OscConfig+0x2b0>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fd fb48 	bl	8000b78 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ec:	f7fd fb44 	bl	8000b78 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e184      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d030      	beq.n	8003578 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d016      	beq.n	800354c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351e:	4b30      	ldr	r3, [pc, #192]	; (80035e0 <HAL_RCC_OscConfig+0x2b4>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003524:	f7fd fb28 	bl	8000b78 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800352c:	f7fd fb24 	bl	8000b78 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e164      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353e:	4b26      	ldr	r3, [pc, #152]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 8003540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f0      	beq.n	800352c <HAL_RCC_OscConfig+0x200>
 800354a:	e015      	b.n	8003578 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800354c:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <HAL_RCC_OscConfig+0x2b4>)
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003552:	f7fd fb11 	bl	8000b78 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800355a:	f7fd fb0d 	bl	8000b78 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e14d      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356c:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 800356e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f0      	bne.n	800355a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80a0 	beq.w	80036c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003586:	2300      	movs	r3, #0
 8003588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358a:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10f      	bne.n	80035b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	4a0e      	ldr	r2, [pc, #56]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80035a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a4:	6413      	str	r3, [r2, #64]	; 0x40
 80035a6:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b2:	2301      	movs	r3, #1
 80035b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCC_OscConfig+0x2b8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d121      	bne.n	8003606 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c2:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <HAL_RCC_OscConfig+0x2b8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a07      	ldr	r2, [pc, #28]	; (80035e4 <HAL_RCC_OscConfig+0x2b8>)
 80035c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ce:	f7fd fad3 	bl	8000b78 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	e011      	b.n	80035fa <HAL_RCC_OscConfig+0x2ce>
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800
 80035dc:	42470000 	.word	0x42470000
 80035e0:	42470e80 	.word	0x42470e80
 80035e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e8:	f7fd fac6 	bl	8000b78 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e106      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	4b85      	ldr	r3, [pc, #532]	; (8003810 <HAL_RCC_OscConfig+0x4e4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d106      	bne.n	800361c <HAL_RCC_OscConfig+0x2f0>
 800360e:	4b81      	ldr	r3, [pc, #516]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 8003610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003612:	4a80      	ldr	r2, [pc, #512]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6713      	str	r3, [r2, #112]	; 0x70
 800361a:	e01c      	b.n	8003656 <HAL_RCC_OscConfig+0x32a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b05      	cmp	r3, #5
 8003622:	d10c      	bne.n	800363e <HAL_RCC_OscConfig+0x312>
 8003624:	4b7b      	ldr	r3, [pc, #492]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a7a      	ldr	r2, [pc, #488]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 800362a:	f043 0304 	orr.w	r3, r3, #4
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
 8003630:	4b78      	ldr	r3, [pc, #480]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	4a77      	ldr	r2, [pc, #476]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	6713      	str	r3, [r2, #112]	; 0x70
 800363c:	e00b      	b.n	8003656 <HAL_RCC_OscConfig+0x32a>
 800363e:	4b75      	ldr	r3, [pc, #468]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	4a74      	ldr	r2, [pc, #464]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 8003644:	f023 0301 	bic.w	r3, r3, #1
 8003648:	6713      	str	r3, [r2, #112]	; 0x70
 800364a:	4b72      	ldr	r3, [pc, #456]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	4a71      	ldr	r2, [pc, #452]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 8003650:	f023 0304 	bic.w	r3, r3, #4
 8003654:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d015      	beq.n	800368a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365e:	f7fd fa8b 	bl	8000b78 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003664:	e00a      	b.n	800367c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003666:	f7fd fa87 	bl	8000b78 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	f241 3288 	movw	r2, #5000	; 0x1388
 8003674:	4293      	cmp	r3, r2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e0c5      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367c:	4b65      	ldr	r3, [pc, #404]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0ee      	beq.n	8003666 <HAL_RCC_OscConfig+0x33a>
 8003688:	e014      	b.n	80036b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368a:	f7fd fa75 	bl	8000b78 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003690:	e00a      	b.n	80036a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003692:	f7fd fa71 	bl	8000b78 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e0af      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a8:	4b5a      	ldr	r3, [pc, #360]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1ee      	bne.n	8003692 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036b4:	7dfb      	ldrb	r3, [r7, #23]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d105      	bne.n	80036c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ba:	4b56      	ldr	r3, [pc, #344]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	4a55      	ldr	r2, [pc, #340]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 80036c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 809b 	beq.w	8003806 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036d0:	4b50      	ldr	r3, [pc, #320]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 030c 	and.w	r3, r3, #12
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d05c      	beq.n	8003796 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d141      	bne.n	8003768 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e4:	4b4c      	ldr	r3, [pc, #304]	; (8003818 <HAL_RCC_OscConfig+0x4ec>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fd fa45 	bl	8000b78 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f2:	f7fd fa41 	bl	8000b78 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e081      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003704:	4b43      	ldr	r3, [pc, #268]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	019b      	lsls	r3, r3, #6
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003726:	085b      	lsrs	r3, r3, #1
 8003728:	3b01      	subs	r3, #1
 800372a:	041b      	lsls	r3, r3, #16
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	061b      	lsls	r3, r3, #24
 8003734:	4937      	ldr	r1, [pc, #220]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 8003736:	4313      	orrs	r3, r2
 8003738:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800373a:	4b37      	ldr	r3, [pc, #220]	; (8003818 <HAL_RCC_OscConfig+0x4ec>)
 800373c:	2201      	movs	r2, #1
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003740:	f7fd fa1a 	bl	8000b78 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003748:	f7fd fa16 	bl	8000b78 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e056      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375a:	4b2e      	ldr	r3, [pc, #184]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x41c>
 8003766:	e04e      	b.n	8003806 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003768:	4b2b      	ldr	r3, [pc, #172]	; (8003818 <HAL_RCC_OscConfig+0x4ec>)
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376e:	f7fd fa03 	bl	8000b78 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003776:	f7fd f9ff 	bl	8000b78 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e03f      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003788:	4b22      	ldr	r3, [pc, #136]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f0      	bne.n	8003776 <HAL_RCC_OscConfig+0x44a>
 8003794:	e037      	b.n	8003806 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e032      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037a2:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <HAL_RCC_OscConfig+0x4e8>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d028      	beq.n	8003802 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d121      	bne.n	8003802 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d11a      	bne.n	8003802 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037d2:	4013      	ands	r3, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037da:	4293      	cmp	r3, r2
 80037dc:	d111      	bne.n	8003802 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	3b01      	subs	r3, #1
 80037ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037fe:	429a      	cmp	r2, r3
 8003800:	d001      	beq.n	8003806 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40007000 	.word	0x40007000
 8003814:	40023800 	.word	0x40023800
 8003818:	42470060 	.word	0x42470060

0800381c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0cc      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003830:	4b68      	ldr	r3, [pc, #416]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d90c      	bls.n	8003858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b65      	ldr	r3, [pc, #404]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003846:	4b63      	ldr	r3, [pc, #396]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0b8      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d020      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003870:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	4a58      	ldr	r2, [pc, #352]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800387a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0308 	and.w	r3, r3, #8
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003888:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	4a52      	ldr	r2, [pc, #328]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003894:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	494d      	ldr	r1, [pc, #308]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d044      	beq.n	800393c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d119      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e07f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d003      	beq.n	80038da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038da:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e06f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ea:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e067      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4934      	ldr	r1, [pc, #208]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800390c:	f7fd f934 	bl	8000b78 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	e00a      	b.n	800392a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003914:	f7fd f930 	bl	8000b78 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e04f      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 020c 	and.w	r2, r3, #12
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	429a      	cmp	r2, r3
 800393a:	d1eb      	bne.n	8003914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800393c:	4b25      	ldr	r3, [pc, #148]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d20c      	bcs.n	8003964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b22      	ldr	r3, [pc, #136]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e032      	b.n	80039ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003970:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	4916      	ldr	r1, [pc, #88]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	490e      	ldr	r1, [pc, #56]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039a2:	f000 f821 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 80039a6:	4602      	mov	r2, r0
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	490a      	ldr	r1, [pc, #40]	; (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 80039b4:	5ccb      	ldrb	r3, [r1, r3]
 80039b6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ba:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80039bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd f894 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023c00 	.word	0x40023c00
 80039d8:	40023800 	.word	0x40023800
 80039dc:	0800824c 	.word	0x0800824c
 80039e0:	20000000 	.word	0x20000000
 80039e4:	20000004 	.word	0x20000004

080039e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	607b      	str	r3, [r7, #4]
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	2300      	movs	r3, #0
 80039fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a00:	4b67      	ldr	r3, [pc, #412]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 030c 	and.w	r3, r3, #12
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d00d      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0x40>
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	f200 80bd 	bhi.w	8003b8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x34>
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d003      	beq.n	8003a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a1a:	e0b7      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a1c:	4b61      	ldr	r3, [pc, #388]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a1e:	60bb      	str	r3, [r7, #8]
       break;
 8003a20:	e0b7      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a22:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a24:	60bb      	str	r3, [r7, #8]
      break;
 8003a26:	e0b4      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a28:	4b5d      	ldr	r3, [pc, #372]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a30:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a32:	4b5b      	ldr	r3, [pc, #364]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d04d      	beq.n	8003ada <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3e:	4b58      	ldr	r3, [pc, #352]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	099b      	lsrs	r3, r3, #6
 8003a44:	461a      	mov	r2, r3
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a4e:	f04f 0100 	mov.w	r1, #0
 8003a52:	ea02 0800 	and.w	r8, r2, r0
 8003a56:	ea03 0901 	and.w	r9, r3, r1
 8003a5a:	4640      	mov	r0, r8
 8003a5c:	4649      	mov	r1, r9
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	014b      	lsls	r3, r1, #5
 8003a68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a6c:	0142      	lsls	r2, r0, #5
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	ebb0 0008 	subs.w	r0, r0, r8
 8003a76:	eb61 0109 	sbc.w	r1, r1, r9
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	018b      	lsls	r3, r1, #6
 8003a84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a88:	0182      	lsls	r2, r0, #6
 8003a8a:	1a12      	subs	r2, r2, r0
 8003a8c:	eb63 0301 	sbc.w	r3, r3, r1
 8003a90:	f04f 0000 	mov.w	r0, #0
 8003a94:	f04f 0100 	mov.w	r1, #0
 8003a98:	00d9      	lsls	r1, r3, #3
 8003a9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a9e:	00d0      	lsls	r0, r2, #3
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	eb12 0208 	adds.w	r2, r2, r8
 8003aa8:	eb43 0309 	adc.w	r3, r3, r9
 8003aac:	f04f 0000 	mov.w	r0, #0
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	0259      	lsls	r1, r3, #9
 8003ab6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003aba:	0250      	lsls	r0, r2, #9
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	f7fc fb7c 	bl	80001c8 <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e04a      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ada:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	099b      	lsrs	r3, r3, #6
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aea:	f04f 0100 	mov.w	r1, #0
 8003aee:	ea02 0400 	and.w	r4, r2, r0
 8003af2:	ea03 0501 	and.w	r5, r3, r1
 8003af6:	4620      	mov	r0, r4
 8003af8:	4629      	mov	r1, r5
 8003afa:	f04f 0200 	mov.w	r2, #0
 8003afe:	f04f 0300 	mov.w	r3, #0
 8003b02:	014b      	lsls	r3, r1, #5
 8003b04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b08:	0142      	lsls	r2, r0, #5
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	1b00      	subs	r0, r0, r4
 8003b10:	eb61 0105 	sbc.w	r1, r1, r5
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	018b      	lsls	r3, r1, #6
 8003b1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b22:	0182      	lsls	r2, r0, #6
 8003b24:	1a12      	subs	r2, r2, r0
 8003b26:	eb63 0301 	sbc.w	r3, r3, r1
 8003b2a:	f04f 0000 	mov.w	r0, #0
 8003b2e:	f04f 0100 	mov.w	r1, #0
 8003b32:	00d9      	lsls	r1, r3, #3
 8003b34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b38:	00d0      	lsls	r0, r2, #3
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	1912      	adds	r2, r2, r4
 8003b40:	eb45 0303 	adc.w	r3, r5, r3
 8003b44:	f04f 0000 	mov.w	r0, #0
 8003b48:	f04f 0100 	mov.w	r1, #0
 8003b4c:	0299      	lsls	r1, r3, #10
 8003b4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b52:	0290      	lsls	r0, r2, #10
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4610      	mov	r0, r2
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	f7fc fb30 	bl	80001c8 <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	60bb      	str	r3, [r7, #8]
      break;
 8003b8a:	e002      	b.n	8003b92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b8e:	60bb      	str	r3, [r7, #8]
      break;
 8003b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b92:	68bb      	ldr	r3, [r7, #8]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	00f42400 	.word	0x00f42400
 8003ba8:	007a1200 	.word	0x007a1200

08003bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb0:	4b03      	ldr	r3, [pc, #12]	; (8003bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	20000000 	.word	0x20000000

08003bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e041      	b.n	8003c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fc fec4 	bl	8000978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4619      	mov	r1, r3
 8003c02:	4610      	mov	r0, r2
 8003c04:	f000 fa6a 	bl	80040dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b082      	sub	sp, #8
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e041      	b.n	8003cf8 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f839 	bl	8003d00 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2202      	movs	r2, #2
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f000 fa1b 	bl	80040dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d109      	bne.n	8003d38 <HAL_TIM_OC_Start+0x24>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	bf14      	ite	ne
 8003d30:	2301      	movne	r3, #1
 8003d32:	2300      	moveq	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	e022      	b.n	8003d7e <HAL_TIM_OC_Start+0x6a>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d109      	bne.n	8003d52 <HAL_TIM_OC_Start+0x3e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	bf14      	ite	ne
 8003d4a:	2301      	movne	r3, #1
 8003d4c:	2300      	moveq	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	e015      	b.n	8003d7e <HAL_TIM_OC_Start+0x6a>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d109      	bne.n	8003d6c <HAL_TIM_OC_Start+0x58>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	bf14      	ite	ne
 8003d64:	2301      	movne	r3, #1
 8003d66:	2300      	moveq	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	e008      	b.n	8003d7e <HAL_TIM_OC_Start+0x6a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	bf14      	ite	ne
 8003d78:	2301      	movne	r3, #1
 8003d7a:	2300      	moveq	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e07c      	b.n	8003e80 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <HAL_TIM_OC_Start+0x82>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d94:	e013      	b.n	8003dbe <HAL_TIM_OC_Start+0xaa>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d104      	bne.n	8003da6 <HAL_TIM_OC_Start+0x92>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003da4:	e00b      	b.n	8003dbe <HAL_TIM_OC_Start+0xaa>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d104      	bne.n	8003db6 <HAL_TIM_OC_Start+0xa2>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db4:	e003      	b.n	8003dbe <HAL_TIM_OC_Start+0xaa>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2202      	movs	r2, #2
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	6839      	ldr	r1, [r7, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fc72 	bl	80046b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2d      	ldr	r2, [pc, #180]	; (8003e88 <HAL_TIM_OC_Start+0x174>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_TIM_OC_Start+0xcc>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a2c      	ldr	r2, [pc, #176]	; (8003e8c <HAL_TIM_OC_Start+0x178>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d101      	bne.n	8003de4 <HAL_TIM_OC_Start+0xd0>
 8003de0:	2301      	movs	r3, #1
 8003de2:	e000      	b.n	8003de6 <HAL_TIM_OC_Start+0xd2>
 8003de4:	2300      	movs	r3, #0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d007      	beq.n	8003dfa <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a22      	ldr	r2, [pc, #136]	; (8003e88 <HAL_TIM_OC_Start+0x174>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d022      	beq.n	8003e4a <HAL_TIM_OC_Start+0x136>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d01d      	beq.n	8003e4a <HAL_TIM_OC_Start+0x136>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a1f      	ldr	r2, [pc, #124]	; (8003e90 <HAL_TIM_OC_Start+0x17c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d018      	beq.n	8003e4a <HAL_TIM_OC_Start+0x136>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1d      	ldr	r2, [pc, #116]	; (8003e94 <HAL_TIM_OC_Start+0x180>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <HAL_TIM_OC_Start+0x136>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <HAL_TIM_OC_Start+0x184>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00e      	beq.n	8003e4a <HAL_TIM_OC_Start+0x136>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a16      	ldr	r2, [pc, #88]	; (8003e8c <HAL_TIM_OC_Start+0x178>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d009      	beq.n	8003e4a <HAL_TIM_OC_Start+0x136>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a18      	ldr	r2, [pc, #96]	; (8003e9c <HAL_TIM_OC_Start+0x188>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_TIM_OC_Start+0x136>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <HAL_TIM_OC_Start+0x18c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d111      	bne.n	8003e6e <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b06      	cmp	r3, #6
 8003e5a:	d010      	beq.n	8003e7e <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e6c:	e007      	b.n	8003e7e <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40010400 	.word	0x40010400
 8003e90:	40000400 	.word	0x40000400
 8003e94:	40000800 	.word	0x40000800
 8003e98:	40000c00 	.word	0x40000c00
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40001800 	.word	0x40001800

08003ea4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_TIM_OC_ConfigChannel+0x1a>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e046      	b.n	8003f4c <HAL_TIM_OC_ConfigChannel+0xa8>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b0c      	cmp	r3, #12
 8003eca:	d839      	bhi.n	8003f40 <HAL_TIM_OC_ConfigChannel+0x9c>
 8003ecc:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed2:	bf00      	nop
 8003ed4:	08003f09 	.word	0x08003f09
 8003ed8:	08003f41 	.word	0x08003f41
 8003edc:	08003f41 	.word	0x08003f41
 8003ee0:	08003f41 	.word	0x08003f41
 8003ee4:	08003f17 	.word	0x08003f17
 8003ee8:	08003f41 	.word	0x08003f41
 8003eec:	08003f41 	.word	0x08003f41
 8003ef0:	08003f41 	.word	0x08003f41
 8003ef4:	08003f25 	.word	0x08003f25
 8003ef8:	08003f41 	.word	0x08003f41
 8003efc:	08003f41 	.word	0x08003f41
 8003f00:	08003f41 	.word	0x08003f41
 8003f04:	08003f33 	.word	0x08003f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f984 	bl	800421c <TIM_OC1_SetConfig>
      break;
 8003f14:	e015      	b.n	8003f42 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 f9ed 	bl	80042fc <TIM_OC2_SetConfig>
      break;
 8003f22:	e00e      	b.n	8003f42 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fa5c 	bl	80043e8 <TIM_OC3_SetConfig>
      break;
 8003f30:	e007      	b.n	8003f42 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68b9      	ldr	r1, [r7, #8]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fac9 	bl	80044d0 <TIM_OC4_SetConfig>
      break;
 8003f3e:	e000      	b.n	8003f42 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8003f40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_TIM_ConfigClockSource+0x18>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e0b3      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x180>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa4:	d03e      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0xd0>
 8003fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003faa:	f200 8087 	bhi.w	80040bc <HAL_TIM_ConfigClockSource+0x168>
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb2:	f000 8085 	beq.w	80040c0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fba:	d87f      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x168>
 8003fbc:	2b70      	cmp	r3, #112	; 0x70
 8003fbe:	d01a      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0xa2>
 8003fc0:	2b70      	cmp	r3, #112	; 0x70
 8003fc2:	d87b      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x168>
 8003fc4:	2b60      	cmp	r3, #96	; 0x60
 8003fc6:	d050      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x116>
 8003fc8:	2b60      	cmp	r3, #96	; 0x60
 8003fca:	d877      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x168>
 8003fcc:	2b50      	cmp	r3, #80	; 0x50
 8003fce:	d03c      	beq.n	800404a <HAL_TIM_ConfigClockSource+0xf6>
 8003fd0:	2b50      	cmp	r3, #80	; 0x50
 8003fd2:	d873      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x168>
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d058      	beq.n	800408a <HAL_TIM_ConfigClockSource+0x136>
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d86f      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x168>
 8003fdc:	2b30      	cmp	r3, #48	; 0x30
 8003fde:	d064      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x156>
 8003fe0:	2b30      	cmp	r3, #48	; 0x30
 8003fe2:	d86b      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x168>
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d060      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x156>
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d867      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x168>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d05c      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x156>
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d05a      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ff4:	e062      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6899      	ldr	r1, [r3, #8]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f000 fb33 	bl	8004670 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004018:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	609a      	str	r2, [r3, #8]
      break;
 8004022:	e04e      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f000 fb1c 	bl	8004670 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004046:	609a      	str	r2, [r3, #8]
      break;
 8004048:	e03b      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6859      	ldr	r1, [r3, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	461a      	mov	r2, r3
 8004058:	f000 fa90 	bl	800457c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2150      	movs	r1, #80	; 0x50
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fae9 	bl	800463a <TIM_ITRx_SetConfig>
      break;
 8004068:	e02b      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6859      	ldr	r1, [r3, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	461a      	mov	r2, r3
 8004078:	f000 faaf 	bl	80045da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2160      	movs	r1, #96	; 0x60
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fad9 	bl	800463a <TIM_ITRx_SetConfig>
      break;
 8004088:	e01b      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	461a      	mov	r2, r3
 8004098:	f000 fa70 	bl	800457c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2140      	movs	r1, #64	; 0x40
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fac9 	bl	800463a <TIM_ITRx_SetConfig>
      break;
 80040a8:	e00b      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f000 fac0 	bl	800463a <TIM_ITRx_SetConfig>
        break;
 80040ba:	e002      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040bc:	bf00      	nop
 80040be:	e000      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a40      	ldr	r2, [pc, #256]	; (80041f0 <TIM_Base_SetConfig+0x114>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d013      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fa:	d00f      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3d      	ldr	r2, [pc, #244]	; (80041f4 <TIM_Base_SetConfig+0x118>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00b      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3c      	ldr	r2, [pc, #240]	; (80041f8 <TIM_Base_SetConfig+0x11c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d007      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3b      	ldr	r2, [pc, #236]	; (80041fc <TIM_Base_SetConfig+0x120>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a3a      	ldr	r2, [pc, #232]	; (8004200 <TIM_Base_SetConfig+0x124>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d108      	bne.n	800412e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2f      	ldr	r2, [pc, #188]	; (80041f0 <TIM_Base_SetConfig+0x114>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d02b      	beq.n	800418e <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413c:	d027      	beq.n	800418e <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2c      	ldr	r2, [pc, #176]	; (80041f4 <TIM_Base_SetConfig+0x118>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d023      	beq.n	800418e <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a2b      	ldr	r2, [pc, #172]	; (80041f8 <TIM_Base_SetConfig+0x11c>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01f      	beq.n	800418e <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2a      	ldr	r2, [pc, #168]	; (80041fc <TIM_Base_SetConfig+0x120>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d01b      	beq.n	800418e <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a29      	ldr	r2, [pc, #164]	; (8004200 <TIM_Base_SetConfig+0x124>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d017      	beq.n	800418e <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a28      	ldr	r2, [pc, #160]	; (8004204 <TIM_Base_SetConfig+0x128>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d013      	beq.n	800418e <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a27      	ldr	r2, [pc, #156]	; (8004208 <TIM_Base_SetConfig+0x12c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00f      	beq.n	800418e <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a26      	ldr	r2, [pc, #152]	; (800420c <TIM_Base_SetConfig+0x130>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d00b      	beq.n	800418e <TIM_Base_SetConfig+0xb2>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a25      	ldr	r2, [pc, #148]	; (8004210 <TIM_Base_SetConfig+0x134>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d007      	beq.n	800418e <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a24      	ldr	r2, [pc, #144]	; (8004214 <TIM_Base_SetConfig+0x138>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d003      	beq.n	800418e <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a23      	ldr	r2, [pc, #140]	; (8004218 <TIM_Base_SetConfig+0x13c>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d108      	bne.n	80041a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a0a      	ldr	r2, [pc, #40]	; (80041f0 <TIM_Base_SetConfig+0x114>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_Base_SetConfig+0xf8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a0c      	ldr	r2, [pc, #48]	; (8004200 <TIM_Base_SetConfig+0x124>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d103      	bne.n	80041dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	691a      	ldr	r2, [r3, #16]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	615a      	str	r2, [r3, #20]
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40010000 	.word	0x40010000
 80041f4:	40000400 	.word	0x40000400
 80041f8:	40000800 	.word	0x40000800
 80041fc:	40000c00 	.word	0x40000c00
 8004200:	40010400 	.word	0x40010400
 8004204:	40014000 	.word	0x40014000
 8004208:	40014400 	.word	0x40014400
 800420c:	40014800 	.word	0x40014800
 8004210:	40001800 	.word	0x40001800
 8004214:	40001c00 	.word	0x40001c00
 8004218:	40002000 	.word	0x40002000

0800421c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f023 0201 	bic.w	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0303 	bic.w	r3, r3, #3
 8004252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f023 0302 	bic.w	r3, r3, #2
 8004264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a20      	ldr	r2, [pc, #128]	; (80042f4 <TIM_OC1_SetConfig+0xd8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <TIM_OC1_SetConfig+0x64>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a1f      	ldr	r2, [pc, #124]	; (80042f8 <TIM_OC1_SetConfig+0xdc>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10c      	bne.n	800429a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0308 	bic.w	r3, r3, #8
 8004286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f023 0304 	bic.w	r3, r3, #4
 8004298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a15      	ldr	r2, [pc, #84]	; (80042f4 <TIM_OC1_SetConfig+0xd8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d003      	beq.n	80042aa <TIM_OC1_SetConfig+0x8e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <TIM_OC1_SetConfig+0xdc>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d111      	bne.n	80042ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	621a      	str	r2, [r3, #32]
}
 80042e8:	bf00      	nop
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	40010000 	.word	0x40010000
 80042f8:	40010400 	.word	0x40010400

080042fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f023 0210 	bic.w	r2, r3, #16
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 0320 	bic.w	r3, r3, #32
 8004346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a22      	ldr	r2, [pc, #136]	; (80043e0 <TIM_OC2_SetConfig+0xe4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d003      	beq.n	8004364 <TIM_OC2_SetConfig+0x68>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a21      	ldr	r2, [pc, #132]	; (80043e4 <TIM_OC2_SetConfig+0xe8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d10d      	bne.n	8004380 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800436a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800437e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a17      	ldr	r2, [pc, #92]	; (80043e0 <TIM_OC2_SetConfig+0xe4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d003      	beq.n	8004390 <TIM_OC2_SetConfig+0x94>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a16      	ldr	r2, [pc, #88]	; (80043e4 <TIM_OC2_SetConfig+0xe8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d113      	bne.n	80043b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800439e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	621a      	str	r2, [r3, #32]
}
 80043d2:	bf00      	nop
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40010000 	.word	0x40010000
 80043e4:	40010400 	.word	0x40010400

080043e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0303 	bic.w	r3, r3, #3
 800441e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a21      	ldr	r2, [pc, #132]	; (80044c8 <TIM_OC3_SetConfig+0xe0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_OC3_SetConfig+0x66>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a20      	ldr	r2, [pc, #128]	; (80044cc <TIM_OC3_SetConfig+0xe4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10d      	bne.n	800446a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a16      	ldr	r2, [pc, #88]	; (80044c8 <TIM_OC3_SetConfig+0xe0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d003      	beq.n	800447a <TIM_OC3_SetConfig+0x92>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a15      	ldr	r2, [pc, #84]	; (80044cc <TIM_OC3_SetConfig+0xe4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d113      	bne.n	80044a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	621a      	str	r2, [r3, #32]
}
 80044bc:	bf00      	nop
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40010400 	.word	0x40010400

080044d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800451a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	031b      	lsls	r3, r3, #12
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a12      	ldr	r2, [pc, #72]	; (8004574 <TIM_OC4_SetConfig+0xa4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d003      	beq.n	8004538 <TIM_OC4_SetConfig+0x68>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a11      	ldr	r2, [pc, #68]	; (8004578 <TIM_OC4_SetConfig+0xa8>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d109      	bne.n	800454c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800453e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	019b      	lsls	r3, r3, #6
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40010000 	.word	0x40010000
 8004578:	40010400 	.word	0x40010400

0800457c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	f023 0201 	bic.w	r2, r3, #1
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f023 030a 	bic.w	r3, r3, #10
 80045b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045da:	b480      	push	{r7}
 80045dc:	b087      	sub	sp, #28
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 0210 	bic.w	r2, r3, #16
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	031b      	lsls	r3, r3, #12
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004616:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	f043 0307 	orr.w	r3, r3, #7
 800465c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	609a      	str	r2, [r3, #8]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800468a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	021a      	lsls	r2, r3, #8
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	431a      	orrs	r2, r3
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	4313      	orrs	r3, r2
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	4313      	orrs	r3, r2
 800469c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	609a      	str	r2, [r3, #8]
}
 80046a4:	bf00      	nop
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 031f 	and.w	r3, r3, #31
 80046c2:	2201      	movs	r2, #1
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1a      	ldr	r2, [r3, #32]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	43db      	mvns	r3, r3
 80046d2:	401a      	ands	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a1a      	ldr	r2, [r3, #32]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	fa01 f303 	lsl.w	r3, r1, r3
 80046e8:	431a      	orrs	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	621a      	str	r2, [r3, #32]
}
 80046ee:	bf00      	nop
 80046f0:	371c      	adds	r7, #28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
	...

080046fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004710:	2302      	movs	r3, #2
 8004712:	e05a      	b.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800473a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a21      	ldr	r2, [pc, #132]	; (80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d022      	beq.n	800479e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004760:	d01d      	beq.n	800479e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1d      	ldr	r2, [pc, #116]	; (80047dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d018      	beq.n	800479e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1b      	ldr	r2, [pc, #108]	; (80047e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d013      	beq.n	800479e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1a      	ldr	r2, [pc, #104]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00e      	beq.n	800479e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d009      	beq.n	800479e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a17      	ldr	r2, [pc, #92]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d004      	beq.n	800479e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a15      	ldr	r2, [pc, #84]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d10c      	bne.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40010400 	.word	0x40010400
 80047ec:	40014000 	.word	0x40014000
 80047f0:	40001800 	.word	0x40001800

080047f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047f4:	b084      	sub	sp, #16
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b084      	sub	sp, #16
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	f107 001c 	add.w	r0, r7, #28
 8004802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	2b01      	cmp	r3, #1
 800480a:	d122      	bne.n	8004852 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f001 fac6 	bl	8005dd8 <USB_CoreReset>
 800484c:	4603      	mov	r3, r0
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e01a      	b.n	8004888 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f001 faba 	bl	8005dd8 <USB_CoreReset>
 8004864:	4603      	mov	r3, r0
 8004866:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
 800487a:	e005      	b.n	8004888 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	2b01      	cmp	r3, #1
 800488c:	d10b      	bne.n	80048a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f043 0206 	orr.w	r2, r3, #6
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f043 0220 	orr.w	r2, r3, #32
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048b2:	b004      	add	sp, #16
 80048b4:	4770      	bx	lr
	...

080048b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	4613      	mov	r3, r2
 80048c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d165      	bne.n	8004998 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4a41      	ldr	r2, [pc, #260]	; (80049d4 <USB_SetTurnaroundTime+0x11c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d906      	bls.n	80048e2 <USB_SetTurnaroundTime+0x2a>
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4a40      	ldr	r2, [pc, #256]	; (80049d8 <USB_SetTurnaroundTime+0x120>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d202      	bcs.n	80048e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048dc:	230f      	movs	r3, #15
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	e062      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4a3c      	ldr	r2, [pc, #240]	; (80049d8 <USB_SetTurnaroundTime+0x120>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d306      	bcc.n	80048f8 <USB_SetTurnaroundTime+0x40>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4a3b      	ldr	r2, [pc, #236]	; (80049dc <USB_SetTurnaroundTime+0x124>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d202      	bcs.n	80048f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048f2:	230e      	movs	r3, #14
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	e057      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4a38      	ldr	r2, [pc, #224]	; (80049dc <USB_SetTurnaroundTime+0x124>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d306      	bcc.n	800490e <USB_SetTurnaroundTime+0x56>
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4a37      	ldr	r2, [pc, #220]	; (80049e0 <USB_SetTurnaroundTime+0x128>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d202      	bcs.n	800490e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004908:	230d      	movs	r3, #13
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	e04c      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4a33      	ldr	r2, [pc, #204]	; (80049e0 <USB_SetTurnaroundTime+0x128>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d306      	bcc.n	8004924 <USB_SetTurnaroundTime+0x6c>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4a32      	ldr	r2, [pc, #200]	; (80049e4 <USB_SetTurnaroundTime+0x12c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d802      	bhi.n	8004924 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800491e:	230c      	movs	r3, #12
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	e041      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4a2f      	ldr	r2, [pc, #188]	; (80049e4 <USB_SetTurnaroundTime+0x12c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d906      	bls.n	800493a <USB_SetTurnaroundTime+0x82>
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4a2e      	ldr	r2, [pc, #184]	; (80049e8 <USB_SetTurnaroundTime+0x130>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d802      	bhi.n	800493a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004934:	230b      	movs	r3, #11
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	e036      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4a2a      	ldr	r2, [pc, #168]	; (80049e8 <USB_SetTurnaroundTime+0x130>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d906      	bls.n	8004950 <USB_SetTurnaroundTime+0x98>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	4a29      	ldr	r2, [pc, #164]	; (80049ec <USB_SetTurnaroundTime+0x134>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d802      	bhi.n	8004950 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800494a:	230a      	movs	r3, #10
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	e02b      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4a26      	ldr	r2, [pc, #152]	; (80049ec <USB_SetTurnaroundTime+0x134>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d906      	bls.n	8004966 <USB_SetTurnaroundTime+0xae>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4a25      	ldr	r2, [pc, #148]	; (80049f0 <USB_SetTurnaroundTime+0x138>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d202      	bcs.n	8004966 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004960:	2309      	movs	r3, #9
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	e020      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4a21      	ldr	r2, [pc, #132]	; (80049f0 <USB_SetTurnaroundTime+0x138>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d306      	bcc.n	800497c <USB_SetTurnaroundTime+0xc4>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4a20      	ldr	r2, [pc, #128]	; (80049f4 <USB_SetTurnaroundTime+0x13c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d802      	bhi.n	800497c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004976:	2308      	movs	r3, #8
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e015      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	4a1d      	ldr	r2, [pc, #116]	; (80049f4 <USB_SetTurnaroundTime+0x13c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d906      	bls.n	8004992 <USB_SetTurnaroundTime+0xda>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4a1c      	ldr	r2, [pc, #112]	; (80049f8 <USB_SetTurnaroundTime+0x140>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d202      	bcs.n	8004992 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800498c:	2307      	movs	r3, #7
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	e00a      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004992:	2306      	movs	r3, #6
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	e007      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d102      	bne.n	80049a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800499e:	2309      	movs	r3, #9
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e001      	b.n	80049a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80049a4:	2309      	movs	r3, #9
 80049a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	029b      	lsls	r3, r3, #10
 80049bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80049c0:	431a      	orrs	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	00d8acbf 	.word	0x00d8acbf
 80049d8:	00e4e1c0 	.word	0x00e4e1c0
 80049dc:	00f42400 	.word	0x00f42400
 80049e0:	01067380 	.word	0x01067380
 80049e4:	011a499f 	.word	0x011a499f
 80049e8:	01312cff 	.word	0x01312cff
 80049ec:	014ca43f 	.word	0x014ca43f
 80049f0:	016e3600 	.word	0x016e3600
 80049f4:	01a6ab1f 	.word	0x01a6ab1f
 80049f8:	01e84800 	.word	0x01e84800

080049fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f043 0201 	orr.w	r2, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f023 0201 	bic.w	r2, r3, #1
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d106      	bne.n	8004a6c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60da      	str	r2, [r3, #12]
 8004a6a:	e00b      	b.n	8004a84 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60da      	str	r2, [r3, #12]
 8004a7e:	e001      	b.n	8004a84 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e003      	b.n	8004a8c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004a84:	2032      	movs	r0, #50	; 0x32
 8004a86:	f7fc f883 	bl	8000b90 <HAL_Delay>

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a94:	b084      	sub	sp, #16
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b086      	sub	sp, #24
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
 8004a9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	e009      	b.n	8004ac8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	3340      	adds	r3, #64	; 0x40
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	2200      	movs	r2, #0
 8004ac0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b0e      	cmp	r3, #14
 8004acc:	d9f2      	bls.n	8004ab4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d11c      	bne.n	8004b0e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ae2:	f043 0302 	orr.w	r3, r3, #2
 8004ae6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	639a      	str	r2, [r3, #56]	; 0x38
 8004b0c:	e00b      	b.n	8004b26 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	2300      	movs	r3, #0
 8004b30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b38:	4619      	mov	r1, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b40:	461a      	mov	r2, r3
 8004b42:	680b      	ldr	r3, [r1, #0]
 8004b44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d10c      	bne.n	8004b66 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d104      	bne.n	8004b5c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b52:	2100      	movs	r1, #0
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f949 	bl	8004dec <USB_SetDevSpeed>
 8004b5a:	e008      	b.n	8004b6e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f944 	bl	8004dec <USB_SetDevSpeed>
 8004b64:	e003      	b.n	8004b6e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b66:	2103      	movs	r1, #3
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f93f 	bl	8004dec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b6e:	2110      	movs	r1, #16
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f8f3 	bl	8004d5c <USB_FlushTxFifo>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f911 	bl	8004da8 <USB_FlushRxFifo>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b96:	461a      	mov	r2, r3
 8004b98:	2300      	movs	r3, #0
 8004b9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bae:	461a      	mov	r2, r3
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	e043      	b.n	8004c42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bd0:	d118      	bne.n	8004c04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be4:	461a      	mov	r2, r3
 8004be6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	e013      	b.n	8004c16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e008      	b.n	8004c16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c10:	461a      	mov	r2, r3
 8004c12:	2300      	movs	r3, #0
 8004c14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c22:	461a      	mov	r2, r3
 8004c24:	2300      	movs	r3, #0
 8004c26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c34:	461a      	mov	r2, r3
 8004c36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d3b7      	bcc.n	8004bba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	613b      	str	r3, [r7, #16]
 8004c4e:	e043      	b.n	8004cd8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c66:	d118      	bne.n	8004c9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	015a      	lsls	r2, r3, #5
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4413      	add	r3, r2
 8004c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	e013      	b.n	8004cac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	461a      	mov	r2, r3
 8004c92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	e008      	b.n	8004cac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	2300      	movs	r3, #0
 8004caa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb8:	461a      	mov	r2, r3
 8004cba:	2300      	movs	r3, #0
 8004cbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d3b7      	bcc.n	8004c50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cf2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d105      	bne.n	8004d14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	f043 0210 	orr.w	r2, r3, #16
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699a      	ldr	r2, [r3, #24]
 8004d18:	4b0f      	ldr	r3, [pc, #60]	; (8004d58 <USB_DevInit+0x2c4>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f043 0208 	orr.w	r2, r3, #8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d107      	bne.n	8004d48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d40:	f043 0304 	orr.w	r3, r3, #4
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d54:	b004      	add	sp, #16
 8004d56:	4770      	bx	lr
 8004d58:	803c3800 	.word	0x803c3800

08004d5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	019b      	lsls	r3, r3, #6
 8004d6e:	f043 0220 	orr.w	r2, r3, #32
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4a09      	ldr	r2, [pc, #36]	; (8004da4 <USB_FlushTxFifo+0x48>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d901      	bls.n	8004d88 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e006      	b.n	8004d96 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f003 0320 	and.w	r3, r3, #32
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d0f0      	beq.n	8004d76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	00030d40 	.word	0x00030d40

08004da8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2210      	movs	r2, #16
 8004db8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a09      	ldr	r2, [pc, #36]	; (8004de8 <USB_FlushRxFifo+0x40>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d901      	bls.n	8004dcc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e006      	b.n	8004dda <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d0f0      	beq.n	8004dba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	00030d40 	.word	0x00030d40

08004dec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	78fb      	ldrb	r3, [r7, #3]
 8004e06:	68f9      	ldr	r1, [r7, #12]
 8004e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b087      	sub	sp, #28
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 0306 	and.w	r3, r3, #6
 8004e36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d102      	bne.n	8004e44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	75fb      	strb	r3, [r7, #23]
 8004e42:	e00a      	b.n	8004e5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d002      	beq.n	8004e50 <USB_GetDevSpeed+0x32>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b06      	cmp	r3, #6
 8004e4e:	d102      	bne.n	8004e56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e50:	2302      	movs	r3, #2
 8004e52:	75fb      	strb	r3, [r7, #23]
 8004e54:	e001      	b.n	8004e5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e56:	230f      	movs	r3, #15
 8004e58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	785b      	ldrb	r3, [r3, #1]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d13a      	bne.n	8004efa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	2101      	movs	r1, #1
 8004e96:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	68f9      	ldr	r1, [r7, #12]
 8004e9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d155      	bne.n	8004f68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	78db      	ldrb	r3, [r3, #3]
 8004ed6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ed8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	059b      	lsls	r3, r3, #22
 8004ede:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	e036      	b.n	8004f68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f00:	69da      	ldr	r2, [r3, #28]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f10:	041b      	lsls	r3, r3, #16
 8004f12:	68f9      	ldr	r1, [r7, #12]
 8004f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d11a      	bne.n	8004f68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	78db      	ldrb	r3, [r3, #3]
 8004f4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	4313      	orrs	r3, r2
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	0151      	lsls	r1, r2, #5
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	440a      	add	r2, r1
 8004f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
	...

08004f78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d161      	bne.n	8005058 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004faa:	d11f      	bne.n	8004fec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8005002:	b29b      	uxth	r3, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	68f9      	ldr	r1, [r7, #12]
 8005008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800500c:	4013      	ands	r3, r2
 800500e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	f003 030f 	and.w	r3, r3, #15
 8005020:	2101      	movs	r1, #1
 8005022:	fa01 f303 	lsl.w	r3, r1, r3
 8005026:	b29b      	uxth	r3, r3
 8005028:	43db      	mvns	r3, r3
 800502a:	68f9      	ldr	r1, [r7, #12]
 800502c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005030:	4013      	ands	r3, r2
 8005032:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	0159      	lsls	r1, r3, #5
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	440b      	add	r3, r1
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	4619      	mov	r1, r3
 8005050:	4b35      	ldr	r3, [pc, #212]	; (8005128 <USB_DeactivateEndpoint+0x1b0>)
 8005052:	4013      	ands	r3, r2
 8005054:	600b      	str	r3, [r1, #0]
 8005056:	e060      	b.n	800511a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800506a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800506e:	d11f      	bne.n	80050b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	0151      	lsls	r1, r2, #5
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	440a      	add	r2, r1
 8005086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800508a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800508e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	2101      	movs	r1, #1
 80050c2:	fa01 f303 	lsl.w	r3, r1, r3
 80050c6:	041b      	lsls	r3, r3, #16
 80050c8:	43db      	mvns	r3, r3
 80050ca:	68f9      	ldr	r1, [r7, #12]
 80050cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d0:	4013      	ands	r3, r2
 80050d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050da:	69da      	ldr	r2, [r3, #28]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	2101      	movs	r1, #1
 80050e6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ea:	041b      	lsls	r3, r3, #16
 80050ec:	43db      	mvns	r3, r3
 80050ee:	68f9      	ldr	r1, [r7, #12]
 80050f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050f4:	4013      	ands	r3, r2
 80050f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	0159      	lsls	r1, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	440b      	add	r3, r1
 800510e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005112:	4619      	mov	r1, r3
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <USB_DeactivateEndpoint+0x1b4>)
 8005116:	4013      	ands	r3, r2
 8005118:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	ec337800 	.word	0xec337800
 800512c:	eff37800 	.word	0xeff37800

08005130 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08a      	sub	sp, #40	; 0x28
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	4613      	mov	r3, r2
 800513c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	2b01      	cmp	r3, #1
 800514e:	f040 815c 	bne.w	800540a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d132      	bne.n	80051c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	0151      	lsls	r1, r2, #5
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	440a      	add	r2, r1
 8005170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005174:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005178:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800517c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	0151      	lsls	r1, r2, #5
 8005190:	69fa      	ldr	r2, [r7, #28]
 8005192:	440a      	add	r2, r1
 8005194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005198:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800519c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b8:	0cdb      	lsrs	r3, r3, #19
 80051ba:	04db      	lsls	r3, r3, #19
 80051bc:	6113      	str	r3, [r2, #16]
 80051be:	e074      	b.n	80052aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051da:	0cdb      	lsrs	r3, r3, #19
 80051dc:	04db      	lsls	r3, r3, #19
 80051de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005202:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	6959      	ldr	r1, [r3, #20]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	440b      	add	r3, r1
 800521c:	1e59      	subs	r1, r3, #1
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	fbb1 f3f3 	udiv	r3, r1, r3
 8005226:	04d9      	lsls	r1, r3, #19
 8005228:	4b9d      	ldr	r3, [pc, #628]	; (80054a0 <USB_EPStartXfer+0x370>)
 800522a:	400b      	ands	r3, r1
 800522c:	69b9      	ldr	r1, [r7, #24]
 800522e:	0148      	lsls	r0, r1, #5
 8005230:	69f9      	ldr	r1, [r7, #28]
 8005232:	4401      	add	r1, r0
 8005234:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005238:	4313      	orrs	r3, r2
 800523a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005248:	691a      	ldr	r2, [r3, #16]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005252:	69b9      	ldr	r1, [r7, #24]
 8005254:	0148      	lsls	r0, r1, #5
 8005256:	69f9      	ldr	r1, [r7, #28]
 8005258:	4401      	add	r1, r0
 800525a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800525e:	4313      	orrs	r3, r2
 8005260:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	78db      	ldrb	r3, [r3, #3]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d11f      	bne.n	80052aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005284:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005288:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d14b      	bne.n	8005348 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d009      	beq.n	80052cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c4:	461a      	mov	r2, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	78db      	ldrb	r3, [r3, #3]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d128      	bne.n	8005326 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d110      	bne.n	8005306 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005302:	6013      	str	r3, [r2, #0]
 8005304:	e00f      	b.n	8005326 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	0151      	lsls	r1, r2, #5
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	440a      	add	r2, r1
 800531c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005324:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	440a      	add	r2, r1
 800533c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005340:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005344:	6013      	str	r3, [r2, #0]
 8005346:	e12f      	b.n	80055a8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	0151      	lsls	r1, r2, #5
 800535a:	69fa      	ldr	r2, [r7, #28]
 800535c:	440a      	add	r2, r1
 800535e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005362:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005366:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	78db      	ldrb	r3, [r3, #3]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d015      	beq.n	800539c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8117 	beq.w	80055a8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	2101      	movs	r1, #1
 800538c:	fa01 f303 	lsl.w	r3, r1, r3
 8005390:	69f9      	ldr	r1, [r7, #28]
 8005392:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005396:	4313      	orrs	r3, r2
 8005398:	634b      	str	r3, [r1, #52]	; 0x34
 800539a:	e105      	b.n	80055a8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d110      	bne.n	80053ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	e00f      	b.n	80053ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	0151      	lsls	r1, r2, #5
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	440a      	add	r2, r1
 80053e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	68d9      	ldr	r1, [r3, #12]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	781a      	ldrb	r2, [r3, #0]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	b298      	uxth	r0, r3
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	4603      	mov	r3, r0
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 fa2b 	bl	800585e <USB_WritePacket>
 8005408:	e0ce      	b.n	80055a8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	0151      	lsls	r1, r2, #5
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	440a      	add	r2, r1
 8005420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005424:	0cdb      	lsrs	r3, r3, #19
 8005426:	04db      	lsls	r3, r3, #19
 8005428:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	0151      	lsls	r1, r2, #5
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	440a      	add	r2, r1
 8005440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005444:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005448:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800544c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d126      	bne.n	80054a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800546c:	69b9      	ldr	r1, [r7, #24]
 800546e:	0148      	lsls	r0, r1, #5
 8005470:	69f9      	ldr	r1, [r7, #28]
 8005472:	4401      	add	r1, r0
 8005474:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005478:	4313      	orrs	r3, r2
 800547a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	440a      	add	r2, r1
 8005492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005496:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800549a:	6113      	str	r3, [r2, #16]
 800549c:	e036      	b.n	800550c <USB_EPStartXfer+0x3dc>
 800549e:	bf00      	nop
 80054a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	695a      	ldr	r2, [r3, #20]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4413      	add	r3, r2
 80054ae:	1e5a      	subs	r2, r3, #1
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	8afb      	ldrh	r3, [r7, #22]
 80054ca:	04d9      	lsls	r1, r3, #19
 80054cc:	4b39      	ldr	r3, [pc, #228]	; (80055b4 <USB_EPStartXfer+0x484>)
 80054ce:	400b      	ands	r3, r1
 80054d0:	69b9      	ldr	r1, [r7, #24]
 80054d2:	0148      	lsls	r0, r1, #5
 80054d4:	69f9      	ldr	r1, [r7, #28]
 80054d6:	4401      	add	r1, r0
 80054d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054dc:	4313      	orrs	r3, r2
 80054de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	8af9      	ldrh	r1, [r7, #22]
 80054f4:	fb01 f303 	mul.w	r3, r1, r3
 80054f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054fc:	69b9      	ldr	r1, [r7, #24]
 80054fe:	0148      	lsls	r0, r1, #5
 8005500:	69f9      	ldr	r1, [r7, #28]
 8005502:	4401      	add	r1, r0
 8005504:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005508:	4313      	orrs	r3, r2
 800550a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d10d      	bne.n	800552e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	68d9      	ldr	r1, [r3, #12]
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	460a      	mov	r2, r1
 800552c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	78db      	ldrb	r3, [r3, #3]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d128      	bne.n	8005588 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005542:	2b00      	cmp	r3, #0
 8005544:	d110      	bne.n	8005568 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	0151      	lsls	r1, r2, #5
 8005558:	69fa      	ldr	r2, [r7, #28]
 800555a:	440a      	add	r2, r1
 800555c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005560:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e00f      	b.n	8005588 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005586:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	440a      	add	r2, r1
 800559e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	1ff80000 	.word	0x1ff80000

080055b8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	4613      	mov	r3, r2
 80055c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	f040 80cd 	bne.w	8005774 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d132      	bne.n	8005648 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005600:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005604:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	0151      	lsls	r1, r2, #5
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	440a      	add	r2, r1
 800561c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005624:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	0151      	lsls	r1, r2, #5
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	440a      	add	r2, r1
 800563c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005640:	0cdb      	lsrs	r3, r3, #19
 8005642:	04db      	lsls	r3, r3, #19
 8005644:	6113      	str	r3, [r2, #16]
 8005646:	e04e      	b.n	80056e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	440a      	add	r2, r1
 800565e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005662:	0cdb      	lsrs	r3, r3, #19
 8005664:	04db      	lsls	r3, r3, #19
 8005666:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	440a      	add	r2, r1
 800567e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005682:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005686:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800568a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	695a      	ldr	r2, [r3, #20]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	429a      	cmp	r2, r3
 8005696:	d903      	bls.n	80056a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d6:	6939      	ldr	r1, [r7, #16]
 80056d8:	0148      	lsls	r0, r1, #5
 80056da:	6979      	ldr	r1, [r7, #20]
 80056dc:	4401      	add	r1, r0
 80056de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056e2:	4313      	orrs	r3, r2
 80056e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d11e      	bne.n	800572a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d009      	beq.n	8005708 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005700:	461a      	mov	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005722:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	e092      	b.n	8005850 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	0151      	lsls	r1, r2, #5
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	440a      	add	r2, r1
 8005740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005744:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005748:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d07e      	beq.n	8005850 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	2101      	movs	r1, #1
 8005764:	fa01 f303 	lsl.w	r3, r1, r3
 8005768:	6979      	ldr	r1, [r7, #20]
 800576a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800576e:	4313      	orrs	r3, r2
 8005770:	634b      	str	r3, [r1, #52]	; 0x34
 8005772:	e06d      	b.n	8005850 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800578e:	0cdb      	lsrs	r3, r3, #19
 8005790:	04db      	lsls	r3, r3, #19
 8005792:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057b6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057fe:	6939      	ldr	r1, [r7, #16]
 8005800:	0148      	lsls	r0, r1, #5
 8005802:	6979      	ldr	r1, [r7, #20]
 8005804:	4401      	add	r1, r0
 8005806:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800580a:	4313      	orrs	r3, r2
 800580c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d10d      	bne.n	8005830 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	68d9      	ldr	r1, [r3, #12]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582c:	460a      	mov	r2, r1
 800582e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	0151      	lsls	r1, r2, #5
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	440a      	add	r2, r1
 8005846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800584a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800584e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800585e:	b480      	push	{r7}
 8005860:	b089      	sub	sp, #36	; 0x24
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	4611      	mov	r1, r2
 800586a:	461a      	mov	r2, r3
 800586c:	460b      	mov	r3, r1
 800586e:	71fb      	strb	r3, [r7, #7]
 8005870:	4613      	mov	r3, r2
 8005872:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800587c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005880:	2b00      	cmp	r3, #0
 8005882:	d11a      	bne.n	80058ba <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005884:	88bb      	ldrh	r3, [r7, #4]
 8005886:	3303      	adds	r3, #3
 8005888:	089b      	lsrs	r3, r3, #2
 800588a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800588c:	2300      	movs	r3, #0
 800588e:	61bb      	str	r3, [r7, #24]
 8005890:	e00f      	b.n	80058b2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	031a      	lsls	r2, r3, #12
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	4413      	add	r3, r2
 800589a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800589e:	461a      	mov	r2, r3
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	3304      	adds	r3, #4
 80058aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	3301      	adds	r3, #1
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d3eb      	bcc.n	8005892 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3724      	adds	r7, #36	; 0x24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b089      	sub	sp, #36	; 0x24
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	4613      	mov	r3, r2
 80058d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	3303      	adds	r3, #3
 80058e2:	089b      	lsrs	r3, r3, #2
 80058e4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80058e6:	2300      	movs	r3, #0
 80058e8:	61bb      	str	r3, [r7, #24]
 80058ea:	e00b      	b.n	8005904 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	3304      	adds	r3, #4
 80058fc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	3301      	adds	r3, #1
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	429a      	cmp	r2, r3
 800590a:	d3ef      	bcc.n	80058ec <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800590c:	69fb      	ldr	r3, [r7, #28]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3724      	adds	r7, #36	; 0x24
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800591a:	b480      	push	{r7}
 800591c:	b085      	sub	sp, #20
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d12c      	bne.n	8005990 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	db12      	blt.n	800596e <USB_EPSetStall+0x54>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00f      	beq.n	800596e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68ba      	ldr	r2, [r7, #8]
 800595e:	0151      	lsls	r1, r2, #5
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	440a      	add	r2, r1
 8005964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005968:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800596c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005988:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e02b      	b.n	80059e8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	db12      	blt.n	80059c8 <USB_EPSetStall+0xae>
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00f      	beq.n	80059c8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68ba      	ldr	r2, [r7, #8]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059c6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d128      	bne.n	8005a64 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	78db      	ldrb	r3, [r3, #3]
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d003      	beq.n	8005a42 <USB_EPClearStall+0x4c>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	78db      	ldrb	r3, [r3, #3]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d138      	bne.n	8005ab4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	0151      	lsls	r1, r2, #5
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	440a      	add	r2, r1
 8005a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	e027      	b.n	8005ab4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	78db      	ldrb	r3, [r3, #3]
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d003      	beq.n	8005a94 <USB_EPClearStall+0x9e>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	78db      	ldrb	r3, [r3, #3]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d10f      	bne.n	8005ab4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	460b      	mov	r3, r1
 8005acc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ae0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005ae4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005af6:	68f9      	ldr	r1, [r7, #12]
 8005af8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005afc:	4313      	orrs	r3, r2
 8005afe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b085      	sub	sp, #20
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b28:	f023 0303 	bic.w	r3, r3, #3
 8005b2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b3c:	f023 0302 	bic.w	r3, r3, #2
 8005b40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b7e:	f043 0302 	orr.w	r3, r3, #2
 8005b82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005baa:	68fb      	ldr	r3, [r7, #12]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	0c1b      	lsrs	r3, r3, #16
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	b29b      	uxth	r3, r3
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8c:	01db      	lsls	r3, r3, #7
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005caa:	68bb      	ldr	r3, [r7, #8]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005cf2:	f023 0307 	bic.w	r3, r3, #7
 8005cf6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
	...

08005d1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	460b      	mov	r3, r1
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	333c      	adds	r3, #60	; 0x3c
 8005d32:	3304      	adds	r3, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	4a26      	ldr	r2, [pc, #152]	; (8005dd4 <USB_EP0_OutStart+0xb8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d90a      	bls.n	8005d56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d50:	d101      	bne.n	8005d56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	e037      	b.n	8005dc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2300      	movs	r3, #0
 8005d60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d84:	f043 0318 	orr.w	r3, r3, #24
 8005d88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005d9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d9e:	7afb      	ldrb	r3, [r7, #11]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d10f      	bne.n	8005dc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005daa:	461a      	mov	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dbe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005dc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	4f54300a 	.word	0x4f54300a

08005dd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3301      	adds	r3, #1
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4a13      	ldr	r2, [pc, #76]	; (8005e3c <USB_CoreReset+0x64>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d901      	bls.n	8005df6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e01b      	b.n	8005e2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	daf2      	bge.n	8005de4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f043 0201 	orr.w	r2, r3, #1
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3301      	adds	r3, #1
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4a09      	ldr	r2, [pc, #36]	; (8005e3c <USB_CoreReset+0x64>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d901      	bls.n	8005e20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e006      	b.n	8005e2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d0f0      	beq.n	8005e0e <USB_CoreReset+0x36>

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3714      	adds	r7, #20
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	00030d40 	.word	0x00030d40

08005e40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e4c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e50:	f002 f95c 	bl	800810c <USBD_static_malloc>
 8005e54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005e64:	2302      	movs	r3, #2
 8005e66:	e066      	b.n	8005f36 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	7c1b      	ldrb	r3, [r3, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d119      	bne.n	8005eac <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	2181      	movs	r1, #129	; 0x81
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f002 f820 	bl	8007ec6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e90:	2202      	movs	r2, #2
 8005e92:	2101      	movs	r1, #1
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f002 f816 	bl	8007ec6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005eaa:	e016      	b.n	8005eda <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005eac:	2340      	movs	r3, #64	; 0x40
 8005eae:	2202      	movs	r2, #2
 8005eb0:	2181      	movs	r1, #129	; 0x81
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f002 f807 	bl	8007ec6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ebe:	2340      	movs	r3, #64	; 0x40
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f001 fffe 	bl	8007ec6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005eda:	2308      	movs	r3, #8
 8005edc:	2203      	movs	r2, #3
 8005ede:	2182      	movs	r1, #130	; 0x82
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f001 fff0 	bl	8007ec6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	7c1b      	ldrb	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d109      	bne.n	8005f24 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f002 f8c1 	bl	80080a4 <USBD_LL_PrepareReceive>
 8005f22:	e007      	b.n	8005f34 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f2a:	2340      	movs	r3, #64	; 0x40
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f002 f8b8 	bl	80080a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	460b      	mov	r3, r1
 8005f48:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f4a:	2181      	movs	r1, #129	; 0x81
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f001 ffe0 	bl	8007f12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f58:	2101      	movs	r1, #1
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f001 ffd9 	bl	8007f12 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f68:	2182      	movs	r1, #130	; 0x82
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f001 ffd1 	bl	8007f12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00e      	beq.n	8005fa8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f002 f8c4 	bl	8008128 <USBD_static_free>
    pdev->pClassData = NULL;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fc4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e0af      	b.n	800613c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d03f      	beq.n	8006068 <USBD_CDC_Setup+0xb4>
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	f040 809f 	bne.w	800612c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	88db      	ldrh	r3, [r3, #6]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d02e      	beq.n	8006054 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	b25b      	sxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	da16      	bge.n	800602e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800600c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	88d2      	ldrh	r2, [r2, #6]
 8006012:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	88db      	ldrh	r3, [r3, #6]
 8006018:	2b07      	cmp	r3, #7
 800601a:	bf28      	it	cs
 800601c:	2307      	movcs	r3, #7
 800601e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	89fa      	ldrh	r2, [r7, #14]
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f001 fb19 	bl	800765e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800602c:	e085      	b.n	800613a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	785a      	ldrb	r2, [r3, #1]
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	88db      	ldrh	r3, [r3, #6]
 800603c:	b2da      	uxtb	r2, r3
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006044:	6939      	ldr	r1, [r7, #16]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	88db      	ldrh	r3, [r3, #6]
 800604a:	461a      	mov	r2, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 fb32 	bl	80076b6 <USBD_CtlPrepareRx>
      break;
 8006052:	e072      	b.n	800613a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	7850      	ldrb	r0, [r2, #1]
 8006060:	2200      	movs	r2, #0
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	4798      	blx	r3
      break;
 8006066:	e068      	b.n	800613a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	785b      	ldrb	r3, [r3, #1]
 800606c:	2b0b      	cmp	r3, #11
 800606e:	d852      	bhi.n	8006116 <USBD_CDC_Setup+0x162>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <USBD_CDC_Setup+0xc4>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	080060a9 	.word	0x080060a9
 800607c:	08006125 	.word	0x08006125
 8006080:	08006117 	.word	0x08006117
 8006084:	08006117 	.word	0x08006117
 8006088:	08006117 	.word	0x08006117
 800608c:	08006117 	.word	0x08006117
 8006090:	08006117 	.word	0x08006117
 8006094:	08006117 	.word	0x08006117
 8006098:	08006117 	.word	0x08006117
 800609c:	08006117 	.word	0x08006117
 80060a0:	080060d3 	.word	0x080060d3
 80060a4:	080060fd 	.word	0x080060fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d107      	bne.n	80060c4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80060b4:	f107 030a 	add.w	r3, r7, #10
 80060b8:	2202      	movs	r2, #2
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 face 	bl	800765e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060c2:	e032      	b.n	800612a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f001 fa58 	bl	800757c <USBD_CtlError>
            ret = USBD_FAIL;
 80060cc:	2303      	movs	r3, #3
 80060ce:	75fb      	strb	r3, [r7, #23]
          break;
 80060d0:	e02b      	b.n	800612a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b03      	cmp	r3, #3
 80060dc:	d107      	bne.n	80060ee <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060de:	f107 030d 	add.w	r3, r7, #13
 80060e2:	2201      	movs	r2, #1
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f001 fab9 	bl	800765e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060ec:	e01d      	b.n	800612a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 fa43 	bl	800757c <USBD_CtlError>
            ret = USBD_FAIL;
 80060f6:	2303      	movs	r3, #3
 80060f8:	75fb      	strb	r3, [r7, #23]
          break;
 80060fa:	e016      	b.n	800612a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b03      	cmp	r3, #3
 8006106:	d00f      	beq.n	8006128 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f001 fa36 	bl	800757c <USBD_CtlError>
            ret = USBD_FAIL;
 8006110:	2303      	movs	r3, #3
 8006112:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006114:	e008      	b.n	8006128 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 fa2f 	bl	800757c <USBD_CtlError>
          ret = USBD_FAIL;
 800611e:	2303      	movs	r3, #3
 8006120:	75fb      	strb	r3, [r7, #23]
          break;
 8006122:	e002      	b.n	800612a <USBD_CDC_Setup+0x176>
          break;
 8006124:	bf00      	nop
 8006126:	e008      	b.n	800613a <USBD_CDC_Setup+0x186>
          break;
 8006128:	bf00      	nop
      }
      break;
 800612a:	e006      	b.n	800613a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800612c:	6839      	ldr	r1, [r7, #0]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f001 fa24 	bl	800757c <USBD_CtlError>
      ret = USBD_FAIL;
 8006134:	2303      	movs	r3, #3
 8006136:	75fb      	strb	r3, [r7, #23]
      break;
 8006138:	bf00      	nop
  }

  return (uint8_t)ret;
 800613a:	7dfb      	ldrb	r3, [r7, #23]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006156:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006162:	2303      	movs	r3, #3
 8006164:	e04f      	b.n	8006206 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800616c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800616e:	78fa      	ldrb	r2, [r7, #3]
 8006170:	6879      	ldr	r1, [r7, #4]
 8006172:	4613      	mov	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	440b      	add	r3, r1
 800617c:	3318      	adds	r3, #24
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d029      	beq.n	80061d8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006184:	78fa      	ldrb	r2, [r7, #3]
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	440b      	add	r3, r1
 8006192:	3318      	adds	r3, #24
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	78f9      	ldrb	r1, [r7, #3]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	460b      	mov	r3, r1
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	1a5b      	subs	r3, r3, r1
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4403      	add	r3, r0
 80061a4:	3344      	adds	r3, #68	; 0x44
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80061ac:	fb03 f301 	mul.w	r3, r3, r1
 80061b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d110      	bne.n	80061d8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80061b6:	78fa      	ldrb	r2, [r7, #3]
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	4613      	mov	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	440b      	add	r3, r1
 80061c4:	3318      	adds	r3, #24
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061ca:	78f9      	ldrb	r1, [r7, #3]
 80061cc:	2300      	movs	r3, #0
 80061ce:	2200      	movs	r2, #0
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f001 ff46 	bl	8008062 <USBD_LL_Transmit>
 80061d6:	e015      	b.n	8006204 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00b      	beq.n	8006204 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	460b      	mov	r3, r1
 8006218:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006220:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800622c:	2303      	movs	r3, #3
 800622e:	e015      	b.n	800625c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006230:	78fb      	ldrb	r3, [r7, #3]
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 ff56 	bl	80080e6 <USBD_LL_GetRxDataSize>
 800623a:	4602      	mov	r2, r0
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006256:	4611      	mov	r1, r2
 8006258:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006272:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800627a:	2303      	movs	r3, #3
 800627c:	e01b      	b.n	80062b6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d015      	beq.n	80062b4 <USBD_CDC_EP0_RxReady+0x50>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800628e:	2bff      	cmp	r3, #255	; 0xff
 8006290:	d010      	beq.n	80062b4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80062a0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062a8:	b292      	uxth	r2, r2
 80062aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	22ff      	movs	r2, #255	; 0xff
 80062b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2243      	movs	r2, #67	; 0x43
 80062cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80062ce:	4b03      	ldr	r3, [pc, #12]	; (80062dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	20000094 	.word	0x20000094

080062e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2243      	movs	r2, #67	; 0x43
 80062ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80062ee:	4b03      	ldr	r3, [pc, #12]	; (80062fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	20000050 	.word	0x20000050

08006300 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2243      	movs	r2, #67	; 0x43
 800630c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800630e:	4b03      	ldr	r3, [pc, #12]	; (800631c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	200000d8 	.word	0x200000d8

08006320 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	220a      	movs	r2, #10
 800632c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800632e:	4b03      	ldr	r3, [pc, #12]	; (800633c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	2000000c 	.word	0x2000000c

08006340 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006350:	2303      	movs	r3, #3
 8006352:	e004      	b.n	800635e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800636a:	b480      	push	{r7}
 800636c:	b087      	sub	sp, #28
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800637c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006384:	2303      	movs	r3, #3
 8006386:	e008      	b.n	800639a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063b6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80063be:	2303      	movs	r3, #3
 80063c0:	e004      	b.n	80063cc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80063e8:	2301      	movs	r3, #1
 80063ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e01a      	b.n	8006430 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006400:	2b00      	cmp	r3, #0
 8006402:	d114      	bne.n	800642e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	2201      	movs	r2, #1
 8006408:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006422:	2181      	movs	r1, #129	; 0x81
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f001 fe1c 	bl	8008062 <USBD_LL_Transmit>

    ret = USBD_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800642e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006446:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006452:	2303      	movs	r3, #3
 8006454:	e016      	b.n	8006484 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	7c1b      	ldrb	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006468:	2101      	movs	r1, #1
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f001 fe1a 	bl	80080a4 <USBD_LL_PrepareReceive>
 8006470:	e007      	b.n	8006482 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006478:	2340      	movs	r3, #64	; 0x40
 800647a:	2101      	movs	r1, #1
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 fe11 	bl	80080a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	4613      	mov	r3, r2
 8006498:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e01f      	b.n	80064e4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	79fa      	ldrb	r2, [r7, #7]
 80064d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f001 fc8d 	bl	8007df8 <USBD_LL_Init>
 80064de:	4603      	mov	r3, r0
 80064e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006500:	2303      	movs	r3, #3
 8006502:	e016      	b.n	8006532 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	f107 020e 	add.w	r2, r7, #14
 8006524:	4610      	mov	r0, r2
 8006526:	4798      	blx	r3
 8006528:	4602      	mov	r2, r0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 fca4 	bl	8007e90 <USBD_LL_Start>
 8006548:	4603      	mov	r3, r0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006552:	b480      	push	{r7}
 8006554:	b083      	sub	sp, #12
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	460b      	mov	r3, r1
 8006572:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006574:	2303      	movs	r3, #3
 8006576:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657e:	2b00      	cmp	r3, #0
 8006580:	d009      	beq.n	8006596 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	4611      	mov	r1, r2
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	4798      	blx	r3
 8006592:	4603      	mov	r3, r0
 8006594:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006596:	7bfb      	ldrb	r3, [r7, #15]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d007      	beq.n	80065c6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	78fa      	ldrb	r2, [r7, #3]
 80065c0:	4611      	mov	r1, r2
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
  }

  return USBD_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80065e0:	6839      	ldr	r1, [r7, #0]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 ff90 	bl	8007508 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80065f6:	461a      	mov	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006604:	f003 031f 	and.w	r3, r3, #31
 8006608:	2b02      	cmp	r3, #2
 800660a:	d01a      	beq.n	8006642 <USBD_LL_SetupStage+0x72>
 800660c:	2b02      	cmp	r3, #2
 800660e:	d822      	bhi.n	8006656 <USBD_LL_SetupStage+0x86>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <USBD_LL_SetupStage+0x4a>
 8006614:	2b01      	cmp	r3, #1
 8006616:	d00a      	beq.n	800662e <USBD_LL_SetupStage+0x5e>
 8006618:	e01d      	b.n	8006656 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fa62 	bl	8006aec <USBD_StdDevReq>
 8006628:	4603      	mov	r3, r0
 800662a:	73fb      	strb	r3, [r7, #15]
      break;
 800662c:	e020      	b.n	8006670 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fac6 	bl	8006bc8 <USBD_StdItfReq>
 800663c:	4603      	mov	r3, r0
 800663e:	73fb      	strb	r3, [r7, #15]
      break;
 8006640:	e016      	b.n	8006670 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fb05 	bl	8006c5a <USBD_StdEPReq>
 8006650:	4603      	mov	r3, r0
 8006652:	73fb      	strb	r3, [r7, #15]
      break;
 8006654:	e00c      	b.n	8006670 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800665c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006660:	b2db      	uxtb	r3, r3
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f001 fc73 	bl	8007f50 <USBD_LL_StallEP>
 800666a:	4603      	mov	r3, r0
 800666c:	73fb      	strb	r3, [r7, #15]
      break;
 800666e:	bf00      	nop
  }

  return ret;
 8006670:	7bfb      	ldrb	r3, [r7, #15]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af00      	add	r7, sp, #0
 8006680:	60f8      	str	r0, [r7, #12]
 8006682:	460b      	mov	r3, r1
 8006684:	607a      	str	r2, [r7, #4]
 8006686:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006688:	7afb      	ldrb	r3, [r7, #11]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d138      	bne.n	8006700 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006694:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800669c:	2b03      	cmp	r3, #3
 800669e:	d14a      	bne.n	8006736 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d913      	bls.n	80066d4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	1ad2      	subs	r2, r2, r3
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	4293      	cmp	r3, r2
 80066c4:	bf28      	it	cs
 80066c6:	4613      	movcs	r3, r2
 80066c8:	461a      	mov	r2, r3
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f001 f80f 	bl	80076f0 <USBD_CtlContinueRx>
 80066d2:	e030      	b.n	8006736 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d10b      	bne.n	80066f8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f001 f80a 	bl	8007712 <USBD_CtlSendStatus>
 80066fe:	e01a      	b.n	8006736 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b03      	cmp	r3, #3
 800670a:	d114      	bne.n	8006736 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00e      	beq.n	8006736 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	7afa      	ldrb	r2, [r7, #11]
 8006722:	4611      	mov	r1, r2
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	4798      	blx	r3
 8006728:	4603      	mov	r3, r0
 800672a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800672c:	7dfb      	ldrb	r3, [r7, #23]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006732:	7dfb      	ldrb	r3, [r7, #23]
 8006734:	e000      	b.n	8006738 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3718      	adds	r7, #24
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	460b      	mov	r3, r1
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800674e:	7afb      	ldrb	r3, [r7, #11]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d16b      	bne.n	800682c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	3314      	adds	r3, #20
 8006758:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006760:	2b02      	cmp	r3, #2
 8006762:	d156      	bne.n	8006812 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	429a      	cmp	r2, r3
 800676e:	d914      	bls.n	800679a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	1ad2      	subs	r2, r2, r3
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	461a      	mov	r2, r3
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 ff84 	bl	8007694 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800678c:	2300      	movs	r3, #0
 800678e:	2200      	movs	r2, #0
 8006790:	2100      	movs	r1, #0
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f001 fc86 	bl	80080a4 <USBD_LL_PrepareReceive>
 8006798:	e03b      	b.n	8006812 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d11c      	bne.n	80067e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d316      	bcc.n	80067e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80067bc:	429a      	cmp	r2, r3
 80067be:	d20f      	bcs.n	80067e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067c0:	2200      	movs	r2, #0
 80067c2:	2100      	movs	r1, #0
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 ff65 	bl	8007694 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067d2:	2300      	movs	r3, #0
 80067d4:	2200      	movs	r2, #0
 80067d6:	2100      	movs	r1, #0
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f001 fc63 	bl	80080a4 <USBD_LL_PrepareReceive>
 80067de:	e018      	b.n	8006812 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d10b      	bne.n	8006804 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006804:	2180      	movs	r1, #128	; 0x80
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f001 fba2 	bl	8007f50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 ff93 	bl	8007738 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006818:	2b01      	cmp	r3, #1
 800681a:	d122      	bne.n	8006862 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f7ff fe98 	bl	8006552 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800682a:	e01a      	b.n	8006862 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b03      	cmp	r3, #3
 8006836:	d114      	bne.n	8006862 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00e      	beq.n	8006862 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	7afa      	ldrb	r2, [r7, #11]
 800684e:	4611      	mov	r1, r2
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	4798      	blx	r3
 8006854:	4603      	mov	r3, r0
 8006856:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800685e:	7dfb      	ldrb	r3, [r7, #23]
 8006860:	e000      	b.n	8006864 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800689c:	2303      	movs	r3, #3
 800689e:	e02f      	b.n	8006900 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00f      	beq.n	80068ca <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d009      	beq.n	80068ca <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6852      	ldr	r2, [r2, #4]
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	4611      	mov	r1, r2
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068ca:	2340      	movs	r3, #64	; 0x40
 80068cc:	2200      	movs	r2, #0
 80068ce:	2100      	movs	r1, #0
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 faf8 	bl	8007ec6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2240      	movs	r2, #64	; 0x40
 80068e2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068e6:	2340      	movs	r3, #64	; 0x40
 80068e8:	2200      	movs	r2, #0
 80068ea:	2180      	movs	r1, #128	; 0x80
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f001 faea 	bl	8007ec6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2240      	movs	r2, #64	; 0x40
 80068fc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	78fa      	ldrb	r2, [r7, #3]
 8006918:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006936:	b2da      	uxtb	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2204      	movs	r2, #4
 8006942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b04      	cmp	r3, #4
 8006966:	d106      	bne.n	8006976 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800696e:	b2da      	uxtb	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006996:	2303      	movs	r3, #3
 8006998:	e012      	b.n	80069c0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d10b      	bne.n	80069be <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80069de:	2303      	movs	r3, #3
 80069e0:	e014      	b.n	8006a0c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d10d      	bne.n	8006a0a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d007      	beq.n	8006a0a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	78fa      	ldrb	r2, [r7, #3]
 8006a04:	4611      	mov	r1, r2
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3708      	adds	r7, #8
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e014      	b.n	8006a58 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d10d      	bne.n	8006a56 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d007      	beq.n	8006a56 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	78fa      	ldrb	r2, [r7, #3]
 8006a50:	4611      	mov	r1, r2
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b082      	sub	sp, #8
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d009      	beq.n	8006aa4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6852      	ldr	r2, [r2, #4]
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	4798      	blx	r3
  }

  return USBD_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b087      	sub	sp, #28
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006acc:	8a3b      	ldrh	r3, [r7, #16]
 8006ace:	021b      	lsls	r3, r3, #8
 8006ad0:	b21a      	sxth	r2, r3
 8006ad2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	b21b      	sxth	r3, r3
 8006ada:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006adc:	89fb      	ldrh	r3, [r7, #14]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006af6:	2300      	movs	r3, #0
 8006af8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b02:	2b40      	cmp	r3, #64	; 0x40
 8006b04:	d005      	beq.n	8006b12 <USBD_StdDevReq+0x26>
 8006b06:	2b40      	cmp	r3, #64	; 0x40
 8006b08:	d853      	bhi.n	8006bb2 <USBD_StdDevReq+0xc6>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00b      	beq.n	8006b26 <USBD_StdDevReq+0x3a>
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	d14f      	bne.n	8006bb2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	4798      	blx	r3
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]
      break;
 8006b24:	e04a      	b.n	8006bbc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	785b      	ldrb	r3, [r3, #1]
 8006b2a:	2b09      	cmp	r3, #9
 8006b2c:	d83b      	bhi.n	8006ba6 <USBD_StdDevReq+0xba>
 8006b2e:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <USBD_StdDevReq+0x48>)
 8006b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b34:	08006b89 	.word	0x08006b89
 8006b38:	08006b9d 	.word	0x08006b9d
 8006b3c:	08006ba7 	.word	0x08006ba7
 8006b40:	08006b93 	.word	0x08006b93
 8006b44:	08006ba7 	.word	0x08006ba7
 8006b48:	08006b67 	.word	0x08006b67
 8006b4c:	08006b5d 	.word	0x08006b5d
 8006b50:	08006ba7 	.word	0x08006ba7
 8006b54:	08006b7f 	.word	0x08006b7f
 8006b58:	08006b71 	.word	0x08006b71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f9de 	bl	8006f20 <USBD_GetDescriptor>
          break;
 8006b64:	e024      	b.n	8006bb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fb43 	bl	80071f4 <USBD_SetAddress>
          break;
 8006b6e:	e01f      	b.n	8006bb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fb82 	bl	800727c <USBD_SetConfig>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	73fb      	strb	r3, [r7, #15]
          break;
 8006b7c:	e018      	b.n	8006bb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fc21 	bl	80073c8 <USBD_GetConfig>
          break;
 8006b86:	e013      	b.n	8006bb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fc52 	bl	8007434 <USBD_GetStatus>
          break;
 8006b90:	e00e      	b.n	8006bb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fc81 	bl	800749c <USBD_SetFeature>
          break;
 8006b9a:	e009      	b.n	8006bb0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fc90 	bl	80074c4 <USBD_ClrFeature>
          break;
 8006ba4:	e004      	b.n	8006bb0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006ba6:	6839      	ldr	r1, [r7, #0]
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fce7 	bl	800757c <USBD_CtlError>
          break;
 8006bae:	bf00      	nop
      }
      break;
 8006bb0:	e004      	b.n	8006bbc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fce1 	bl	800757c <USBD_CtlError>
      break;
 8006bba:	bf00      	nop
  }

  return ret;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop

08006bc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bde:	2b40      	cmp	r3, #64	; 0x40
 8006be0:	d005      	beq.n	8006bee <USBD_StdItfReq+0x26>
 8006be2:	2b40      	cmp	r3, #64	; 0x40
 8006be4:	d82f      	bhi.n	8006c46 <USBD_StdItfReq+0x7e>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <USBD_StdItfReq+0x26>
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d12b      	bne.n	8006c46 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d81d      	bhi.n	8006c38 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	889b      	ldrh	r3, [r3, #4]
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d813      	bhi.n	8006c2e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	4798      	blx	r3
 8006c14:	4603      	mov	r3, r0
 8006c16:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	88db      	ldrh	r3, [r3, #6]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d110      	bne.n	8006c42 <USBD_StdItfReq+0x7a>
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10d      	bne.n	8006c42 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 fd73 	bl	8007712 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c2c:	e009      	b.n	8006c42 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fca3 	bl	800757c <USBD_CtlError>
          break;
 8006c36:	e004      	b.n	8006c42 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fc9e 	bl	800757c <USBD_CtlError>
          break;
 8006c40:	e000      	b.n	8006c44 <USBD_StdItfReq+0x7c>
          break;
 8006c42:	bf00      	nop
      }
      break;
 8006c44:	e004      	b.n	8006c50 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fc97 	bl	800757c <USBD_CtlError>
      break;
 8006c4e:	bf00      	nop
  }

  return ret;
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	889b      	ldrh	r3, [r3, #4]
 8006c6c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d007      	beq.n	8006c8a <USBD_StdEPReq+0x30>
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	f200 8145 	bhi.w	8006f0a <USBD_StdEPReq+0x2b0>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00c      	beq.n	8006c9e <USBD_StdEPReq+0x44>
 8006c84:	2b20      	cmp	r3, #32
 8006c86:	f040 8140 	bne.w	8006f0a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	4798      	blx	r3
 8006c98:	4603      	mov	r3, r0
 8006c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c9c:	e13a      	b.n	8006f14 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	785b      	ldrb	r3, [r3, #1]
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d007      	beq.n	8006cb6 <USBD_StdEPReq+0x5c>
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	f300 8129 	bgt.w	8006efe <USBD_StdEPReq+0x2a4>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d07f      	beq.n	8006db0 <USBD_StdEPReq+0x156>
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d03c      	beq.n	8006d2e <USBD_StdEPReq+0xd4>
 8006cb4:	e123      	b.n	8006efe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d002      	beq.n	8006cc8 <USBD_StdEPReq+0x6e>
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d016      	beq.n	8006cf4 <USBD_StdEPReq+0x9a>
 8006cc6:	e02c      	b.n	8006d22 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00d      	beq.n	8006cea <USBD_StdEPReq+0x90>
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	2b80      	cmp	r3, #128	; 0x80
 8006cd2:	d00a      	beq.n	8006cea <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cd4:	7bbb      	ldrb	r3, [r7, #14]
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 f939 	bl	8007f50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cde:	2180      	movs	r1, #128	; 0x80
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f001 f935 	bl	8007f50 <USBD_LL_StallEP>
 8006ce6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ce8:	e020      	b.n	8006d2c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006cea:	6839      	ldr	r1, [r7, #0]
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fc45 	bl	800757c <USBD_CtlError>
              break;
 8006cf2:	e01b      	b.n	8006d2c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	885b      	ldrh	r3, [r3, #2]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10e      	bne.n	8006d1a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00b      	beq.n	8006d1a <USBD_StdEPReq+0xc0>
 8006d02:	7bbb      	ldrb	r3, [r7, #14]
 8006d04:	2b80      	cmp	r3, #128	; 0x80
 8006d06:	d008      	beq.n	8006d1a <USBD_StdEPReq+0xc0>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	88db      	ldrh	r3, [r3, #6]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d104      	bne.n	8006d1a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d10:	7bbb      	ldrb	r3, [r7, #14]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 f91b 	bl	8007f50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fcf9 	bl	8007712 <USBD_CtlSendStatus>

              break;
 8006d20:	e004      	b.n	8006d2c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fc29 	bl	800757c <USBD_CtlError>
              break;
 8006d2a:	bf00      	nop
          }
          break;
 8006d2c:	e0ec      	b.n	8006f08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d002      	beq.n	8006d40 <USBD_StdEPReq+0xe6>
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d016      	beq.n	8006d6c <USBD_StdEPReq+0x112>
 8006d3e:	e030      	b.n	8006da2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d40:	7bbb      	ldrb	r3, [r7, #14]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00d      	beq.n	8006d62 <USBD_StdEPReq+0x108>
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b80      	cmp	r3, #128	; 0x80
 8006d4a:	d00a      	beq.n	8006d62 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 f8fd 	bl	8007f50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d56:	2180      	movs	r1, #128	; 0x80
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f001 f8f9 	bl	8007f50 <USBD_LL_StallEP>
 8006d5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d60:	e025      	b.n	8006dae <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fc09 	bl	800757c <USBD_CtlError>
              break;
 8006d6a:	e020      	b.n	8006dae <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	885b      	ldrh	r3, [r3, #2]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d11b      	bne.n	8006dac <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d74:	7bbb      	ldrb	r3, [r7, #14]
 8006d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d004      	beq.n	8006d88 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d7e:	7bbb      	ldrb	r3, [r7, #14]
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 f903 	bl	8007f8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fcc2 	bl	8007712 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	6839      	ldr	r1, [r7, #0]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	4798      	blx	r3
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006da0:	e004      	b.n	8006dac <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006da2:	6839      	ldr	r1, [r7, #0]
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fbe9 	bl	800757c <USBD_CtlError>
              break;
 8006daa:	e000      	b.n	8006dae <USBD_StdEPReq+0x154>
              break;
 8006dac:	bf00      	nop
          }
          break;
 8006dae:	e0ab      	b.n	8006f08 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d002      	beq.n	8006dc2 <USBD_StdEPReq+0x168>
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d032      	beq.n	8006e26 <USBD_StdEPReq+0x1cc>
 8006dc0:	e097      	b.n	8006ef2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <USBD_StdEPReq+0x17e>
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	2b80      	cmp	r3, #128	; 0x80
 8006dcc:	d004      	beq.n	8006dd8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fbd3 	bl	800757c <USBD_CtlError>
                break;
 8006dd6:	e091      	b.n	8006efc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	da0b      	bge.n	8006df8 <USBD_StdEPReq+0x19e>
 8006de0:	7bbb      	ldrb	r3, [r7, #14]
 8006de2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006de6:	4613      	mov	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	3310      	adds	r3, #16
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	4413      	add	r3, r2
 8006df4:	3304      	adds	r3, #4
 8006df6:	e00b      	b.n	8006e10 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	3304      	adds	r3, #4
 8006e10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fc1d 	bl	800765e <USBD_CtlSendData>
              break;
 8006e24:	e06a      	b.n	8006efc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	da11      	bge.n	8006e52 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	f003 020f 	and.w	r2, r3, #15
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	440b      	add	r3, r1
 8006e40:	3324      	adds	r3, #36	; 0x24
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d117      	bne.n	8006e78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fb96 	bl	800757c <USBD_CtlError>
                  break;
 8006e50:	e054      	b.n	8006efc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	f003 020f 	and.w	r2, r3, #15
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	440b      	add	r3, r1
 8006e64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d104      	bne.n	8006e78 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fb83 	bl	800757c <USBD_CtlError>
                  break;
 8006e76:	e041      	b.n	8006efc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	da0b      	bge.n	8006e98 <USBD_StdEPReq+0x23e>
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e86:	4613      	mov	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	3310      	adds	r3, #16
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	4413      	add	r3, r2
 8006e94:	3304      	adds	r3, #4
 8006e96:	e00b      	b.n	8006eb0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	4413      	add	r3, r2
 8006eae:	3304      	adds	r3, #4
 8006eb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <USBD_StdEPReq+0x264>
 8006eb8:	7bbb      	ldrb	r3, [r7, #14]
 8006eba:	2b80      	cmp	r3, #128	; 0x80
 8006ebc:	d103      	bne.n	8006ec6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	e00e      	b.n	8006ee4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 f87e 	bl	8007fcc <USBD_LL_IsStallEP>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	e002      	b.n	8006ee4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fbb7 	bl	800765e <USBD_CtlSendData>
              break;
 8006ef0:	e004      	b.n	8006efc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fb41 	bl	800757c <USBD_CtlError>
              break;
 8006efa:	bf00      	nop
          }
          break;
 8006efc:	e004      	b.n	8006f08 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fb3b 	bl	800757c <USBD_CtlError>
          break;
 8006f06:	bf00      	nop
      }
      break;
 8006f08:	e004      	b.n	8006f14 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fb35 	bl	800757c <USBD_CtlError>
      break;
 8006f12:	bf00      	nop
  }

  return ret;
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	885b      	ldrh	r3, [r3, #2]
 8006f3a:	0a1b      	lsrs	r3, r3, #8
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	2b06      	cmp	r3, #6
 8006f42:	f200 8128 	bhi.w	8007196 <USBD_GetDescriptor+0x276>
 8006f46:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <USBD_GetDescriptor+0x2c>)
 8006f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4c:	08006f69 	.word	0x08006f69
 8006f50:	08006f81 	.word	0x08006f81
 8006f54:	08006fc1 	.word	0x08006fc1
 8006f58:	08007197 	.word	0x08007197
 8006f5c:	08007197 	.word	0x08007197
 8006f60:	08007137 	.word	0x08007137
 8006f64:	08007163 	.word	0x08007163
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	7c12      	ldrb	r2, [r2, #16]
 8006f74:	f107 0108 	add.w	r1, r7, #8
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4798      	blx	r3
 8006f7c:	60f8      	str	r0, [r7, #12]
      break;
 8006f7e:	e112      	b.n	80071a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	7c1b      	ldrb	r3, [r3, #16]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10d      	bne.n	8006fa4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f90:	f107 0208 	add.w	r2, r7, #8
 8006f94:	4610      	mov	r0, r2
 8006f96:	4798      	blx	r3
 8006f98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006fa2:	e100      	b.n	80071a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	f107 0208 	add.w	r2, r7, #8
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4798      	blx	r3
 8006fb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	2202      	movs	r2, #2
 8006fbc:	701a      	strb	r2, [r3, #0]
      break;
 8006fbe:	e0f2      	b.n	80071a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	885b      	ldrh	r3, [r3, #2]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b05      	cmp	r3, #5
 8006fc8:	f200 80ac 	bhi.w	8007124 <USBD_GetDescriptor+0x204>
 8006fcc:	a201      	add	r2, pc, #4	; (adr r2, 8006fd4 <USBD_GetDescriptor+0xb4>)
 8006fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd2:	bf00      	nop
 8006fd4:	08006fed 	.word	0x08006fed
 8006fd8:	08007021 	.word	0x08007021
 8006fdc:	08007055 	.word	0x08007055
 8006fe0:	08007089 	.word	0x08007089
 8006fe4:	080070bd 	.word	0x080070bd
 8006fe8:	080070f1 	.word	0x080070f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00b      	beq.n	8007010 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	7c12      	ldrb	r2, [r2, #16]
 8007004:	f107 0108 	add.w	r1, r7, #8
 8007008:	4610      	mov	r0, r2
 800700a:	4798      	blx	r3
 800700c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800700e:	e091      	b.n	8007134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fab2 	bl	800757c <USBD_CtlError>
            err++;
 8007018:	7afb      	ldrb	r3, [r7, #11]
 800701a:	3301      	adds	r3, #1
 800701c:	72fb      	strb	r3, [r7, #11]
          break;
 800701e:	e089      	b.n	8007134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00b      	beq.n	8007044 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	7c12      	ldrb	r2, [r2, #16]
 8007038:	f107 0108 	add.w	r1, r7, #8
 800703c:	4610      	mov	r0, r2
 800703e:	4798      	blx	r3
 8007040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007042:	e077      	b.n	8007134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa98 	bl	800757c <USBD_CtlError>
            err++;
 800704c:	7afb      	ldrb	r3, [r7, #11]
 800704e:	3301      	adds	r3, #1
 8007050:	72fb      	strb	r3, [r7, #11]
          break;
 8007052:	e06f      	b.n	8007134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	7c12      	ldrb	r2, [r2, #16]
 800706c:	f107 0108 	add.w	r1, r7, #8
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
 8007074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007076:	e05d      	b.n	8007134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fa7e 	bl	800757c <USBD_CtlError>
            err++;
 8007080:	7afb      	ldrb	r3, [r7, #11]
 8007082:	3301      	adds	r3, #1
 8007084:	72fb      	strb	r3, [r7, #11]
          break;
 8007086:	e055      	b.n	8007134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00b      	beq.n	80070ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	7c12      	ldrb	r2, [r2, #16]
 80070a0:	f107 0108 	add.w	r1, r7, #8
 80070a4:	4610      	mov	r0, r2
 80070a6:	4798      	blx	r3
 80070a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070aa:	e043      	b.n	8007134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fa64 	bl	800757c <USBD_CtlError>
            err++;
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	3301      	adds	r3, #1
 80070b8:	72fb      	strb	r3, [r7, #11]
          break;
 80070ba:	e03b      	b.n	8007134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00b      	beq.n	80070e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	7c12      	ldrb	r2, [r2, #16]
 80070d4:	f107 0108 	add.w	r1, r7, #8
 80070d8:	4610      	mov	r0, r2
 80070da:	4798      	blx	r3
 80070dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070de:	e029      	b.n	8007134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fa4a 	bl	800757c <USBD_CtlError>
            err++;
 80070e8:	7afb      	ldrb	r3, [r7, #11]
 80070ea:	3301      	adds	r3, #1
 80070ec:	72fb      	strb	r3, [r7, #11]
          break;
 80070ee:	e021      	b.n	8007134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00b      	beq.n	8007114 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	7c12      	ldrb	r2, [r2, #16]
 8007108:	f107 0108 	add.w	r1, r7, #8
 800710c:	4610      	mov	r0, r2
 800710e:	4798      	blx	r3
 8007110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007112:	e00f      	b.n	8007134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fa30 	bl	800757c <USBD_CtlError>
            err++;
 800711c:	7afb      	ldrb	r3, [r7, #11]
 800711e:	3301      	adds	r3, #1
 8007120:	72fb      	strb	r3, [r7, #11]
          break;
 8007122:	e007      	b.n	8007134 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fa28 	bl	800757c <USBD_CtlError>
          err++;
 800712c:	7afb      	ldrb	r3, [r7, #11]
 800712e:	3301      	adds	r3, #1
 8007130:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007132:	bf00      	nop
      }
      break;
 8007134:	e037      	b.n	80071a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	7c1b      	ldrb	r3, [r3, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007146:	f107 0208 	add.w	r2, r7, #8
 800714a:	4610      	mov	r0, r2
 800714c:	4798      	blx	r3
 800714e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007150:	e029      	b.n	80071a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fa11 	bl	800757c <USBD_CtlError>
        err++;
 800715a:	7afb      	ldrb	r3, [r7, #11]
 800715c:	3301      	adds	r3, #1
 800715e:	72fb      	strb	r3, [r7, #11]
      break;
 8007160:	e021      	b.n	80071a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	7c1b      	ldrb	r3, [r3, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10d      	bne.n	8007186 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007172:	f107 0208 	add.w	r2, r7, #8
 8007176:	4610      	mov	r0, r2
 8007178:	4798      	blx	r3
 800717a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3301      	adds	r3, #1
 8007180:	2207      	movs	r2, #7
 8007182:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007184:	e00f      	b.n	80071a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f9f7 	bl	800757c <USBD_CtlError>
        err++;
 800718e:	7afb      	ldrb	r3, [r7, #11]
 8007190:	3301      	adds	r3, #1
 8007192:	72fb      	strb	r3, [r7, #11]
      break;
 8007194:	e007      	b.n	80071a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f9ef 	bl	800757c <USBD_CtlError>
      err++;
 800719e:	7afb      	ldrb	r3, [r7, #11]
 80071a0:	3301      	adds	r3, #1
 80071a2:	72fb      	strb	r3, [r7, #11]
      break;
 80071a4:	bf00      	nop
  }

  if (err != 0U)
 80071a6:	7afb      	ldrb	r3, [r7, #11]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d11e      	bne.n	80071ea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	88db      	ldrh	r3, [r3, #6]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d016      	beq.n	80071e2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80071b4:	893b      	ldrh	r3, [r7, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00e      	beq.n	80071d8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	88da      	ldrh	r2, [r3, #6]
 80071be:	893b      	ldrh	r3, [r7, #8]
 80071c0:	4293      	cmp	r3, r2
 80071c2:	bf28      	it	cs
 80071c4:	4613      	movcs	r3, r2
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80071ca:	893b      	ldrh	r3, [r7, #8]
 80071cc:	461a      	mov	r2, r3
 80071ce:	68f9      	ldr	r1, [r7, #12]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fa44 	bl	800765e <USBD_CtlSendData>
 80071d6:	e009      	b.n	80071ec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f9ce 	bl	800757c <USBD_CtlError>
 80071e0:	e004      	b.n	80071ec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa95 	bl	8007712 <USBD_CtlSendStatus>
 80071e8:	e000      	b.n	80071ec <USBD_GetDescriptor+0x2cc>
    return;
 80071ea:	bf00      	nop
  }
}
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop

080071f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	889b      	ldrh	r3, [r3, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d131      	bne.n	800726a <USBD_SetAddress+0x76>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	88db      	ldrh	r3, [r3, #6]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d12d      	bne.n	800726a <USBD_SetAddress+0x76>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	885b      	ldrh	r3, [r3, #2]
 8007212:	2b7f      	cmp	r3, #127	; 0x7f
 8007214:	d829      	bhi.n	800726a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	885b      	ldrh	r3, [r3, #2]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007220:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b03      	cmp	r3, #3
 800722c:	d104      	bne.n	8007238 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f9a3 	bl	800757c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007236:	e01d      	b.n	8007274 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	7bfa      	ldrb	r2, [r7, #15]
 800723c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007240:	7bfb      	ldrb	r3, [r7, #15]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 feed 	bl	8008024 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fa61 	bl	8007712 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d004      	beq.n	8007260 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2202      	movs	r2, #2
 800725a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800725e:	e009      	b.n	8007274 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007268:	e004      	b.n	8007274 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f985 	bl	800757c <USBD_CtlError>
  }
}
 8007272:	bf00      	nop
 8007274:	bf00      	nop
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	885b      	ldrh	r3, [r3, #2]
 800728e:	b2da      	uxtb	r2, r3
 8007290:	4b4c      	ldr	r3, [pc, #304]	; (80073c4 <USBD_SetConfig+0x148>)
 8007292:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007294:	4b4b      	ldr	r3, [pc, #300]	; (80073c4 <USBD_SetConfig+0x148>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d905      	bls.n	80072a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f96c 	bl	800757c <USBD_CtlError>
    return USBD_FAIL;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e088      	b.n	80073ba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d002      	beq.n	80072ba <USBD_SetConfig+0x3e>
 80072b4:	2b03      	cmp	r3, #3
 80072b6:	d025      	beq.n	8007304 <USBD_SetConfig+0x88>
 80072b8:	e071      	b.n	800739e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80072ba:	4b42      	ldr	r3, [pc, #264]	; (80073c4 <USBD_SetConfig+0x148>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d01c      	beq.n	80072fc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80072c2:	4b40      	ldr	r3, [pc, #256]	; (80073c4 <USBD_SetConfig+0x148>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072cc:	4b3d      	ldr	r3, [pc, #244]	; (80073c4 <USBD_SetConfig+0x148>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff f948 	bl	8006568 <USBD_SetClassConfig>
 80072d8:	4603      	mov	r3, r0
 80072da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d004      	beq.n	80072ec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 f949 	bl	800757c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072ea:	e065      	b.n	80073b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fa10 	bl	8007712 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2203      	movs	r2, #3
 80072f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072fa:	e05d      	b.n	80073b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fa08 	bl	8007712 <USBD_CtlSendStatus>
      break;
 8007302:	e059      	b.n	80073b8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007304:	4b2f      	ldr	r3, [pc, #188]	; (80073c4 <USBD_SetConfig+0x148>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d112      	bne.n	8007332 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007314:	4b2b      	ldr	r3, [pc, #172]	; (80073c4 <USBD_SetConfig+0x148>)
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	461a      	mov	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800731e:	4b29      	ldr	r3, [pc, #164]	; (80073c4 <USBD_SetConfig+0x148>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	4619      	mov	r1, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff f93b 	bl	80065a0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f9f1 	bl	8007712 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007330:	e042      	b.n	80073b8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007332:	4b24      	ldr	r3, [pc, #144]	; (80073c4 <USBD_SetConfig+0x148>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	429a      	cmp	r2, r3
 800733e:	d02a      	beq.n	8007396 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7ff f929 	bl	80065a0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800734e:	4b1d      	ldr	r3, [pc, #116]	; (80073c4 <USBD_SetConfig+0x148>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007358:	4b1a      	ldr	r3, [pc, #104]	; (80073c4 <USBD_SetConfig+0x148>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7ff f902 	bl	8006568 <USBD_SetClassConfig>
 8007364:	4603      	mov	r3, r0
 8007366:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00f      	beq.n	800738e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f903 	bl	800757c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff f90e 	bl	80065a0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800738c:	e014      	b.n	80073b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f9bf 	bl	8007712 <USBD_CtlSendStatus>
      break;
 8007394:	e010      	b.n	80073b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f9bb 	bl	8007712 <USBD_CtlSendStatus>
      break;
 800739c:	e00c      	b.n	80073b8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800739e:	6839      	ldr	r1, [r7, #0]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f8eb 	bl	800757c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073a6:	4b07      	ldr	r3, [pc, #28]	; (80073c4 <USBD_SetConfig+0x148>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff f8f7 	bl	80065a0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80073b2:	2303      	movs	r3, #3
 80073b4:	73fb      	strb	r3, [r7, #15]
      break;
 80073b6:	bf00      	nop
  }

  return ret;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	2000019d 	.word	0x2000019d

080073c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	88db      	ldrh	r3, [r3, #6]
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d004      	beq.n	80073e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f8cd 	bl	800757c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80073e2:	e023      	b.n	800742c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	dc02      	bgt.n	80073f6 <USBD_GetConfig+0x2e>
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	dc03      	bgt.n	80073fc <USBD_GetConfig+0x34>
 80073f4:	e015      	b.n	8007422 <USBD_GetConfig+0x5a>
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d00b      	beq.n	8007412 <USBD_GetConfig+0x4a>
 80073fa:	e012      	b.n	8007422 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3308      	adds	r3, #8
 8007406:	2201      	movs	r2, #1
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f927 	bl	800765e <USBD_CtlSendData>
        break;
 8007410:	e00c      	b.n	800742c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	3304      	adds	r3, #4
 8007416:	2201      	movs	r2, #1
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f91f 	bl	800765e <USBD_CtlSendData>
        break;
 8007420:	e004      	b.n	800742c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007422:	6839      	ldr	r1, [r7, #0]
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 f8a9 	bl	800757c <USBD_CtlError>
        break;
 800742a:	bf00      	nop
}
 800742c:	bf00      	nop
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007444:	b2db      	uxtb	r3, r3
 8007446:	3b01      	subs	r3, #1
 8007448:	2b02      	cmp	r3, #2
 800744a:	d81e      	bhi.n	800748a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	88db      	ldrh	r3, [r3, #6]
 8007450:	2b02      	cmp	r3, #2
 8007452:	d004      	beq.n	800745e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f890 	bl	800757c <USBD_CtlError>
        break;
 800745c:	e01a      	b.n	8007494 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800746a:	2b00      	cmp	r3, #0
 800746c:	d005      	beq.n	800747a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f043 0202 	orr.w	r2, r3, #2
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	330c      	adds	r3, #12
 800747e:	2202      	movs	r2, #2
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f8eb 	bl	800765e <USBD_CtlSendData>
      break;
 8007488:	e004      	b.n	8007494 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f875 	bl	800757c <USBD_CtlError>
      break;
 8007492:	bf00      	nop
  }
}
 8007494:	bf00      	nop
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	885b      	ldrh	r3, [r3, #2]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d106      	bne.n	80074bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f92b 	bl	8007712 <USBD_CtlSendStatus>
  }
}
 80074bc:	bf00      	nop
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	3b01      	subs	r3, #1
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d80b      	bhi.n	80074f4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	885b      	ldrh	r3, [r3, #2]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d10c      	bne.n	80074fe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f910 	bl	8007712 <USBD_CtlSendStatus>
      }
      break;
 80074f2:	e004      	b.n	80074fe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f840 	bl	800757c <USBD_CtlError>
      break;
 80074fc:	e000      	b.n	8007500 <USBD_ClrFeature+0x3c>
      break;
 80074fe:	bf00      	nop
  }
}
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	781a      	ldrb	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3301      	adds	r3, #1
 8007522:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	781a      	ldrb	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3301      	adds	r3, #1
 8007530:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff fabb 	bl	8006aae <SWAPBYTE>
 8007538:	4603      	mov	r3, r0
 800753a:	461a      	mov	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	3301      	adds	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	3301      	adds	r3, #1
 800754a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7ff faae 	bl	8006aae <SWAPBYTE>
 8007552:	4603      	mov	r3, r0
 8007554:	461a      	mov	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	3301      	adds	r3, #1
 8007564:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f7ff faa1 	bl	8006aae <SWAPBYTE>
 800756c:	4603      	mov	r3, r0
 800756e:	461a      	mov	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	80da      	strh	r2, [r3, #6]
}
 8007574:	bf00      	nop
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007586:	2180      	movs	r1, #128	; 0x80
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fce1 	bl	8007f50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800758e:	2100      	movs	r1, #0
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fcdd 	bl	8007f50 <USBD_LL_StallEP>
}
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b086      	sub	sp, #24
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d036      	beq.n	8007622 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80075b8:	6938      	ldr	r0, [r7, #16]
 80075ba:	f000 f836 	bl	800762a <USBD_GetLen>
 80075be:	4603      	mov	r3, r0
 80075c0:	3301      	adds	r3, #1
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	4413      	add	r3, r2
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	7812      	ldrb	r2, [r2, #0]
 80075d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80075d8:	7dfb      	ldrb	r3, [r7, #23]
 80075da:	3301      	adds	r3, #1
 80075dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	4413      	add	r3, r2
 80075e4:	2203      	movs	r2, #3
 80075e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
 80075ea:	3301      	adds	r3, #1
 80075ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075ee:	e013      	b.n	8007618 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075f0:	7dfb      	ldrb	r3, [r7, #23]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	4413      	add	r3, r2
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	7812      	ldrb	r2, [r2, #0]
 80075fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	3301      	adds	r3, #1
 8007600:	613b      	str	r3, [r7, #16]
    idx++;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	3301      	adds	r3, #1
 8007606:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	4413      	add	r3, r2
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
    idx++;
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	3301      	adds	r3, #1
 8007616:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e7      	bne.n	80075f0 <USBD_GetString+0x52>
 8007620:	e000      	b.n	8007624 <USBD_GetString+0x86>
    return;
 8007622:	bf00      	nop
  }
}
 8007624:	3718      	adds	r7, #24
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800762a:	b480      	push	{r7}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800763a:	e005      	b.n	8007648 <USBD_GetLen+0x1e>
  {
    len++;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	3301      	adds	r3, #1
 8007640:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	3301      	adds	r3, #1
 8007646:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1f5      	bne.n	800763c <USBD_GetLen+0x12>
  }

  return len;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2202      	movs	r2, #2
 800766e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	2100      	movs	r1, #0
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 fcec 	bl	8008062 <USBD_LL_Transmit>

  return USBD_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	2100      	movs	r1, #0
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fcdb 	bl	8008062 <USBD_LL_Transmit>

  return USBD_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b084      	sub	sp, #16
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2203      	movs	r2, #3
 80076c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	2100      	movs	r1, #0
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fcdf 	bl	80080a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	2100      	movs	r1, #0
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 fcce 	bl	80080a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2204      	movs	r2, #4
 800771e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007722:	2300      	movs	r3, #0
 8007724:	2200      	movs	r2, #0
 8007726:	2100      	movs	r1, #0
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fc9a 	bl	8008062 <USBD_LL_Transmit>

  return USBD_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2205      	movs	r2, #5
 8007744:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007748:	2300      	movs	r3, #0
 800774a:	2200      	movs	r2, #0
 800774c:	2100      	movs	r1, #0
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fca8 	bl	80080a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007764:	2200      	movs	r2, #0
 8007766:	4912      	ldr	r1, [pc, #72]	; (80077b0 <MX_USB_DEVICE_Init+0x50>)
 8007768:	4812      	ldr	r0, [pc, #72]	; (80077b4 <MX_USB_DEVICE_Init+0x54>)
 800776a:	f7fe fe8f 	bl	800648c <USBD_Init>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007774:	f7f9 f85a 	bl	800082c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007778:	490f      	ldr	r1, [pc, #60]	; (80077b8 <MX_USB_DEVICE_Init+0x58>)
 800777a:	480e      	ldr	r0, [pc, #56]	; (80077b4 <MX_USB_DEVICE_Init+0x54>)
 800777c:	f7fe feb6 	bl	80064ec <USBD_RegisterClass>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007786:	f7f9 f851 	bl	800082c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800778a:	490c      	ldr	r1, [pc, #48]	; (80077bc <MX_USB_DEVICE_Init+0x5c>)
 800778c:	4809      	ldr	r0, [pc, #36]	; (80077b4 <MX_USB_DEVICE_Init+0x54>)
 800778e:	f7fe fdd7 	bl	8006340 <USBD_CDC_RegisterInterface>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d001      	beq.n	800779c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007798:	f7f9 f848 	bl	800082c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800779c:	4805      	ldr	r0, [pc, #20]	; (80077b4 <MX_USB_DEVICE_Init+0x54>)
 800779e:	f7fe fecc 	bl	800653a <USBD_Start>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077a8:	f7f9 f840 	bl	800082c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077ac:	bf00      	nop
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20000130 	.word	0x20000130
 80077b4:	20000c84 	.word	0x20000c84
 80077b8:	20000018 	.word	0x20000018
 80077bc:	2000011c 	.word	0x2000011c

080077c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077c4:	2200      	movs	r2, #0
 80077c6:	4905      	ldr	r1, [pc, #20]	; (80077dc <CDC_Init_FS+0x1c>)
 80077c8:	4805      	ldr	r0, [pc, #20]	; (80077e0 <CDC_Init_FS+0x20>)
 80077ca:	f7fe fdce 	bl	800636a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80077ce:	4905      	ldr	r1, [pc, #20]	; (80077e4 <CDC_Init_FS+0x24>)
 80077d0:	4803      	ldr	r0, [pc, #12]	; (80077e0 <CDC_Init_FS+0x20>)
 80077d2:	f7fe fde8 	bl	80063a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80077d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80077d8:	4618      	mov	r0, r3
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	20001754 	.word	0x20001754
 80077e0:	20000c84 	.word	0x20000c84
 80077e4:	20000f54 	.word	0x20000f54

080077e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80077ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4603      	mov	r3, r0
 8007800:	6039      	str	r1, [r7, #0]
 8007802:	71fb      	strb	r3, [r7, #7]
 8007804:	4613      	mov	r3, r2
 8007806:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	2b23      	cmp	r3, #35	; 0x23
 800780c:	d84a      	bhi.n	80078a4 <CDC_Control_FS+0xac>
 800780e:	a201      	add	r2, pc, #4	; (adr r2, 8007814 <CDC_Control_FS+0x1c>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	080078a5 	.word	0x080078a5
 8007818:	080078a5 	.word	0x080078a5
 800781c:	080078a5 	.word	0x080078a5
 8007820:	080078a5 	.word	0x080078a5
 8007824:	080078a5 	.word	0x080078a5
 8007828:	080078a5 	.word	0x080078a5
 800782c:	080078a5 	.word	0x080078a5
 8007830:	080078a5 	.word	0x080078a5
 8007834:	080078a5 	.word	0x080078a5
 8007838:	080078a5 	.word	0x080078a5
 800783c:	080078a5 	.word	0x080078a5
 8007840:	080078a5 	.word	0x080078a5
 8007844:	080078a5 	.word	0x080078a5
 8007848:	080078a5 	.word	0x080078a5
 800784c:	080078a5 	.word	0x080078a5
 8007850:	080078a5 	.word	0x080078a5
 8007854:	080078a5 	.word	0x080078a5
 8007858:	080078a5 	.word	0x080078a5
 800785c:	080078a5 	.word	0x080078a5
 8007860:	080078a5 	.word	0x080078a5
 8007864:	080078a5 	.word	0x080078a5
 8007868:	080078a5 	.word	0x080078a5
 800786c:	080078a5 	.word	0x080078a5
 8007870:	080078a5 	.word	0x080078a5
 8007874:	080078a5 	.word	0x080078a5
 8007878:	080078a5 	.word	0x080078a5
 800787c:	080078a5 	.word	0x080078a5
 8007880:	080078a5 	.word	0x080078a5
 8007884:	080078a5 	.word	0x080078a5
 8007888:	080078a5 	.word	0x080078a5
 800788c:	080078a5 	.word	0x080078a5
 8007890:	080078a5 	.word	0x080078a5
 8007894:	080078a5 	.word	0x080078a5
 8007898:	080078a5 	.word	0x080078a5
 800789c:	080078a5 	.word	0x080078a5
 80078a0:	080078a5 	.word	0x080078a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80078a4:	bf00      	nop
  }

  return (USBD_OK);
 80078a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	4805      	ldr	r0, [pc, #20]	; (80078d8 <CDC_Receive_FS+0x24>)
 80078c2:	f7fe fd70 	bl	80063a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80078c6:	4804      	ldr	r0, [pc, #16]	; (80078d8 <CDC_Receive_FS+0x24>)
 80078c8:	f7fe fdb6 	bl	8006438 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80078cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3708      	adds	r7, #8
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20000c84 	.word	0x20000c84

080078dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80078ec:	4b0d      	ldr	r3, [pc, #52]	; (8007924 <CDC_Transmit_FS+0x48>)
 80078ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80078fe:	2301      	movs	r3, #1
 8007900:	e00b      	b.n	800791a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007902:	887b      	ldrh	r3, [r7, #2]
 8007904:	461a      	mov	r2, r3
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	4806      	ldr	r0, [pc, #24]	; (8007924 <CDC_Transmit_FS+0x48>)
 800790a:	f7fe fd2e 	bl	800636a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800790e:	4805      	ldr	r0, [pc, #20]	; (8007924 <CDC_Transmit_FS+0x48>)
 8007910:	f7fe fd62 	bl	80063d8 <USBD_CDC_TransmitPacket>
 8007914:	4603      	mov	r3, r0
 8007916:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007918:	7bfb      	ldrb	r3, [r7, #15]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20000c84 	.word	0x20000c84

08007928 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	4613      	mov	r3, r2
 8007934:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800793a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800793e:	4618      	mov	r0, r3
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
	...

0800794c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	6039      	str	r1, [r7, #0]
 8007956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2212      	movs	r2, #18
 800795c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800795e:	4b03      	ldr	r3, [pc, #12]	; (800796c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	2000014c 	.word	0x2000014c

08007970 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	4603      	mov	r3, r0
 8007978:	6039      	str	r1, [r7, #0]
 800797a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2204      	movs	r2, #4
 8007980:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007982:	4b03      	ldr	r3, [pc, #12]	; (8007990 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	20000160 	.word	0x20000160

08007994 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	6039      	str	r1, [r7, #0]
 800799e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079a0:	79fb      	ldrb	r3, [r7, #7]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d105      	bne.n	80079b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	4907      	ldr	r1, [pc, #28]	; (80079c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80079aa:	4808      	ldr	r0, [pc, #32]	; (80079cc <USBD_FS_ProductStrDescriptor+0x38>)
 80079ac:	f7ff fdf7 	bl	800759e <USBD_GetString>
 80079b0:	e004      	b.n	80079bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	4904      	ldr	r1, [pc, #16]	; (80079c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80079b6:	4805      	ldr	r0, [pc, #20]	; (80079cc <USBD_FS_ProductStrDescriptor+0x38>)
 80079b8:	f7ff fdf1 	bl	800759e <USBD_GetString>
  }
  return USBD_StrDesc;
 80079bc:	4b02      	ldr	r3, [pc, #8]	; (80079c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20001f54 	.word	0x20001f54
 80079cc:	08008204 	.word	0x08008204

080079d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	4603      	mov	r3, r0
 80079d8:	6039      	str	r1, [r7, #0]
 80079da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	4904      	ldr	r1, [pc, #16]	; (80079f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079e0:	4804      	ldr	r0, [pc, #16]	; (80079f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079e2:	f7ff fddc 	bl	800759e <USBD_GetString>
  return USBD_StrDesc;
 80079e6:	4b02      	ldr	r3, [pc, #8]	; (80079f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3708      	adds	r7, #8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	20001f54 	.word	0x20001f54
 80079f4:	0800821c 	.word	0x0800821c

080079f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4603      	mov	r3, r0
 8007a00:	6039      	str	r1, [r7, #0]
 8007a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	221a      	movs	r2, #26
 8007a08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a0a:	f000 f843 	bl	8007a94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a0e:	4b02      	ldr	r3, [pc, #8]	; (8007a18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	20000164 	.word	0x20000164

08007a1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	4603      	mov	r3, r0
 8007a24:	6039      	str	r1, [r7, #0]
 8007a26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d105      	bne.n	8007a3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	4907      	ldr	r1, [pc, #28]	; (8007a50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a32:	4808      	ldr	r0, [pc, #32]	; (8007a54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a34:	f7ff fdb3 	bl	800759e <USBD_GetString>
 8007a38:	e004      	b.n	8007a44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	4904      	ldr	r1, [pc, #16]	; (8007a50 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a3e:	4805      	ldr	r0, [pc, #20]	; (8007a54 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a40:	f7ff fdad 	bl	800759e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a44:	4b02      	ldr	r3, [pc, #8]	; (8007a50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20001f54 	.word	0x20001f54
 8007a54:	08008230 	.word	0x08008230

08007a58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	6039      	str	r1, [r7, #0]
 8007a62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a64:	79fb      	ldrb	r3, [r7, #7]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d105      	bne.n	8007a76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	4907      	ldr	r1, [pc, #28]	; (8007a8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a6e:	4808      	ldr	r0, [pc, #32]	; (8007a90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a70:	f7ff fd95 	bl	800759e <USBD_GetString>
 8007a74:	e004      	b.n	8007a80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	4904      	ldr	r1, [pc, #16]	; (8007a8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a7a:	4805      	ldr	r0, [pc, #20]	; (8007a90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a7c:	f7ff fd8f 	bl	800759e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a80:	4b02      	ldr	r3, [pc, #8]	; (8007a8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20001f54 	.word	0x20001f54
 8007a90:	0800823c 	.word	0x0800823c

08007a94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a9a:	4b0f      	ldr	r3, [pc, #60]	; (8007ad8 <Get_SerialNum+0x44>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007aa0:	4b0e      	ldr	r3, [pc, #56]	; (8007adc <Get_SerialNum+0x48>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007aa6:	4b0e      	ldr	r3, [pc, #56]	; (8007ae0 <Get_SerialNum+0x4c>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d009      	beq.n	8007ace <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007aba:	2208      	movs	r2, #8
 8007abc:	4909      	ldr	r1, [pc, #36]	; (8007ae4 <Get_SerialNum+0x50>)
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f814 	bl	8007aec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ac4:	2204      	movs	r2, #4
 8007ac6:	4908      	ldr	r1, [pc, #32]	; (8007ae8 <Get_SerialNum+0x54>)
 8007ac8:	68b8      	ldr	r0, [r7, #8]
 8007aca:	f000 f80f 	bl	8007aec <IntToUnicode>
  }
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	1fff7a10 	.word	0x1fff7a10
 8007adc:	1fff7a14 	.word	0x1fff7a14
 8007ae0:	1fff7a18 	.word	0x1fff7a18
 8007ae4:	20000166 	.word	0x20000166
 8007ae8:	20000176 	.word	0x20000176

08007aec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b087      	sub	sp, #28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	4613      	mov	r3, r2
 8007af8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007afa:	2300      	movs	r3, #0
 8007afc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007afe:	2300      	movs	r3, #0
 8007b00:	75fb      	strb	r3, [r7, #23]
 8007b02:	e027      	b.n	8007b54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	0f1b      	lsrs	r3, r3, #28
 8007b08:	2b09      	cmp	r3, #9
 8007b0a:	d80b      	bhi.n	8007b24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	0f1b      	lsrs	r3, r3, #28
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
 8007b14:	005b      	lsls	r3, r3, #1
 8007b16:	4619      	mov	r1, r3
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	440b      	add	r3, r1
 8007b1c:	3230      	adds	r2, #48	; 0x30
 8007b1e:	b2d2      	uxtb	r2, r2
 8007b20:	701a      	strb	r2, [r3, #0]
 8007b22:	e00a      	b.n	8007b3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	0f1b      	lsrs	r3, r3, #28
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	7dfb      	ldrb	r3, [r7, #23]
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	4619      	mov	r1, r3
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	440b      	add	r3, r1
 8007b34:	3237      	adds	r2, #55	; 0x37
 8007b36:	b2d2      	uxtb	r2, r2
 8007b38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	3301      	adds	r3, #1
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	4413      	add	r3, r2
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	3301      	adds	r3, #1
 8007b52:	75fb      	strb	r3, [r7, #23]
 8007b54:	7dfa      	ldrb	r2, [r7, #23]
 8007b56:	79fb      	ldrb	r3, [r7, #7]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d3d3      	bcc.n	8007b04 <IntToUnicode+0x18>
  }
}
 8007b5c:	bf00      	nop
 8007b5e:	bf00      	nop
 8007b60:	371c      	adds	r7, #28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
	...

08007b6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08a      	sub	sp, #40	; 0x28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b74:	f107 0314 	add.w	r3, r7, #20
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	605a      	str	r2, [r3, #4]
 8007b7e:	609a      	str	r2, [r3, #8]
 8007b80:	60da      	str	r2, [r3, #12]
 8007b82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b8c:	d13a      	bne.n	8007c04 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b8e:	2300      	movs	r3, #0
 8007b90:	613b      	str	r3, [r7, #16]
 8007b92:	4b1e      	ldr	r3, [pc, #120]	; (8007c0c <HAL_PCD_MspInit+0xa0>)
 8007b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b96:	4a1d      	ldr	r2, [pc, #116]	; (8007c0c <HAL_PCD_MspInit+0xa0>)
 8007b98:	f043 0301 	orr.w	r3, r3, #1
 8007b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8007b9e:	4b1b      	ldr	r3, [pc, #108]	; (8007c0c <HAL_PCD_MspInit+0xa0>)
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	613b      	str	r3, [r7, #16]
 8007ba8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007baa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007bbc:	230a      	movs	r3, #10
 8007bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bc0:	f107 0314 	add.w	r3, r7, #20
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4812      	ldr	r0, [pc, #72]	; (8007c10 <HAL_PCD_MspInit+0xa4>)
 8007bc8:	f7fa f890 	bl	8001cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007bcc:	4b0f      	ldr	r3, [pc, #60]	; (8007c0c <HAL_PCD_MspInit+0xa0>)
 8007bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd0:	4a0e      	ldr	r2, [pc, #56]	; (8007c0c <HAL_PCD_MspInit+0xa0>)
 8007bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd6:	6353      	str	r3, [r2, #52]	; 0x34
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	4b0b      	ldr	r3, [pc, #44]	; (8007c0c <HAL_PCD_MspInit+0xa0>)
 8007bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be0:	4a0a      	ldr	r2, [pc, #40]	; (8007c0c <HAL_PCD_MspInit+0xa0>)
 8007be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007be6:	6453      	str	r3, [r2, #68]	; 0x44
 8007be8:	4b08      	ldr	r3, [pc, #32]	; (8007c0c <HAL_PCD_MspInit+0xa0>)
 8007bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	2043      	movs	r0, #67	; 0x43
 8007bfa:	f7f9 fcd0 	bl	800159e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007bfe:	2043      	movs	r0, #67	; 0x43
 8007c00:	f7f9 fce9 	bl	80015d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c04:	bf00      	nop
 8007c06:	3728      	adds	r7, #40	; 0x28
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	40023800 	.word	0x40023800
 8007c10:	40020000 	.word	0x40020000

08007c14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	f7fe fcd0 	bl	80065d0 <USBD_LL_SetupStage>
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007c4a:	78fa      	ldrb	r2, [r7, #3]
 8007c4c:	6879      	ldr	r1, [r7, #4]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	1a9b      	subs	r3, r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	440b      	add	r3, r1
 8007c58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	78fb      	ldrb	r3, [r7, #3]
 8007c60:	4619      	mov	r1, r3
 8007c62:	f7fe fd0a 	bl	800667a <USBD_LL_DataOutStage>
}
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b082      	sub	sp, #8
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	460b      	mov	r3, r1
 8007c78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007c80:	78fa      	ldrb	r2, [r7, #3]
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	4613      	mov	r3, r2
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	1a9b      	subs	r3, r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	3348      	adds	r3, #72	; 0x48
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	4619      	mov	r1, r3
 8007c96:	f7fe fd53 	bl	8006740 <USBD_LL_DataInStage>
}
 8007c9a:	bf00      	nop
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fe fe67 	bl	8006984 <USBD_LL_SOF>
}
 8007cb6:	bf00      	nop
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d102      	bne.n	8007cd8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]
 8007cd6:	e008      	b.n	8007cea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d102      	bne.n	8007ce6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	73fb      	strb	r3, [r7, #15]
 8007ce4:	e001      	b.n	8007cea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007ce6:	f7f8 fda1 	bl	800082c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cf0:	7bfa      	ldrb	r2, [r7, #15]
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe fe07 	bl	8006908 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fe fdb3 	bl	800686c <USBD_LL_Reset>
}
 8007d06:	bf00      	nop
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fe02 	bl	8006928 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	6812      	ldr	r2, [r2, #0]
 8007d32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d36:	f043 0301 	orr.w	r3, r3, #1
 8007d3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d005      	beq.n	8007d50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d44:	4b04      	ldr	r3, [pc, #16]	; (8007d58 <HAL_PCD_SuspendCallback+0x48>)
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	4a03      	ldr	r2, [pc, #12]	; (8007d58 <HAL_PCD_SuspendCallback+0x48>)
 8007d4a:	f043 0306 	orr.w	r3, r3, #6
 8007d4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	e000ed00 	.word	0xe000ed00

08007d5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fdf2 	bl	8006954 <USBD_LL_Resume>
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d8a:	78fa      	ldrb	r2, [r7, #3]
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fe fe40 	bl	8006a14 <USBD_LL_IsoOUTIncomplete>
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dae:	78fa      	ldrb	r2, [r7, #3]
 8007db0:	4611      	mov	r1, r2
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fe fe08 	bl	80069c8 <USBD_LL_IsoINIncomplete>
}
 8007db8:	bf00      	nop
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fe fe46 	bl	8006a60 <USBD_LL_DevConnected>
}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fe43 	bl	8006a76 <USBD_LL_DevDisconnected>
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d13c      	bne.n	8007e82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007e08:	4a20      	ldr	r2, [pc, #128]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a1e      	ldr	r2, [pc, #120]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e14:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e18:	4b1c      	ldr	r3, [pc, #112]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007e1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007e20:	4b1a      	ldr	r3, [pc, #104]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e22:	2204      	movs	r2, #4
 8007e24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007e26:	4b19      	ldr	r3, [pc, #100]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e28:	2202      	movs	r2, #2
 8007e2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e2c:	4b17      	ldr	r3, [pc, #92]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e32:	4b16      	ldr	r3, [pc, #88]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e34:	2202      	movs	r2, #2
 8007e36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e38:	4b14      	ldr	r3, [pc, #80]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007e3e:	4b13      	ldr	r3, [pc, #76]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007e44:	4b11      	ldr	r3, [pc, #68]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e46:	2200      	movs	r2, #0
 8007e48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007e4a:	4b10      	ldr	r3, [pc, #64]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007e50:	4b0e      	ldr	r3, [pc, #56]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007e56:	480d      	ldr	r0, [pc, #52]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e58:	f7fa f8e4 	bl	8002024 <HAL_PCD_Init>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007e62:	f7f8 fce3 	bl	800082c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e66:	2180      	movs	r1, #128	; 0x80
 8007e68:	4808      	ldr	r0, [pc, #32]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e6a:	f7fb fa42 	bl	80032f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e6e:	2240      	movs	r2, #64	; 0x40
 8007e70:	2100      	movs	r1, #0
 8007e72:	4806      	ldr	r0, [pc, #24]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e74:	f7fb f9f6 	bl	8003264 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e78:	2280      	movs	r2, #128	; 0x80
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	4803      	ldr	r0, [pc, #12]	; (8007e8c <USBD_LL_Init+0x94>)
 8007e7e:	f7fb f9f1 	bl	8003264 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	20002154 	.word	0x20002154

08007e90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fa f9d9 	bl	800225e <HAL_PCD_Start>
 8007eac:	4603      	mov	r3, r0
 8007eae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f942 	bl	800813c <USBD_Get_USB_Status>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b084      	sub	sp, #16
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	4608      	mov	r0, r1
 8007ed0:	4611      	mov	r1, r2
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	70fb      	strb	r3, [r7, #3]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	70bb      	strb	r3, [r7, #2]
 8007edc:	4613      	mov	r3, r2
 8007ede:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007eee:	78bb      	ldrb	r3, [r7, #2]
 8007ef0:	883a      	ldrh	r2, [r7, #0]
 8007ef2:	78f9      	ldrb	r1, [r7, #3]
 8007ef4:	f7fa fdbd 	bl	8002a72 <HAL_PCD_EP_Open>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 f91c 	bl	800813c <USBD_Get_USB_Status>
 8007f04:	4603      	mov	r3, r0
 8007f06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f2c:	78fa      	ldrb	r2, [r7, #3]
 8007f2e:	4611      	mov	r1, r2
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7fa fe06 	bl	8002b42 <HAL_PCD_EP_Close>
 8007f36:	4603      	mov	r3, r0
 8007f38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f000 f8fd 	bl	800813c <USBD_Get_USB_Status>
 8007f42:	4603      	mov	r3, r0
 8007f44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f6a:	78fa      	ldrb	r2, [r7, #3]
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fa fede 	bl	8002d30 <HAL_PCD_EP_SetStall>
 8007f74:	4603      	mov	r3, r0
 8007f76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 f8de 	bl	800813c <USBD_Get_USB_Status>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b084      	sub	sp, #16
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	460b      	mov	r3, r1
 8007f98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fa8:	78fa      	ldrb	r2, [r7, #3]
 8007faa:	4611      	mov	r1, r2
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fa ff23 	bl	8002df8 <HAL_PCD_EP_ClrStall>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 f8bf 	bl	800813c <USBD_Get_USB_Status>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	da0b      	bge.n	8008000 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fee:	68f9      	ldr	r1, [r7, #12]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	1a9b      	subs	r3, r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	440b      	add	r3, r1
 8007ffa:	333e      	adds	r3, #62	; 0x3e
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	e00b      	b.n	8008018 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008006:	68f9      	ldr	r1, [r7, #12]
 8008008:	4613      	mov	r3, r2
 800800a:	00db      	lsls	r3, r3, #3
 800800c:	1a9b      	subs	r3, r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	440b      	add	r3, r1
 8008012:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008016:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008018:	4618      	mov	r0, r3
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800803e:	78fa      	ldrb	r2, [r7, #3]
 8008040:	4611      	mov	r1, r2
 8008042:	4618      	mov	r0, r3
 8008044:	f7fa fcf0 	bl	8002a28 <HAL_PCD_SetAddress>
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	4618      	mov	r0, r3
 8008050:	f000 f874 	bl	800813c <USBD_Get_USB_Status>
 8008054:	4603      	mov	r3, r0
 8008056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008058:	7bbb      	ldrb	r3, [r7, #14]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b086      	sub	sp, #24
 8008066:	af00      	add	r7, sp, #0
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	603b      	str	r3, [r7, #0]
 800806e:	460b      	mov	r3, r1
 8008070:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008080:	7af9      	ldrb	r1, [r7, #11]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	f7fa fe09 	bl	8002c9c <HAL_PCD_EP_Transmit>
 800808a:	4603      	mov	r3, r0
 800808c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	4618      	mov	r0, r3
 8008092:	f000 f853 	bl	800813c <USBD_Get_USB_Status>
 8008096:	4603      	mov	r3, r0
 8008098:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800809a:	7dbb      	ldrb	r3, [r7, #22]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	607a      	str	r2, [r7, #4]
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	460b      	mov	r3, r1
 80080b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80080c2:	7af9      	ldrb	r1, [r7, #11]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	f7fa fd85 	bl	8002bd6 <HAL_PCD_EP_Receive>
 80080cc:	4603      	mov	r3, r0
 80080ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 f832 	bl	800813c <USBD_Get_USB_Status>
 80080d8:	4603      	mov	r3, r0
 80080da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	460b      	mov	r3, r1
 80080f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080f8:	78fa      	ldrb	r2, [r7, #3]
 80080fa:	4611      	mov	r1, r2
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fa fdb5 	bl	8002c6c <HAL_PCD_EP_GetRxCount>
 8008102:	4603      	mov	r3, r0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008114:	4b03      	ldr	r3, [pc, #12]	; (8008124 <USBD_static_malloc+0x18>)
}
 8008116:	4618      	mov	r0, r3
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	200001a0 	.word	0x200001a0

08008128 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]

}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	4603      	mov	r3, r0
 8008144:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800814a:	79fb      	ldrb	r3, [r7, #7]
 800814c:	2b03      	cmp	r3, #3
 800814e:	d817      	bhi.n	8008180 <USBD_Get_USB_Status+0x44>
 8008150:	a201      	add	r2, pc, #4	; (adr r2, 8008158 <USBD_Get_USB_Status+0x1c>)
 8008152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008156:	bf00      	nop
 8008158:	08008169 	.word	0x08008169
 800815c:	0800816f 	.word	0x0800816f
 8008160:	08008175 	.word	0x08008175
 8008164:	0800817b 	.word	0x0800817b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]
    break;
 800816c:	e00b      	b.n	8008186 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800816e:	2303      	movs	r3, #3
 8008170:	73fb      	strb	r3, [r7, #15]
    break;
 8008172:	e008      	b.n	8008186 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008174:	2301      	movs	r3, #1
 8008176:	73fb      	strb	r3, [r7, #15]
    break;
 8008178:	e005      	b.n	8008186 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800817a:	2303      	movs	r3, #3
 800817c:	73fb      	strb	r3, [r7, #15]
    break;
 800817e:	e002      	b.n	8008186 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008180:	2303      	movs	r3, #3
 8008182:	73fb      	strb	r3, [r7, #15]
    break;
 8008184:	bf00      	nop
  }
  return usb_status;
 8008186:	7bfb      	ldrb	r3, [r7, #15]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <__libc_init_array>:
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	4d0d      	ldr	r5, [pc, #52]	; (80081cc <__libc_init_array+0x38>)
 8008198:	4c0d      	ldr	r4, [pc, #52]	; (80081d0 <__libc_init_array+0x3c>)
 800819a:	1b64      	subs	r4, r4, r5
 800819c:	10a4      	asrs	r4, r4, #2
 800819e:	2600      	movs	r6, #0
 80081a0:	42a6      	cmp	r6, r4
 80081a2:	d109      	bne.n	80081b8 <__libc_init_array+0x24>
 80081a4:	4d0b      	ldr	r5, [pc, #44]	; (80081d4 <__libc_init_array+0x40>)
 80081a6:	4c0c      	ldr	r4, [pc, #48]	; (80081d8 <__libc_init_array+0x44>)
 80081a8:	f000 f820 	bl	80081ec <_init>
 80081ac:	1b64      	subs	r4, r4, r5
 80081ae:	10a4      	asrs	r4, r4, #2
 80081b0:	2600      	movs	r6, #0
 80081b2:	42a6      	cmp	r6, r4
 80081b4:	d105      	bne.n	80081c2 <__libc_init_array+0x2e>
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081bc:	4798      	blx	r3
 80081be:	3601      	adds	r6, #1
 80081c0:	e7ee      	b.n	80081a0 <__libc_init_array+0xc>
 80081c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081c6:	4798      	blx	r3
 80081c8:	3601      	adds	r6, #1
 80081ca:	e7f2      	b.n	80081b2 <__libc_init_array+0x1e>
 80081cc:	0800826c 	.word	0x0800826c
 80081d0:	0800826c 	.word	0x0800826c
 80081d4:	0800826c 	.word	0x0800826c
 80081d8:	08008270 	.word	0x08008270

080081dc <memset>:
 80081dc:	4402      	add	r2, r0
 80081de:	4603      	mov	r3, r0
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d100      	bne.n	80081e6 <memset+0xa>
 80081e4:	4770      	bx	lr
 80081e6:	f803 1b01 	strb.w	r1, [r3], #1
 80081ea:	e7f9      	b.n	80081e0 <memset+0x4>

080081ec <_init>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	bf00      	nop
 80081f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f2:	bc08      	pop	{r3}
 80081f4:	469e      	mov	lr, r3
 80081f6:	4770      	bx	lr

080081f8 <_fini>:
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fa:	bf00      	nop
 80081fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081fe:	bc08      	pop	{r3}
 8008200:	469e      	mov	lr, r3
 8008202:	4770      	bx	lr
